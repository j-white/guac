// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
)

// BillOfMaterialsCreate is the builder for creating a BillOfMaterials entity.
type BillOfMaterialsCreate struct {
	config
	mutation *BillOfMaterialsMutation
	hooks    []Hook
}

// SetPackageID sets the "package_id" field.
func (bomc *BillOfMaterialsCreate) SetPackageID(i int) *BillOfMaterialsCreate {
	bomc.mutation.SetPackageID(i)
	return bomc
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (bomc *BillOfMaterialsCreate) SetNillablePackageID(i *int) *BillOfMaterialsCreate {
	if i != nil {
		bomc.SetPackageID(*i)
	}
	return bomc
}

// SetArtifactID sets the "artifact_id" field.
func (bomc *BillOfMaterialsCreate) SetArtifactID(i int) *BillOfMaterialsCreate {
	bomc.mutation.SetArtifactID(i)
	return bomc
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (bomc *BillOfMaterialsCreate) SetNillableArtifactID(i *int) *BillOfMaterialsCreate {
	if i != nil {
		bomc.SetArtifactID(*i)
	}
	return bomc
}

// SetURI sets the "uri" field.
func (bomc *BillOfMaterialsCreate) SetURI(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetURI(s)
	return bomc
}

// SetAlgorithm sets the "algorithm" field.
func (bomc *BillOfMaterialsCreate) SetAlgorithm(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetAlgorithm(s)
	return bomc
}

// SetDigest sets the "digest" field.
func (bomc *BillOfMaterialsCreate) SetDigest(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetDigest(s)
	return bomc
}

// SetDownloadLocation sets the "download_location" field.
func (bomc *BillOfMaterialsCreate) SetDownloadLocation(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetDownloadLocation(s)
	return bomc
}

// SetOrigin sets the "origin" field.
func (bomc *BillOfMaterialsCreate) SetOrigin(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetOrigin(s)
	return bomc
}

// SetCollector sets the "collector" field.
func (bomc *BillOfMaterialsCreate) SetCollector(s string) *BillOfMaterialsCreate {
	bomc.mutation.SetCollector(s)
	return bomc
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (bomc *BillOfMaterialsCreate) SetPackage(p *PackageVersion) *BillOfMaterialsCreate {
	return bomc.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (bomc *BillOfMaterialsCreate) SetArtifact(a *Artifact) *BillOfMaterialsCreate {
	return bomc.SetArtifactID(a.ID)
}

// Mutation returns the BillOfMaterialsMutation object of the builder.
func (bomc *BillOfMaterialsCreate) Mutation() *BillOfMaterialsMutation {
	return bomc.mutation
}

// Save creates the BillOfMaterials in the database.
func (bomc *BillOfMaterialsCreate) Save(ctx context.Context) (*BillOfMaterials, error) {
	return withHooks(ctx, bomc.gremlinSave, bomc.mutation, bomc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bomc *BillOfMaterialsCreate) SaveX(ctx context.Context) *BillOfMaterials {
	v, err := bomc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bomc *BillOfMaterialsCreate) Exec(ctx context.Context) error {
	_, err := bomc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bomc *BillOfMaterialsCreate) ExecX(ctx context.Context) {
	if err := bomc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bomc *BillOfMaterialsCreate) check() error {
	if _, ok := bomc.mutation.URI(); !ok {
		return &ValidationError{Name: "uri", err: errors.New(`ent: missing required field "BillOfMaterials.uri"`)}
	}
	if _, ok := bomc.mutation.Algorithm(); !ok {
		return &ValidationError{Name: "algorithm", err: errors.New(`ent: missing required field "BillOfMaterials.algorithm"`)}
	}
	if _, ok := bomc.mutation.Digest(); !ok {
		return &ValidationError{Name: "digest", err: errors.New(`ent: missing required field "BillOfMaterials.digest"`)}
	}
	if _, ok := bomc.mutation.DownloadLocation(); !ok {
		return &ValidationError{Name: "download_location", err: errors.New(`ent: missing required field "BillOfMaterials.download_location"`)}
	}
	if _, ok := bomc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "BillOfMaterials.origin"`)}
	}
	if _, ok := bomc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "BillOfMaterials.collector"`)}
	}
	return nil
}

func (bomc *BillOfMaterialsCreate) gremlinSave(ctx context.Context) (*BillOfMaterials, error) {
	if err := bomc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := bomc.gremlin().Query()
	if err := bomc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &BillOfMaterials{config: bomc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	bomc.mutation.id = &rnode.ID
	bomc.mutation.done = true
	return rnode, nil
}

func (bomc *BillOfMaterialsCreate) gremlin() *dsl.Traversal {
	v := g.AddV(billofmaterials.Label)
	if value, ok := bomc.mutation.URI(); ok {
		v.Property(dsl.Single, billofmaterials.FieldURI, value)
	}
	if value, ok := bomc.mutation.Algorithm(); ok {
		v.Property(dsl.Single, billofmaterials.FieldAlgorithm, value)
	}
	if value, ok := bomc.mutation.Digest(); ok {
		v.Property(dsl.Single, billofmaterials.FieldDigest, value)
	}
	if value, ok := bomc.mutation.DownloadLocation(); ok {
		v.Property(dsl.Single, billofmaterials.FieldDownloadLocation, value)
	}
	if value, ok := bomc.mutation.Origin(); ok {
		v.Property(dsl.Single, billofmaterials.FieldOrigin, value)
	}
	if value, ok := bomc.mutation.Collector(); ok {
		v.Property(dsl.Single, billofmaterials.FieldCollector, value)
	}
	for _, id := range bomc.mutation.PackageIDs() {
		v.AddE(billofmaterials.PackageLabel).To(g.V(id)).OutV()
	}
	for _, id := range bomc.mutation.ArtifactIDs() {
		v.AddE(billofmaterials.ArtifactLabel).To(g.V(id)).OutV()
	}
	return v.ValueMap(true)
}

// BillOfMaterialsCreateBulk is the builder for creating many BillOfMaterials entities in bulk.
type BillOfMaterialsCreateBulk struct {
	config
	builders []*BillOfMaterialsCreate
}
