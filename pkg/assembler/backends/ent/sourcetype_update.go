// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcetype"
)

// SourceTypeUpdate is the builder for updating SourceType entities.
type SourceTypeUpdate struct {
	config
	hooks    []Hook
	mutation *SourceTypeMutation
}

// Where appends a list predicates to the SourceTypeUpdate builder.
func (stu *SourceTypeUpdate) Where(ps ...predicate.SourceType) *SourceTypeUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetType sets the "type" field.
func (stu *SourceTypeUpdate) SetType(s string) *SourceTypeUpdate {
	stu.mutation.SetType(s)
	return stu
}

// AddNamespaceIDs adds the "namespaces" edge to the SourceNamespace entity by IDs.
func (stu *SourceTypeUpdate) AddNamespaceIDs(ids ...int) *SourceTypeUpdate {
	stu.mutation.AddNamespaceIDs(ids...)
	return stu
}

// AddNamespaces adds the "namespaces" edges to the SourceNamespace entity.
func (stu *SourceTypeUpdate) AddNamespaces(s ...*SourceNamespace) *SourceTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddNamespaceIDs(ids...)
}

// Mutation returns the SourceTypeMutation object of the builder.
func (stu *SourceTypeUpdate) Mutation() *SourceTypeMutation {
	return stu.mutation
}

// ClearNamespaces clears all "namespaces" edges to the SourceNamespace entity.
func (stu *SourceTypeUpdate) ClearNamespaces() *SourceTypeUpdate {
	stu.mutation.ClearNamespaces()
	return stu
}

// RemoveNamespaceIDs removes the "namespaces" edge to SourceNamespace entities by IDs.
func (stu *SourceTypeUpdate) RemoveNamespaceIDs(ids ...int) *SourceTypeUpdate {
	stu.mutation.RemoveNamespaceIDs(ids...)
	return stu
}

// RemoveNamespaces removes "namespaces" edges to SourceNamespace entities.
func (stu *SourceTypeUpdate) RemoveNamespaces(s ...*SourceNamespace) *SourceTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveNamespaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SourceTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, stu.gremlinSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SourceTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SourceTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SourceTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *SourceTypeUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := stu.gremlin().Query()
	if err := stu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	stu.mutation.done = true
	return res.ReadInt()
}

func (stu *SourceTypeUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V().HasLabel(sourcetype.Label)
	for _, p := range stu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := stu.mutation.GetType(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(sourcetype.Label, sourcetype.FieldType, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(sourcetype.Label, sourcetype.FieldType, value)),
		})
		v.Property(dsl.Single, sourcetype.FieldType, value)
	}
	for _, id := range stu.mutation.RemovedNamespacesIDs() {
		tr := rv.Clone().InE(sourcenamespace.SourceTypeLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range stu.mutation.NamespacesIDs() {
		v.AddE(sourcenamespace.SourceTypeLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(sourcenamespace.SourceTypeLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(sourcetype.Label, sourcenamespace.SourceTypeLabel, id)),
		})
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// SourceTypeUpdateOne is the builder for updating a single SourceType entity.
type SourceTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SourceTypeMutation
}

// SetType sets the "type" field.
func (stuo *SourceTypeUpdateOne) SetType(s string) *SourceTypeUpdateOne {
	stuo.mutation.SetType(s)
	return stuo
}

// AddNamespaceIDs adds the "namespaces" edge to the SourceNamespace entity by IDs.
func (stuo *SourceTypeUpdateOne) AddNamespaceIDs(ids ...int) *SourceTypeUpdateOne {
	stuo.mutation.AddNamespaceIDs(ids...)
	return stuo
}

// AddNamespaces adds the "namespaces" edges to the SourceNamespace entity.
func (stuo *SourceTypeUpdateOne) AddNamespaces(s ...*SourceNamespace) *SourceTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddNamespaceIDs(ids...)
}

// Mutation returns the SourceTypeMutation object of the builder.
func (stuo *SourceTypeUpdateOne) Mutation() *SourceTypeMutation {
	return stuo.mutation
}

// ClearNamespaces clears all "namespaces" edges to the SourceNamespace entity.
func (stuo *SourceTypeUpdateOne) ClearNamespaces() *SourceTypeUpdateOne {
	stuo.mutation.ClearNamespaces()
	return stuo
}

// RemoveNamespaceIDs removes the "namespaces" edge to SourceNamespace entities by IDs.
func (stuo *SourceTypeUpdateOne) RemoveNamespaceIDs(ids ...int) *SourceTypeUpdateOne {
	stuo.mutation.RemoveNamespaceIDs(ids...)
	return stuo
}

// RemoveNamespaces removes "namespaces" edges to SourceNamespace entities.
func (stuo *SourceTypeUpdateOne) RemoveNamespaces(s ...*SourceNamespace) *SourceTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveNamespaceIDs(ids...)
}

// Where appends a list predicates to the SourceTypeUpdate builder.
func (stuo *SourceTypeUpdateOne) Where(ps ...predicate.SourceType) *SourceTypeUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SourceTypeUpdateOne) Select(field string, fields ...string) *SourceTypeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SourceType entity.
func (stuo *SourceTypeUpdateOne) Save(ctx context.Context) (*SourceType, error) {
	return withHooks(ctx, stuo.gremlinSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SourceTypeUpdateOne) SaveX(ctx context.Context) *SourceType {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SourceTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SourceTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *SourceTypeUpdateOne) gremlinSave(ctx context.Context) (*SourceType, error) {
	res := &gremlin.Response{}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SourceType.id" for update`)}
	}
	query, bindings := stuo.gremlin(id).Query()
	if err := stuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	stuo.mutation.done = true
	st := &SourceType{config: stuo.config}
	if err := st.FromResponse(res); err != nil {
		return nil, err
	}
	return st, nil
}

func (stuo *SourceTypeUpdateOne) gremlin(id int) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := stuo.mutation.GetType(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(sourcetype.Label, sourcetype.FieldType, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(sourcetype.Label, sourcetype.FieldType, value)),
		})
		v.Property(dsl.Single, sourcetype.FieldType, value)
	}
	for _, id := range stuo.mutation.RemovedNamespacesIDs() {
		tr := rv.Clone().InE(sourcenamespace.SourceTypeLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range stuo.mutation.NamespacesIDs() {
		v.AddE(sourcenamespace.SourceTypeLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(sourcenamespace.SourceTypeLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(sourcetype.Label, sourcenamespace.SourceTypeLabel, id)),
		})
	}
	if len(stuo.fields) > 0 {
		fields := make([]any, 0, len(stuo.fields)+1)
		fields = append(fields, true)
		for _, f := range stuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
