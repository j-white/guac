// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// SourceNameDelete is the builder for deleting a SourceName entity.
type SourceNameDelete struct {
	config
	hooks    []Hook
	mutation *SourceNameMutation
}

// Where appends a list predicates to the SourceNameDelete builder.
func (snd *SourceNameDelete) Where(ps ...predicate.SourceName) *SourceNameDelete {
	snd.mutation.Where(ps...)
	return snd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (snd *SourceNameDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, snd.gremlinExec, snd.mutation, snd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (snd *SourceNameDelete) ExecX(ctx context.Context) int {
	n, err := snd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (snd *SourceNameDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := snd.gremlin().Query()
	if err := snd.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	snd.mutation.done = true
	return res.ReadInt()
}

func (snd *SourceNameDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(sourcename.Label)
	for _, p := range snd.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// SourceNameDeleteOne is the builder for deleting a single SourceName entity.
type SourceNameDeleteOne struct {
	snd *SourceNameDelete
}

// Where appends a list predicates to the SourceNameDelete builder.
func (sndo *SourceNameDeleteOne) Where(ps ...predicate.SourceName) *SourceNameDeleteOne {
	sndo.snd.mutation.Where(ps...)
	return sndo
}

// Exec executes the deletion query.
func (sndo *SourceNameDeleteOne) Exec(ctx context.Context) error {
	n, err := sndo.snd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sourcename.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sndo *SourceNameDeleteOne) ExecX(ctx context.Context) {
	if err := sndo.Exec(ctx); err != nil {
		panic(err)
	}
}
