// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// OccurrenceUpdate is the builder for updating Occurrence entities.
type OccurrenceUpdate struct {
	config
	hooks    []Hook
	mutation *OccurrenceMutation
}

// Where appends a list predicates to the OccurrenceUpdate builder.
func (ou *OccurrenceUpdate) Where(ps ...predicate.Occurrence) *OccurrenceUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetArtifactID sets the "artifact_id" field.
func (ou *OccurrenceUpdate) SetArtifactID(i int) *OccurrenceUpdate {
	ou.mutation.SetArtifactID(i)
	return ou
}

// SetJustification sets the "justification" field.
func (ou *OccurrenceUpdate) SetJustification(s string) *OccurrenceUpdate {
	ou.mutation.SetJustification(s)
	return ou
}

// SetOrigin sets the "origin" field.
func (ou *OccurrenceUpdate) SetOrigin(s string) *OccurrenceUpdate {
	ou.mutation.SetOrigin(s)
	return ou
}

// SetCollector sets the "collector" field.
func (ou *OccurrenceUpdate) SetCollector(s string) *OccurrenceUpdate {
	ou.mutation.SetCollector(s)
	return ou
}

// SetSourceID sets the "source_id" field.
func (ou *OccurrenceUpdate) SetSourceID(i int) *OccurrenceUpdate {
	ou.mutation.SetSourceID(i)
	return ou
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillableSourceID(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetSourceID(*i)
	}
	return ou
}

// ClearSourceID clears the value of the "source_id" field.
func (ou *OccurrenceUpdate) ClearSourceID() *OccurrenceUpdate {
	ou.mutation.ClearSourceID()
	return ou
}

// SetPackageID sets the "package_id" field.
func (ou *OccurrenceUpdate) SetPackageID(i int) *OccurrenceUpdate {
	ou.mutation.SetPackageID(i)
	return ou
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (ou *OccurrenceUpdate) SetNillablePackageID(i *int) *OccurrenceUpdate {
	if i != nil {
		ou.SetPackageID(*i)
	}
	return ou
}

// ClearPackageID clears the value of the "package_id" field.
func (ou *OccurrenceUpdate) ClearPackageID() *OccurrenceUpdate {
	ou.mutation.ClearPackageID()
	return ou
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (ou *OccurrenceUpdate) SetArtifact(a *Artifact) *OccurrenceUpdate {
	return ou.SetArtifactID(a.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (ou *OccurrenceUpdate) SetPackage(p *PackageVersion) *OccurrenceUpdate {
	return ou.SetPackageID(p.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (ou *OccurrenceUpdate) SetSource(s *SourceName) *OccurrenceUpdate {
	return ou.SetSourceID(s.ID)
}

// Mutation returns the OccurrenceMutation object of the builder.
func (ou *OccurrenceUpdate) Mutation() *OccurrenceMutation {
	return ou.mutation
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (ou *OccurrenceUpdate) ClearArtifact() *OccurrenceUpdate {
	ou.mutation.ClearArtifact()
	return ou
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (ou *OccurrenceUpdate) ClearPackage() *OccurrenceUpdate {
	ou.mutation.ClearPackage()
	return ou
}

// ClearSource clears the "source" edge to the SourceName entity.
func (ou *OccurrenceUpdate) ClearSource() *OccurrenceUpdate {
	ou.mutation.ClearSource()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OccurrenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.gremlinSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OccurrenceUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OccurrenceUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OccurrenceUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OccurrenceUpdate) check() error {
	if _, ok := ou.mutation.ArtifactID(); ou.mutation.ArtifactCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Occurrence.artifact"`)
	}
	return nil
}

func (ou *OccurrenceUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := ou.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := ou.gremlin().Query()
	if err := ou.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	ou.mutation.done = true
	return res.ReadInt()
}

func (ou *OccurrenceUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(occurrence.Label)
	for _, p := range ou.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := ou.mutation.Justification(); ok {
		v.Property(dsl.Single, occurrence.FieldJustification, value)
	}
	if value, ok := ou.mutation.Origin(); ok {
		v.Property(dsl.Single, occurrence.FieldOrigin, value)
	}
	if value, ok := ou.mutation.Collector(); ok {
		v.Property(dsl.Single, occurrence.FieldCollector, value)
	}
	var properties []any
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if ou.mutation.ArtifactCleared() {
		tr := rv.Clone().OutE(occurrence.ArtifactLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ou.mutation.ArtifactIDs() {
		v.AddE(occurrence.ArtifactLabel).To(g.V(id)).OutV()
	}
	if ou.mutation.PackageCleared() {
		tr := rv.Clone().OutE(occurrence.PackageLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ou.mutation.PackageIDs() {
		v.AddE(occurrence.PackageLabel).To(g.V(id)).OutV()
	}
	if ou.mutation.SourceCleared() {
		tr := rv.Clone().OutE(occurrence.SourceLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ou.mutation.SourceIDs() {
		v.AddE(occurrence.SourceLabel).To(g.V(id)).OutV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// OccurrenceUpdateOne is the builder for updating a single Occurrence entity.
type OccurrenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OccurrenceMutation
}

// SetArtifactID sets the "artifact_id" field.
func (ouo *OccurrenceUpdateOne) SetArtifactID(i int) *OccurrenceUpdateOne {
	ouo.mutation.SetArtifactID(i)
	return ouo
}

// SetJustification sets the "justification" field.
func (ouo *OccurrenceUpdateOne) SetJustification(s string) *OccurrenceUpdateOne {
	ouo.mutation.SetJustification(s)
	return ouo
}

// SetOrigin sets the "origin" field.
func (ouo *OccurrenceUpdateOne) SetOrigin(s string) *OccurrenceUpdateOne {
	ouo.mutation.SetOrigin(s)
	return ouo
}

// SetCollector sets the "collector" field.
func (ouo *OccurrenceUpdateOne) SetCollector(s string) *OccurrenceUpdateOne {
	ouo.mutation.SetCollector(s)
	return ouo
}

// SetSourceID sets the "source_id" field.
func (ouo *OccurrenceUpdateOne) SetSourceID(i int) *OccurrenceUpdateOne {
	ouo.mutation.SetSourceID(i)
	return ouo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillableSourceID(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetSourceID(*i)
	}
	return ouo
}

// ClearSourceID clears the value of the "source_id" field.
func (ouo *OccurrenceUpdateOne) ClearSourceID() *OccurrenceUpdateOne {
	ouo.mutation.ClearSourceID()
	return ouo
}

// SetPackageID sets the "package_id" field.
func (ouo *OccurrenceUpdateOne) SetPackageID(i int) *OccurrenceUpdateOne {
	ouo.mutation.SetPackageID(i)
	return ouo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (ouo *OccurrenceUpdateOne) SetNillablePackageID(i *int) *OccurrenceUpdateOne {
	if i != nil {
		ouo.SetPackageID(*i)
	}
	return ouo
}

// ClearPackageID clears the value of the "package_id" field.
func (ouo *OccurrenceUpdateOne) ClearPackageID() *OccurrenceUpdateOne {
	ouo.mutation.ClearPackageID()
	return ouo
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (ouo *OccurrenceUpdateOne) SetArtifact(a *Artifact) *OccurrenceUpdateOne {
	return ouo.SetArtifactID(a.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (ouo *OccurrenceUpdateOne) SetPackage(p *PackageVersion) *OccurrenceUpdateOne {
	return ouo.SetPackageID(p.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (ouo *OccurrenceUpdateOne) SetSource(s *SourceName) *OccurrenceUpdateOne {
	return ouo.SetSourceID(s.ID)
}

// Mutation returns the OccurrenceMutation object of the builder.
func (ouo *OccurrenceUpdateOne) Mutation() *OccurrenceMutation {
	return ouo.mutation
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (ouo *OccurrenceUpdateOne) ClearArtifact() *OccurrenceUpdateOne {
	ouo.mutation.ClearArtifact()
	return ouo
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (ouo *OccurrenceUpdateOne) ClearPackage() *OccurrenceUpdateOne {
	ouo.mutation.ClearPackage()
	return ouo
}

// ClearSource clears the "source" edge to the SourceName entity.
func (ouo *OccurrenceUpdateOne) ClearSource() *OccurrenceUpdateOne {
	ouo.mutation.ClearSource()
	return ouo
}

// Where appends a list predicates to the OccurrenceUpdate builder.
func (ouo *OccurrenceUpdateOne) Where(ps ...predicate.Occurrence) *OccurrenceUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OccurrenceUpdateOne) Select(field string, fields ...string) *OccurrenceUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Occurrence entity.
func (ouo *OccurrenceUpdateOne) Save(ctx context.Context) (*Occurrence, error) {
	return withHooks(ctx, ouo.gremlinSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OccurrenceUpdateOne) SaveX(ctx context.Context) *Occurrence {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OccurrenceUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OccurrenceUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OccurrenceUpdateOne) check() error {
	if _, ok := ouo.mutation.ArtifactID(); ouo.mutation.ArtifactCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Occurrence.artifact"`)
	}
	return nil
}

func (ouo *OccurrenceUpdateOne) gremlinSave(ctx context.Context) (*Occurrence, error) {
	if err := ouo.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Occurrence.id" for update`)}
	}
	query, bindings := ouo.gremlin(id).Query()
	if err := ouo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	ouo.mutation.done = true
	o := &Occurrence{config: ouo.config}
	if err := o.FromResponse(res); err != nil {
		return nil, err
	}
	return o, nil
}

func (ouo *OccurrenceUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := ouo.mutation.Justification(); ok {
		v.Property(dsl.Single, occurrence.FieldJustification, value)
	}
	if value, ok := ouo.mutation.Origin(); ok {
		v.Property(dsl.Single, occurrence.FieldOrigin, value)
	}
	if value, ok := ouo.mutation.Collector(); ok {
		v.Property(dsl.Single, occurrence.FieldCollector, value)
	}
	var properties []any
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if ouo.mutation.ArtifactCleared() {
		tr := rv.Clone().OutE(occurrence.ArtifactLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ouo.mutation.ArtifactIDs() {
		v.AddE(occurrence.ArtifactLabel).To(g.V(id)).OutV()
	}
	if ouo.mutation.PackageCleared() {
		tr := rv.Clone().OutE(occurrence.PackageLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ouo.mutation.PackageIDs() {
		v.AddE(occurrence.PackageLabel).To(g.V(id)).OutV()
	}
	if ouo.mutation.SourceCleared() {
		tr := rv.Clone().OutE(occurrence.SourceLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ouo.mutation.SourceIDs() {
		v.AddE(occurrence.SourceLabel).To(g.V(id)).OutV()
	}
	if len(ouo.fields) > 0 {
		fields := make([]any, 0, len(ouo.fields)+1)
		fields = append(fields, true)
		for _, f := range ouo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
