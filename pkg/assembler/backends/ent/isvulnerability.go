// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/securityadvisory"
)

// IsVulnerability is the model entity for the IsVulnerability schema.
type IsVulnerability struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OsvID holds the value of the "osv_id" field.
	OsvID int `json:"osv_id,omitempty"`
	// VulnerabilityID holds the value of the "vulnerability_id" field.
	VulnerabilityID int `json:"vulnerability_id,omitempty"`
	// Justification holds the value of the "justification" field.
	Justification string `json:"justification,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IsVulnerabilityQuery when eager-loading is set.
	Edges IsVulnerabilityEdges `json:"edges"`
}

// IsVulnerabilityEdges holds the relations/edges for other nodes in the graph.
type IsVulnerabilityEdges struct {
	// Osv holds the value of the osv edge.
	Osv *SecurityAdvisory `json:"osv,omitempty"`
	// Vulnerability holds the value of the vulnerability edge.
	Vulnerability *SecurityAdvisory `json:"vulnerability,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OsvOrErr returns the Osv value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IsVulnerabilityEdges) OsvOrErr() (*SecurityAdvisory, error) {
	if e.loadedTypes[0] {
		if e.Osv == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: securityadvisory.Label}
		}
		return e.Osv, nil
	}
	return nil, &NotLoadedError{edge: "osv"}
}

// VulnerabilityOrErr returns the Vulnerability value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IsVulnerabilityEdges) VulnerabilityOrErr() (*SecurityAdvisory, error) {
	if e.loadedTypes[1] {
		if e.Vulnerability == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: securityadvisory.Label}
		}
		return e.Vulnerability, nil
	}
	return nil, &NotLoadedError{edge: "vulnerability"}
}

// FromResponse scans the gremlin response data into IsVulnerability.
func (iv *IsVulnerability) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scaniv struct {
		ID              int    `json:"id,omitempty"`
		OsvID           int    `json:"osv_id,omitempty"`
		VulnerabilityID int    `json:"vulnerability_id,omitempty"`
		Justification   string `json:"justification,omitempty"`
		Origin          string `json:"origin,omitempty"`
		Collector       string `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scaniv); err != nil {
		return err
	}
	iv.ID = scaniv.ID
	iv.OsvID = scaniv.OsvID
	iv.VulnerabilityID = scaniv.VulnerabilityID
	iv.Justification = scaniv.Justification
	iv.Origin = scaniv.Origin
	iv.Collector = scaniv.Collector
	return nil
}

// QueryOsv queries the "osv" edge of the IsVulnerability entity.
func (iv *IsVulnerability) QueryOsv() *SecurityAdvisoryQuery {
	return NewIsVulnerabilityClient(iv.config).QueryOsv(iv)
}

// QueryVulnerability queries the "vulnerability" edge of the IsVulnerability entity.
func (iv *IsVulnerability) QueryVulnerability() *SecurityAdvisoryQuery {
	return NewIsVulnerabilityClient(iv.config).QueryVulnerability(iv)
}

// Update returns a builder for updating this IsVulnerability.
// Note that you need to call IsVulnerability.Unwrap() before calling this method if this IsVulnerability
// was returned from a transaction, and the transaction was committed or rolled back.
func (iv *IsVulnerability) Update() *IsVulnerabilityUpdateOne {
	return NewIsVulnerabilityClient(iv.config).UpdateOne(iv)
}

// Unwrap unwraps the IsVulnerability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iv *IsVulnerability) Unwrap() *IsVulnerability {
	_tx, ok := iv.config.driver.(*txDriver)
	if !ok {
		panic("ent: IsVulnerability is not a transactional entity")
	}
	iv.config.driver = _tx.drv
	return iv
}

// String implements the fmt.Stringer.
func (iv *IsVulnerability) String() string {
	var builder strings.Builder
	builder.WriteString("IsVulnerability(")
	builder.WriteString(fmt.Sprintf("id=%v, ", iv.ID))
	builder.WriteString("osv_id=")
	builder.WriteString(fmt.Sprintf("%v", iv.OsvID))
	builder.WriteString(", ")
	builder.WriteString("vulnerability_id=")
	builder.WriteString(fmt.Sprintf("%v", iv.VulnerabilityID))
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(iv.Justification)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(iv.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(iv.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// IsVulnerabilities is a parsable slice of IsVulnerability.
type IsVulnerabilities []*IsVulnerability

// FromResponse scans the gremlin response data into IsVulnerabilities.
func (iv *IsVulnerabilities) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scaniv []struct {
		ID              int    `json:"id,omitempty"`
		OsvID           int    `json:"osv_id,omitempty"`
		VulnerabilityID int    `json:"vulnerability_id,omitempty"`
		Justification   string `json:"justification,omitempty"`
		Origin          string `json:"origin,omitempty"`
		Collector       string `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scaniv); err != nil {
		return err
	}
	for _, v := range scaniv {
		node := &IsVulnerability{ID: v.ID}
		node.OsvID = v.OsvID
		node.VulnerabilityID = v.VulnerabilityID
		node.Justification = v.Justification
		node.Origin = v.Origin
		node.Collector = v.Collector
		*iv = append(*iv, node)
	}
	return nil
}
