// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// BillOfMaterialsUpdate is the builder for updating BillOfMaterials entities.
type BillOfMaterialsUpdate struct {
	config
	hooks    []Hook
	mutation *BillOfMaterialsMutation
}

// Where appends a list predicates to the BillOfMaterialsUpdate builder.
func (bomu *BillOfMaterialsUpdate) Where(ps ...predicate.BillOfMaterials) *BillOfMaterialsUpdate {
	bomu.mutation.Where(ps...)
	return bomu
}

// SetPackageID sets the "package_id" field.
func (bomu *BillOfMaterialsUpdate) SetPackageID(i int) *BillOfMaterialsUpdate {
	bomu.mutation.SetPackageID(i)
	return bomu
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillablePackageID(i *int) *BillOfMaterialsUpdate {
	if i != nil {
		bomu.SetPackageID(*i)
	}
	return bomu
}

// ClearPackageID clears the value of the "package_id" field.
func (bomu *BillOfMaterialsUpdate) ClearPackageID() *BillOfMaterialsUpdate {
	bomu.mutation.ClearPackageID()
	return bomu
}

// SetArtifactID sets the "artifact_id" field.
func (bomu *BillOfMaterialsUpdate) SetArtifactID(i int) *BillOfMaterialsUpdate {
	bomu.mutation.SetArtifactID(i)
	return bomu
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (bomu *BillOfMaterialsUpdate) SetNillableArtifactID(i *int) *BillOfMaterialsUpdate {
	if i != nil {
		bomu.SetArtifactID(*i)
	}
	return bomu
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (bomu *BillOfMaterialsUpdate) ClearArtifactID() *BillOfMaterialsUpdate {
	bomu.mutation.ClearArtifactID()
	return bomu
}

// SetURI sets the "uri" field.
func (bomu *BillOfMaterialsUpdate) SetURI(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetURI(s)
	return bomu
}

// SetAlgorithm sets the "algorithm" field.
func (bomu *BillOfMaterialsUpdate) SetAlgorithm(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetAlgorithm(s)
	return bomu
}

// SetDigest sets the "digest" field.
func (bomu *BillOfMaterialsUpdate) SetDigest(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetDigest(s)
	return bomu
}

// SetDownloadLocation sets the "download_location" field.
func (bomu *BillOfMaterialsUpdate) SetDownloadLocation(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetDownloadLocation(s)
	return bomu
}

// SetOrigin sets the "origin" field.
func (bomu *BillOfMaterialsUpdate) SetOrigin(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetOrigin(s)
	return bomu
}

// SetCollector sets the "collector" field.
func (bomu *BillOfMaterialsUpdate) SetCollector(s string) *BillOfMaterialsUpdate {
	bomu.mutation.SetCollector(s)
	return bomu
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (bomu *BillOfMaterialsUpdate) SetPackage(p *PackageVersion) *BillOfMaterialsUpdate {
	return bomu.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (bomu *BillOfMaterialsUpdate) SetArtifact(a *Artifact) *BillOfMaterialsUpdate {
	return bomu.SetArtifactID(a.ID)
}

// Mutation returns the BillOfMaterialsMutation object of the builder.
func (bomu *BillOfMaterialsUpdate) Mutation() *BillOfMaterialsMutation {
	return bomu.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (bomu *BillOfMaterialsUpdate) ClearPackage() *BillOfMaterialsUpdate {
	bomu.mutation.ClearPackage()
	return bomu
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (bomu *BillOfMaterialsUpdate) ClearArtifact() *BillOfMaterialsUpdate {
	bomu.mutation.ClearArtifact()
	return bomu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bomu *BillOfMaterialsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bomu.gremlinSave, bomu.mutation, bomu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bomu *BillOfMaterialsUpdate) SaveX(ctx context.Context) int {
	affected, err := bomu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bomu *BillOfMaterialsUpdate) Exec(ctx context.Context) error {
	_, err := bomu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bomu *BillOfMaterialsUpdate) ExecX(ctx context.Context) {
	if err := bomu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bomu *BillOfMaterialsUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := bomu.gremlin().Query()
	if err := bomu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	bomu.mutation.done = true
	return res.ReadInt()
}

func (bomu *BillOfMaterialsUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(billofmaterials.Label)
	for _, p := range bomu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := bomu.mutation.URI(); ok {
		v.Property(dsl.Single, billofmaterials.FieldURI, value)
	}
	if value, ok := bomu.mutation.Algorithm(); ok {
		v.Property(dsl.Single, billofmaterials.FieldAlgorithm, value)
	}
	if value, ok := bomu.mutation.Digest(); ok {
		v.Property(dsl.Single, billofmaterials.FieldDigest, value)
	}
	if value, ok := bomu.mutation.DownloadLocation(); ok {
		v.Property(dsl.Single, billofmaterials.FieldDownloadLocation, value)
	}
	if value, ok := bomu.mutation.Origin(); ok {
		v.Property(dsl.Single, billofmaterials.FieldOrigin, value)
	}
	if value, ok := bomu.mutation.Collector(); ok {
		v.Property(dsl.Single, billofmaterials.FieldCollector, value)
	}
	var properties []any
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if bomu.mutation.PackageCleared() {
		tr := rv.Clone().OutE(billofmaterials.PackageLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range bomu.mutation.PackageIDs() {
		v.AddE(billofmaterials.PackageLabel).To(g.V(id)).OutV()
	}
	if bomu.mutation.ArtifactCleared() {
		tr := rv.Clone().OutE(billofmaterials.ArtifactLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range bomu.mutation.ArtifactIDs() {
		v.AddE(billofmaterials.ArtifactLabel).To(g.V(id)).OutV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// BillOfMaterialsUpdateOne is the builder for updating a single BillOfMaterials entity.
type BillOfMaterialsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillOfMaterialsMutation
}

// SetPackageID sets the "package_id" field.
func (bomuo *BillOfMaterialsUpdateOne) SetPackageID(i int) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetPackageID(i)
	return bomuo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillablePackageID(i *int) *BillOfMaterialsUpdateOne {
	if i != nil {
		bomuo.SetPackageID(*i)
	}
	return bomuo
}

// ClearPackageID clears the value of the "package_id" field.
func (bomuo *BillOfMaterialsUpdateOne) ClearPackageID() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearPackageID()
	return bomuo
}

// SetArtifactID sets the "artifact_id" field.
func (bomuo *BillOfMaterialsUpdateOne) SetArtifactID(i int) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetArtifactID(i)
	return bomuo
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (bomuo *BillOfMaterialsUpdateOne) SetNillableArtifactID(i *int) *BillOfMaterialsUpdateOne {
	if i != nil {
		bomuo.SetArtifactID(*i)
	}
	return bomuo
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (bomuo *BillOfMaterialsUpdateOne) ClearArtifactID() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearArtifactID()
	return bomuo
}

// SetURI sets the "uri" field.
func (bomuo *BillOfMaterialsUpdateOne) SetURI(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetURI(s)
	return bomuo
}

// SetAlgorithm sets the "algorithm" field.
func (bomuo *BillOfMaterialsUpdateOne) SetAlgorithm(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetAlgorithm(s)
	return bomuo
}

// SetDigest sets the "digest" field.
func (bomuo *BillOfMaterialsUpdateOne) SetDigest(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetDigest(s)
	return bomuo
}

// SetDownloadLocation sets the "download_location" field.
func (bomuo *BillOfMaterialsUpdateOne) SetDownloadLocation(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetDownloadLocation(s)
	return bomuo
}

// SetOrigin sets the "origin" field.
func (bomuo *BillOfMaterialsUpdateOne) SetOrigin(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetOrigin(s)
	return bomuo
}

// SetCollector sets the "collector" field.
func (bomuo *BillOfMaterialsUpdateOne) SetCollector(s string) *BillOfMaterialsUpdateOne {
	bomuo.mutation.SetCollector(s)
	return bomuo
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (bomuo *BillOfMaterialsUpdateOne) SetPackage(p *PackageVersion) *BillOfMaterialsUpdateOne {
	return bomuo.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (bomuo *BillOfMaterialsUpdateOne) SetArtifact(a *Artifact) *BillOfMaterialsUpdateOne {
	return bomuo.SetArtifactID(a.ID)
}

// Mutation returns the BillOfMaterialsMutation object of the builder.
func (bomuo *BillOfMaterialsUpdateOne) Mutation() *BillOfMaterialsMutation {
	return bomuo.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (bomuo *BillOfMaterialsUpdateOne) ClearPackage() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearPackage()
	return bomuo
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (bomuo *BillOfMaterialsUpdateOne) ClearArtifact() *BillOfMaterialsUpdateOne {
	bomuo.mutation.ClearArtifact()
	return bomuo
}

// Where appends a list predicates to the BillOfMaterialsUpdate builder.
func (bomuo *BillOfMaterialsUpdateOne) Where(ps ...predicate.BillOfMaterials) *BillOfMaterialsUpdateOne {
	bomuo.mutation.Where(ps...)
	return bomuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bomuo *BillOfMaterialsUpdateOne) Select(field string, fields ...string) *BillOfMaterialsUpdateOne {
	bomuo.fields = append([]string{field}, fields...)
	return bomuo
}

// Save executes the query and returns the updated BillOfMaterials entity.
func (bomuo *BillOfMaterialsUpdateOne) Save(ctx context.Context) (*BillOfMaterials, error) {
	return withHooks(ctx, bomuo.gremlinSave, bomuo.mutation, bomuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bomuo *BillOfMaterialsUpdateOne) SaveX(ctx context.Context) *BillOfMaterials {
	node, err := bomuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bomuo *BillOfMaterialsUpdateOne) Exec(ctx context.Context) error {
	_, err := bomuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bomuo *BillOfMaterialsUpdateOne) ExecX(ctx context.Context) {
	if err := bomuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bomuo *BillOfMaterialsUpdateOne) gremlinSave(ctx context.Context) (*BillOfMaterials, error) {
	res := &gremlin.Response{}
	id, ok := bomuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BillOfMaterials.id" for update`)}
	}
	query, bindings := bomuo.gremlin(id).Query()
	if err := bomuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	bomuo.mutation.done = true
	bom := &BillOfMaterials{config: bomuo.config}
	if err := bom.FromResponse(res); err != nil {
		return nil, err
	}
	return bom, nil
}

func (bomuo *BillOfMaterialsUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := bomuo.mutation.URI(); ok {
		v.Property(dsl.Single, billofmaterials.FieldURI, value)
	}
	if value, ok := bomuo.mutation.Algorithm(); ok {
		v.Property(dsl.Single, billofmaterials.FieldAlgorithm, value)
	}
	if value, ok := bomuo.mutation.Digest(); ok {
		v.Property(dsl.Single, billofmaterials.FieldDigest, value)
	}
	if value, ok := bomuo.mutation.DownloadLocation(); ok {
		v.Property(dsl.Single, billofmaterials.FieldDownloadLocation, value)
	}
	if value, ok := bomuo.mutation.Origin(); ok {
		v.Property(dsl.Single, billofmaterials.FieldOrigin, value)
	}
	if value, ok := bomuo.mutation.Collector(); ok {
		v.Property(dsl.Single, billofmaterials.FieldCollector, value)
	}
	var properties []any
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if bomuo.mutation.PackageCleared() {
		tr := rv.Clone().OutE(billofmaterials.PackageLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range bomuo.mutation.PackageIDs() {
		v.AddE(billofmaterials.PackageLabel).To(g.V(id)).OutV()
	}
	if bomuo.mutation.ArtifactCleared() {
		tr := rv.Clone().OutE(billofmaterials.ArtifactLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range bomuo.mutation.ArtifactIDs() {
		v.AddE(billofmaterials.ArtifactLabel).To(g.V(id)).OutV()
	}
	if len(bomuo.fields) > 0 {
		fields := make([]any, 0, len(bomuo.fields)+1)
		fields = append(fields, true)
		for _, f := range bomuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
