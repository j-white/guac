// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// SourceNameQuery is the builder for querying SourceName entities.
type SourceNameQuery struct {
	config
	ctx             *QueryContext
	order           []sourcename.OrderOption
	inters          []Interceptor
	predicates      []predicate.SourceName
	withNamespace   *SourceNamespaceQuery
	withOccurrences *OccurrenceQuery
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Where adds a new predicate for the SourceNameQuery builder.
func (snq *SourceNameQuery) Where(ps ...predicate.SourceName) *SourceNameQuery {
	snq.predicates = append(snq.predicates, ps...)
	return snq
}

// Limit the number of records to be returned by this query.
func (snq *SourceNameQuery) Limit(limit int) *SourceNameQuery {
	snq.ctx.Limit = &limit
	return snq
}

// Offset to start from.
func (snq *SourceNameQuery) Offset(offset int) *SourceNameQuery {
	snq.ctx.Offset = &offset
	return snq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (snq *SourceNameQuery) Unique(unique bool) *SourceNameQuery {
	snq.ctx.Unique = &unique
	return snq
}

// Order specifies how the records should be ordered.
func (snq *SourceNameQuery) Order(o ...sourcename.OrderOption) *SourceNameQuery {
	snq.order = append(snq.order, o...)
	return snq
}

// QueryNamespace chains the current query on the "namespace" edge.
func (snq *SourceNameQuery) QueryNamespace() *SourceNamespaceQuery {
	query := (&SourceNamespaceClient{config: snq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := snq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := snq.gremlinQuery(ctx)
		fromU = gremlin.OutE(sourcename.NamespaceLabel).InV()
		return fromU, nil
	}
	return query
}

// QueryOccurrences chains the current query on the "occurrences" edge.
func (snq *SourceNameQuery) QueryOccurrences() *OccurrenceQuery {
	query := (&OccurrenceClient{config: snq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := snq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := snq.gremlinQuery(ctx)
		fromU = gremlin.InE(occurrence.SourceLabel).OutV()
		return fromU, nil
	}
	return query
}

// First returns the first SourceName entity from the query.
// Returns a *NotFoundError when no SourceName was found.
func (snq *SourceNameQuery) First(ctx context.Context) (*SourceName, error) {
	nodes, err := snq.Limit(1).All(setContextOp(ctx, snq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sourcename.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (snq *SourceNameQuery) FirstX(ctx context.Context) *SourceName {
	node, err := snq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SourceName ID from the query.
// Returns a *NotFoundError when no SourceName ID was found.
func (snq *SourceNameQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = snq.Limit(1).IDs(setContextOp(ctx, snq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sourcename.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (snq *SourceNameQuery) FirstIDX(ctx context.Context) int {
	id, err := snq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SourceName entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SourceName entity is found.
// Returns a *NotFoundError when no SourceName entities are found.
func (snq *SourceNameQuery) Only(ctx context.Context) (*SourceName, error) {
	nodes, err := snq.Limit(2).All(setContextOp(ctx, snq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sourcename.Label}
	default:
		return nil, &NotSingularError{sourcename.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (snq *SourceNameQuery) OnlyX(ctx context.Context) *SourceName {
	node, err := snq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SourceName ID in the query.
// Returns a *NotSingularError when more than one SourceName ID is found.
// Returns a *NotFoundError when no entities are found.
func (snq *SourceNameQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = snq.Limit(2).IDs(setContextOp(ctx, snq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sourcename.Label}
	default:
		err = &NotSingularError{sourcename.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (snq *SourceNameQuery) OnlyIDX(ctx context.Context) int {
	id, err := snq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SourceNames.
func (snq *SourceNameQuery) All(ctx context.Context) ([]*SourceName, error) {
	ctx = setContextOp(ctx, snq.ctx, "All")
	if err := snq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SourceName, *SourceNameQuery]()
	return withInterceptors[[]*SourceName](ctx, snq, qr, snq.inters)
}

// AllX is like All, but panics if an error occurs.
func (snq *SourceNameQuery) AllX(ctx context.Context) []*SourceName {
	nodes, err := snq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SourceName IDs.
func (snq *SourceNameQuery) IDs(ctx context.Context) (ids []int, err error) {
	if snq.ctx.Unique == nil && snq.path != nil {
		snq.Unique(true)
	}
	ctx = setContextOp(ctx, snq.ctx, "IDs")
	if err = snq.Select(sourcename.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (snq *SourceNameQuery) IDsX(ctx context.Context) []int {
	ids, err := snq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (snq *SourceNameQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, snq.ctx, "Count")
	if err := snq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, snq, querierCount[*SourceNameQuery](), snq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (snq *SourceNameQuery) CountX(ctx context.Context) int {
	count, err := snq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (snq *SourceNameQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, snq.ctx, "Exist")
	switch _, err := snq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (snq *SourceNameQuery) ExistX(ctx context.Context) bool {
	exist, err := snq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SourceNameQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (snq *SourceNameQuery) Clone() *SourceNameQuery {
	if snq == nil {
		return nil
	}
	return &SourceNameQuery{
		config:          snq.config,
		ctx:             snq.ctx.Clone(),
		order:           append([]sourcename.OrderOption{}, snq.order...),
		inters:          append([]Interceptor{}, snq.inters...),
		predicates:      append([]predicate.SourceName{}, snq.predicates...),
		withNamespace:   snq.withNamespace.Clone(),
		withOccurrences: snq.withOccurrences.Clone(),
		// clone intermediate query.
		gremlin: snq.gremlin.Clone(),
		path:    snq.path,
	}
}

// WithNamespace tells the query-builder to eager-load the nodes that are connected to
// the "namespace" edge. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithNamespace(opts ...func(*SourceNamespaceQuery)) *SourceNameQuery {
	query := (&SourceNamespaceClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	snq.withNamespace = query
	return snq
}

// WithOccurrences tells the query-builder to eager-load the nodes that are connected to
// the "occurrences" edge. The optional arguments are used to configure the query builder of the edge.
func (snq *SourceNameQuery) WithOccurrences(opts ...func(*OccurrenceQuery)) *SourceNameQuery {
	query := (&OccurrenceClient{config: snq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	snq.withOccurrences = query
	return snq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SourceName.Query().
//		GroupBy(sourcename.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (snq *SourceNameQuery) GroupBy(field string, fields ...string) *SourceNameGroupBy {
	snq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SourceNameGroupBy{build: snq}
	grbuild.flds = &snq.ctx.Fields
	grbuild.label = sourcename.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.SourceName.Query().
//		Select(sourcename.FieldName).
//		Scan(ctx, &v)
func (snq *SourceNameQuery) Select(fields ...string) *SourceNameSelect {
	snq.ctx.Fields = append(snq.ctx.Fields, fields...)
	sbuild := &SourceNameSelect{SourceNameQuery: snq}
	sbuild.label = sourcename.Label
	sbuild.flds, sbuild.scan = &snq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SourceNameSelect configured with the given aggregations.
func (snq *SourceNameQuery) Aggregate(fns ...AggregateFunc) *SourceNameSelect {
	return snq.Select().Aggregate(fns...)
}

func (snq *SourceNameQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range snq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, snq); err != nil {
				return err
			}
		}
	}
	if snq.path != nil {
		prev, err := snq.path(ctx)
		if err != nil {
			return err
		}
		snq.gremlin = prev
	}
	return nil
}

func (snq *SourceNameQuery) gremlinAll(ctx context.Context, hooks ...queryHook) ([]*SourceName, error) {
	res := &gremlin.Response{}
	traversal := snq.gremlinQuery(ctx)
	if len(snq.ctx.Fields) > 0 {
		fields := make([]any, len(snq.ctx.Fields))
		for i, f := range snq.ctx.Fields {
			fields[i] = f
		}
		traversal.ValueMap(fields...)
	} else {
		traversal.ValueMap(true)
	}
	query, bindings := traversal.Query()
	if err := snq.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	var sns SourceNames
	if err := sns.FromResponse(res); err != nil {
		return nil, err
	}
	for i := range sns {
		sns[i].config = snq.config
	}
	return sns, nil
}

func (snq *SourceNameQuery) gremlinCount(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := snq.gremlinQuery(ctx).Count().Query()
	if err := snq.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (snq *SourceNameQuery) gremlinQuery(context.Context) *dsl.Traversal {
	v := g.V().HasLabel(sourcename.Label)
	if snq.gremlin != nil {
		v = snq.gremlin.Clone()
	}
	for _, p := range snq.predicates {
		p(v)
	}
	if len(snq.order) > 0 {
		v.Order()
		for _, p := range snq.order {
			p(v)
		}
	}
	switch limit, offset := snq.ctx.Limit, snq.ctx.Offset; {
	case limit != nil && offset != nil:
		v.Range(*offset, *offset+*limit)
	case offset != nil:
		v.Range(*offset, math.MaxInt32)
	case limit != nil:
		v.Limit(*limit)
	}
	if unique := snq.ctx.Unique; unique == nil || *unique {
		v.Dedup()
	}
	return v
}

// SourceNameGroupBy is the group-by builder for SourceName entities.
type SourceNameGroupBy struct {
	selector
	build *SourceNameQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sngb *SourceNameGroupBy) Aggregate(fns ...AggregateFunc) *SourceNameGroupBy {
	sngb.fns = append(sngb.fns, fns...)
	return sngb
}

// Scan applies the selector query and scans the result into the given value.
func (sngb *SourceNameGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sngb.build.ctx, "GroupBy")
	if err := sngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SourceNameQuery, *SourceNameGroupBy](ctx, sngb.build, sngb, sngb.build.inters, v)
}

func (sngb *SourceNameGroupBy) gremlinScan(ctx context.Context, root *SourceNameQuery, v any) error {
	var (
		trs   []any
		names []any
	)
	for _, fn := range sngb.fns {
		name, tr := fn("p", "")
		trs = append(trs, tr)
		names = append(names, name)
	}
	for _, f := range *sngb.flds {
		names = append(names, f)
		trs = append(trs, __.As("p").Unfold().Values(f).As(f))
	}
	query, bindings := root.gremlinQuery(ctx).Group().
		By(__.Values(*sngb.flds...).Fold()).
		By(__.Fold().Match(trs...).Select(names...)).
		Select(dsl.Values).
		Next().
		Query()
	res := &gremlin.Response{}
	if err := sngb.build.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(*sngb.flds)+len(sngb.fns) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

// SourceNameSelect is the builder for selecting fields of SourceName entities.
type SourceNameSelect struct {
	*SourceNameQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sns *SourceNameSelect) Aggregate(fns ...AggregateFunc) *SourceNameSelect {
	sns.fns = append(sns.fns, fns...)
	return sns
}

// Scan applies the selector query and scans the result into the given value.
func (sns *SourceNameSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sns.ctx, "Select")
	if err := sns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SourceNameQuery, *SourceNameSelect](ctx, sns.SourceNameQuery, sns, sns.inters, v)
}

func (sns *SourceNameSelect) gremlinScan(ctx context.Context, root *SourceNameQuery, v any) error {
	var (
		res       = &gremlin.Response{}
		traversal = root.gremlinQuery(ctx)
	)
	if fields := sns.ctx.Fields; len(fields) == 1 {
		if fields[0] != sourcename.FieldID {
			traversal = traversal.Values(fields...)
		} else {
			traversal = traversal.ID()
		}
	} else {
		fields := make([]any, len(sns.ctx.Fields))
		for i, f := range sns.ctx.Fields {
			fields[i] = f
		}
		traversal = traversal.ValueMap(fields...)
	}
	query, bindings := traversal.Query()
	if err := sns.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(root.ctx.Fields) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}
