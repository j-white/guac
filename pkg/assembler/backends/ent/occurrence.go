// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// Occurrence is the model entity for the Occurrence schema.
type Occurrence struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// The artifact in the relationship
	ArtifactID int `json:"artifact_id,omitempty"`
	// Justification for the attested relationship
	Justification string `json:"justification,omitempty"`
	// Document from which this attestation is generated from
	Origin string `json:"origin,omitempty"`
	// GUAC collector for the document
	Collector string `json:"collector,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID *int `json:"source_id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID *int `json:"package_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OccurrenceQuery when eager-loading is set.
	Edges OccurrenceEdges `json:"edges"`
}

// OccurrenceEdges holds the relations/edges for other nodes in the graph.
type OccurrenceEdges struct {
	// Artifact holds the value of the artifact edge.
	Artifact *Artifact `json:"artifact,omitempty"`
	// Package holds the value of the package edge.
	Package *PackageVersion `json:"package,omitempty"`
	// Source holds the value of the source edge.
	Source *SourceName `json:"source,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ArtifactOrErr returns the Artifact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OccurrenceEdges) ArtifactOrErr() (*Artifact, error) {
	if e.loadedTypes[0] {
		if e.Artifact == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: artifact.Label}
		}
		return e.Artifact, nil
	}
	return nil, &NotLoadedError{edge: "artifact"}
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OccurrenceEdges) PackageOrErr() (*PackageVersion, error) {
	if e.loadedTypes[1] {
		if e.Package == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.Package, nil
	}
	return nil, &NotLoadedError{edge: "package"}
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OccurrenceEdges) SourceOrErr() (*SourceName, error) {
	if e.loadedTypes[2] {
		if e.Source == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sourcename.Label}
		}
		return e.Source, nil
	}
	return nil, &NotLoadedError{edge: "source"}
}

// FromResponse scans the gremlin response data into Occurrence.
func (o *Occurrence) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scano struct {
		ID            int    `json:"id,omitempty"`
		ArtifactID    int    `json:"artifact_id,omitempty"`
		Justification string `json:"justification,omitempty"`
		Origin        string `json:"origin,omitempty"`
		Collector     string `json:"collector,omitempty"`
		SourceID      *int   `json:"source_id,omitempty"`
		PackageID     *int   `json:"package_id,omitempty"`
	}
	if err := vmap.Decode(&scano); err != nil {
		return err
	}
	o.ID = scano.ID
	o.ArtifactID = scano.ArtifactID
	o.Justification = scano.Justification
	o.Origin = scano.Origin
	o.Collector = scano.Collector
	o.SourceID = scano.SourceID
	o.PackageID = scano.PackageID
	return nil
}

// QueryArtifact queries the "artifact" edge of the Occurrence entity.
func (o *Occurrence) QueryArtifact() *ArtifactQuery {
	return NewOccurrenceClient(o.config).QueryArtifact(o)
}

// QueryPackage queries the "package" edge of the Occurrence entity.
func (o *Occurrence) QueryPackage() *PackageVersionQuery {
	return NewOccurrenceClient(o.config).QueryPackage(o)
}

// QuerySource queries the "source" edge of the Occurrence entity.
func (o *Occurrence) QuerySource() *SourceNameQuery {
	return NewOccurrenceClient(o.config).QuerySource(o)
}

// Update returns a builder for updating this Occurrence.
// Note that you need to call Occurrence.Unwrap() before calling this method if this Occurrence
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Occurrence) Update() *OccurrenceUpdateOne {
	return NewOccurrenceClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Occurrence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Occurrence) Unwrap() *Occurrence {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Occurrence is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Occurrence) String() string {
	var builder strings.Builder
	builder.WriteString("Occurrence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("artifact_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ArtifactID))
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(o.Justification)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(o.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(o.Collector)
	builder.WriteString(", ")
	if v := o.SourceID; v != nil {
		builder.WriteString("source_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.PackageID; v != nil {
		builder.WriteString("package_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Occurrences is a parsable slice of Occurrence.
type Occurrences []*Occurrence

// FromResponse scans the gremlin response data into Occurrences.
func (o *Occurrences) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scano []struct {
		ID            int    `json:"id,omitempty"`
		ArtifactID    int    `json:"artifact_id,omitempty"`
		Justification string `json:"justification,omitempty"`
		Origin        string `json:"origin,omitempty"`
		Collector     string `json:"collector,omitempty"`
		SourceID      *int   `json:"source_id,omitempty"`
		PackageID     *int   `json:"package_id,omitempty"`
	}
	if err := vmap.Decode(&scano); err != nil {
		return err
	}
	for _, v := range scano {
		node := &Occurrence{ID: v.ID}
		node.ArtifactID = v.ArtifactID
		node.Justification = v.Justification
		node.Origin = v.Origin
		node.Collector = v.Collector
		node.SourceID = v.SourceID
		node.PackageID = v.PackageID
		*o = append(*o, node)
	}
	return nil
}
