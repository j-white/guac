// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
)

// PkgEqual is the model entity for the PkgEqual schema.
type PkgEqual struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Justification holds the value of the "justification" field.
	Justification string `json:"justification,omitempty"`
	// An opaque hash of the packages that are equal
	PackagesHash string `json:"packages_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PkgEqualQuery when eager-loading is set.
	Edges PkgEqualEdges `json:"edges"`
}

// PkgEqualEdges holds the relations/edges for other nodes in the graph.
type PkgEqualEdges struct {
	// Packages holds the value of the packages edge.
	Packages []*PackageVersion `json:"packages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PackagesOrErr returns the Packages value or an error if the edge
// was not loaded in eager-loading.
func (e PkgEqualEdges) PackagesOrErr() ([]*PackageVersion, error) {
	if e.loadedTypes[0] {
		return e.Packages, nil
	}
	return nil, &NotLoadedError{edge: "packages"}
}

// FromResponse scans the gremlin response data into PkgEqual.
func (pe *PkgEqual) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanpe struct {
		ID            int    `json:"id,omitempty"`
		Origin        string `json:"origin,omitempty"`
		Collector     string `json:"collector,omitempty"`
		Justification string `json:"justification,omitempty"`
		PackagesHash  string `json:"packages_hash,omitempty"`
	}
	if err := vmap.Decode(&scanpe); err != nil {
		return err
	}
	pe.ID = scanpe.ID
	pe.Origin = scanpe.Origin
	pe.Collector = scanpe.Collector
	pe.Justification = scanpe.Justification
	pe.PackagesHash = scanpe.PackagesHash
	return nil
}

// QueryPackages queries the "packages" edge of the PkgEqual entity.
func (pe *PkgEqual) QueryPackages() *PackageVersionQuery {
	return NewPkgEqualClient(pe.config).QueryPackages(pe)
}

// Update returns a builder for updating this PkgEqual.
// Note that you need to call PkgEqual.Unwrap() before calling this method if this PkgEqual
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *PkgEqual) Update() *PkgEqualUpdateOne {
	return NewPkgEqualClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the PkgEqual entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *PkgEqual) Unwrap() *PkgEqual {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: PkgEqual is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *PkgEqual) String() string {
	var builder strings.Builder
	builder.WriteString("PkgEqual(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("origin=")
	builder.WriteString(pe.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(pe.Collector)
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(pe.Justification)
	builder.WriteString(", ")
	builder.WriteString("packages_hash=")
	builder.WriteString(pe.PackagesHash)
	builder.WriteByte(')')
	return builder.String()
}

// PkgEquals is a parsable slice of PkgEqual.
type PkgEquals []*PkgEqual

// FromResponse scans the gremlin response data into PkgEquals.
func (pe *PkgEquals) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanpe []struct {
		ID            int    `json:"id,omitempty"`
		Origin        string `json:"origin,omitempty"`
		Collector     string `json:"collector,omitempty"`
		Justification string `json:"justification,omitempty"`
		PackagesHash  string `json:"packages_hash,omitempty"`
	}
	if err := vmap.Decode(&scanpe); err != nil {
		return err
	}
	for _, v := range scanpe {
		node := &PkgEqual{ID: v.ID}
		node.Origin = v.Origin
		node.Collector = v.Collector
		node.Justification = v.Justification
		node.PackagesHash = v.PackagesHash
		*pe = append(*pe, node)
	}
	return nil
}
