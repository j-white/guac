// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagetype"
)

// PackageTypeCreate is the builder for creating a PackageType entity.
type PackageTypeCreate struct {
	config
	mutation *PackageTypeMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (ptc *PackageTypeCreate) SetType(s string) *PackageTypeCreate {
	ptc.mutation.SetType(s)
	return ptc
}

// AddNamespaceIDs adds the "namespaces" edge to the PackageNamespace entity by IDs.
func (ptc *PackageTypeCreate) AddNamespaceIDs(ids ...int) *PackageTypeCreate {
	ptc.mutation.AddNamespaceIDs(ids...)
	return ptc
}

// AddNamespaces adds the "namespaces" edges to the PackageNamespace entity.
func (ptc *PackageTypeCreate) AddNamespaces(p ...*PackageNamespace) *PackageTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddNamespaceIDs(ids...)
}

// Mutation returns the PackageTypeMutation object of the builder.
func (ptc *PackageTypeCreate) Mutation() *PackageTypeMutation {
	return ptc.mutation
}

// Save creates the PackageType in the database.
func (ptc *PackageTypeCreate) Save(ctx context.Context) (*PackageType, error) {
	return withHooks(ctx, ptc.gremlinSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PackageTypeCreate) SaveX(ctx context.Context) *PackageType {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PackageTypeCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PackageTypeCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PackageTypeCreate) check() error {
	if _, ok := ptc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PackageType.type"`)}
	}
	if v, ok := ptc.mutation.GetType(); ok {
		if err := packagetype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PackageType.type": %w`, err)}
		}
	}
	return nil
}

func (ptc *PackageTypeCreate) gremlinSave(ctx context.Context) (*PackageType, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := ptc.gremlin().Query()
	if err := ptc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &PackageType{config: ptc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	ptc.mutation.id = &rnode.ID
	ptc.mutation.done = true
	return rnode, nil
}

func (ptc *PackageTypeCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.AddV(packagetype.Label)
	if value, ok := ptc.mutation.GetType(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(packagetype.Label, packagetype.FieldType, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(packagetype.Label, packagetype.FieldType, value)),
		})
		v.Property(dsl.Single, packagetype.FieldType, value)
	}
	for _, id := range ptc.mutation.NamespacesIDs() {
		v.AddE(packagetype.NamespacesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(packagetype.NamespacesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packagetype.Label, packagetype.NamespacesLabel, id)),
		})
	}
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	tr := constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	for _, cr := range constraints[1:] {
		tr = cr.pred.Coalesce(cr.test, tr)
	}
	return tr
}

// PackageTypeCreateBulk is the builder for creating many PackageType entities in bulk.
type PackageTypeCreateBulk struct {
	config
	builders []*PackageTypeCreate
}
