// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyscorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/scorecard"
)

// CertifyScorecardCreate is the builder for creating a CertifyScorecard entity.
type CertifyScorecardCreate struct {
	config
	mutation *CertifyScorecardMutation
	hooks    []Hook
}

// SetSourceID sets the "source_id" field.
func (csc *CertifyScorecardCreate) SetSourceID(i int) *CertifyScorecardCreate {
	csc.mutation.SetSourceID(i)
	return csc
}

// SetScorecardID sets the "scorecard_id" field.
func (csc *CertifyScorecardCreate) SetScorecardID(i int) *CertifyScorecardCreate {
	csc.mutation.SetScorecardID(i)
	return csc
}

// SetScorecard sets the "scorecard" edge to the Scorecard entity.
func (csc *CertifyScorecardCreate) SetScorecard(s *Scorecard) *CertifyScorecardCreate {
	return csc.SetScorecardID(s.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (csc *CertifyScorecardCreate) SetSource(s *SourceName) *CertifyScorecardCreate {
	return csc.SetSourceID(s.ID)
}

// Mutation returns the CertifyScorecardMutation object of the builder.
func (csc *CertifyScorecardCreate) Mutation() *CertifyScorecardMutation {
	return csc.mutation
}

// Save creates the CertifyScorecard in the database.
func (csc *CertifyScorecardCreate) Save(ctx context.Context) (*CertifyScorecard, error) {
	return withHooks(ctx, csc.gremlinSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CertifyScorecardCreate) SaveX(ctx context.Context) *CertifyScorecard {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CertifyScorecardCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CertifyScorecardCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CertifyScorecardCreate) check() error {
	if _, ok := csc.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source_id", err: errors.New(`ent: missing required field "CertifyScorecard.source_id"`)}
	}
	if _, ok := csc.mutation.ScorecardID(); !ok {
		return &ValidationError{Name: "scorecard_id", err: errors.New(`ent: missing required field "CertifyScorecard.scorecard_id"`)}
	}
	if _, ok := csc.mutation.ScorecardID(); !ok {
		return &ValidationError{Name: "scorecard", err: errors.New(`ent: missing required edge "CertifyScorecard.scorecard"`)}
	}
	if _, ok := csc.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required edge "CertifyScorecard.source"`)}
	}
	return nil
}

func (csc *CertifyScorecardCreate) gremlinSave(ctx context.Context) (*CertifyScorecard, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := csc.gremlin().Query()
	if err := csc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &CertifyScorecard{config: csc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	csc.mutation.id = &rnode.ID
	csc.mutation.done = true
	return rnode, nil
}

func (csc *CertifyScorecardCreate) gremlin() *dsl.Traversal {
	v := g.AddV(certifyscorecard.Label)
	for _, id := range csc.mutation.ScorecardIDs() {
		v.AddE(scorecard.CertificationsLabel).From(g.V(id)).InV()
	}
	for _, id := range csc.mutation.SourceIDs() {
		v.AddE(certifyscorecard.SourceLabel).To(g.V(id)).OutV()
	}
	return v.ValueMap(true)
}

// CertifyScorecardCreateBulk is the builder for creating many CertifyScorecard entities in bulk.
type CertifyScorecardCreateBulk struct {
	config
	builders []*CertifyScorecardCreate
}
