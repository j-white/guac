// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// HashEqualUpdate is the builder for updating HashEqual entities.
type HashEqualUpdate struct {
	config
	hooks    []Hook
	mutation *HashEqualMutation
}

// Where appends a list predicates to the HashEqualUpdate builder.
func (heu *HashEqualUpdate) Where(ps ...predicate.HashEqual) *HashEqualUpdate {
	heu.mutation.Where(ps...)
	return heu
}

// SetOrigin sets the "origin" field.
func (heu *HashEqualUpdate) SetOrigin(s string) *HashEqualUpdate {
	heu.mutation.SetOrigin(s)
	return heu
}

// SetCollector sets the "collector" field.
func (heu *HashEqualUpdate) SetCollector(s string) *HashEqualUpdate {
	heu.mutation.SetCollector(s)
	return heu
}

// SetJustification sets the "justification" field.
func (heu *HashEqualUpdate) SetJustification(s string) *HashEqualUpdate {
	heu.mutation.SetJustification(s)
	return heu
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (heu *HashEqualUpdate) AddArtifactIDs(ids ...int) *HashEqualUpdate {
	heu.mutation.AddArtifactIDs(ids...)
	return heu
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (heu *HashEqualUpdate) AddArtifacts(a ...*Artifact) *HashEqualUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return heu.AddArtifactIDs(ids...)
}

// Mutation returns the HashEqualMutation object of the builder.
func (heu *HashEqualUpdate) Mutation() *HashEqualMutation {
	return heu.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (heu *HashEqualUpdate) ClearArtifacts() *HashEqualUpdate {
	heu.mutation.ClearArtifacts()
	return heu
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (heu *HashEqualUpdate) RemoveArtifactIDs(ids ...int) *HashEqualUpdate {
	heu.mutation.RemoveArtifactIDs(ids...)
	return heu
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (heu *HashEqualUpdate) RemoveArtifacts(a ...*Artifact) *HashEqualUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return heu.RemoveArtifactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (heu *HashEqualUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, heu.gremlinSave, heu.mutation, heu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (heu *HashEqualUpdate) SaveX(ctx context.Context) int {
	affected, err := heu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (heu *HashEqualUpdate) Exec(ctx context.Context) error {
	_, err := heu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (heu *HashEqualUpdate) ExecX(ctx context.Context) {
	if err := heu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (heu *HashEqualUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := heu.gremlin().Query()
	if err := heu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	heu.mutation.done = true
	return res.ReadInt()
}

func (heu *HashEqualUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(hashequal.Label)
	for _, p := range heu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := heu.mutation.Origin(); ok {
		v.Property(dsl.Single, hashequal.FieldOrigin, value)
	}
	if value, ok := heu.mutation.Collector(); ok {
		v.Property(dsl.Single, hashequal.FieldCollector, value)
	}
	if value, ok := heu.mutation.Justification(); ok {
		v.Property(dsl.Single, hashequal.FieldJustification, value)
	}
	for _, id := range heu.mutation.RemovedArtifactsIDs() {
		tr := rv.Clone().OutE(hashequal.ArtifactsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range heu.mutation.ArtifactsIDs() {
		v.AddE(hashequal.ArtifactsLabel).To(g.V(id)).OutV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// HashEqualUpdateOne is the builder for updating a single HashEqual entity.
type HashEqualUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HashEqualMutation
}

// SetOrigin sets the "origin" field.
func (heuo *HashEqualUpdateOne) SetOrigin(s string) *HashEqualUpdateOne {
	heuo.mutation.SetOrigin(s)
	return heuo
}

// SetCollector sets the "collector" field.
func (heuo *HashEqualUpdateOne) SetCollector(s string) *HashEqualUpdateOne {
	heuo.mutation.SetCollector(s)
	return heuo
}

// SetJustification sets the "justification" field.
func (heuo *HashEqualUpdateOne) SetJustification(s string) *HashEqualUpdateOne {
	heuo.mutation.SetJustification(s)
	return heuo
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (heuo *HashEqualUpdateOne) AddArtifactIDs(ids ...int) *HashEqualUpdateOne {
	heuo.mutation.AddArtifactIDs(ids...)
	return heuo
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (heuo *HashEqualUpdateOne) AddArtifacts(a ...*Artifact) *HashEqualUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return heuo.AddArtifactIDs(ids...)
}

// Mutation returns the HashEqualMutation object of the builder.
func (heuo *HashEqualUpdateOne) Mutation() *HashEqualMutation {
	return heuo.mutation
}

// ClearArtifacts clears all "artifacts" edges to the Artifact entity.
func (heuo *HashEqualUpdateOne) ClearArtifacts() *HashEqualUpdateOne {
	heuo.mutation.ClearArtifacts()
	return heuo
}

// RemoveArtifactIDs removes the "artifacts" edge to Artifact entities by IDs.
func (heuo *HashEqualUpdateOne) RemoveArtifactIDs(ids ...int) *HashEqualUpdateOne {
	heuo.mutation.RemoveArtifactIDs(ids...)
	return heuo
}

// RemoveArtifacts removes "artifacts" edges to Artifact entities.
func (heuo *HashEqualUpdateOne) RemoveArtifacts(a ...*Artifact) *HashEqualUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return heuo.RemoveArtifactIDs(ids...)
}

// Where appends a list predicates to the HashEqualUpdate builder.
func (heuo *HashEqualUpdateOne) Where(ps ...predicate.HashEqual) *HashEqualUpdateOne {
	heuo.mutation.Where(ps...)
	return heuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (heuo *HashEqualUpdateOne) Select(field string, fields ...string) *HashEqualUpdateOne {
	heuo.fields = append([]string{field}, fields...)
	return heuo
}

// Save executes the query and returns the updated HashEqual entity.
func (heuo *HashEqualUpdateOne) Save(ctx context.Context) (*HashEqual, error) {
	return withHooks(ctx, heuo.gremlinSave, heuo.mutation, heuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (heuo *HashEqualUpdateOne) SaveX(ctx context.Context) *HashEqual {
	node, err := heuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (heuo *HashEqualUpdateOne) Exec(ctx context.Context) error {
	_, err := heuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (heuo *HashEqualUpdateOne) ExecX(ctx context.Context) {
	if err := heuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (heuo *HashEqualUpdateOne) gremlinSave(ctx context.Context) (*HashEqual, error) {
	res := &gremlin.Response{}
	id, ok := heuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HashEqual.id" for update`)}
	}
	query, bindings := heuo.gremlin(id).Query()
	if err := heuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	heuo.mutation.done = true
	he := &HashEqual{config: heuo.config}
	if err := he.FromResponse(res); err != nil {
		return nil, err
	}
	return he, nil
}

func (heuo *HashEqualUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := heuo.mutation.Origin(); ok {
		v.Property(dsl.Single, hashequal.FieldOrigin, value)
	}
	if value, ok := heuo.mutation.Collector(); ok {
		v.Property(dsl.Single, hashequal.FieldCollector, value)
	}
	if value, ok := heuo.mutation.Justification(); ok {
		v.Property(dsl.Single, hashequal.FieldJustification, value)
	}
	for _, id := range heuo.mutation.RemovedArtifactsIDs() {
		tr := rv.Clone().OutE(hashequal.ArtifactsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range heuo.mutation.ArtifactsIDs() {
		v.AddE(hashequal.ArtifactsLabel).To(g.V(id)).OutV()
	}
	if len(heuo.fields) > 0 {
		fields := make([]any, 0, len(heuo.fields)+1)
		fields = append(fields, true)
		for _, f := range heuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
