// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
)

// PackageType is the model entity for the PackageType schema.
type PackageType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// This node matches a pkg:<type> partial pURL
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PackageTypeQuery when eager-loading is set.
	Edges PackageTypeEdges `json:"edges"`
}

// PackageTypeEdges holds the relations/edges for other nodes in the graph.
type PackageTypeEdges struct {
	// Namespaces holds the value of the namespaces edge.
	Namespaces []*PackageNamespace `json:"namespaces,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NamespacesOrErr returns the Namespaces value or an error if the edge
// was not loaded in eager-loading.
func (e PackageTypeEdges) NamespacesOrErr() ([]*PackageNamespace, error) {
	if e.loadedTypes[0] {
		return e.Namespaces, nil
	}
	return nil, &NotLoadedError{edge: "namespaces"}
}

// FromResponse scans the gremlin response data into PackageType.
func (pt *PackageType) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanpt struct {
		ID   int    `json:"id,omitempty"`
		Type string `json:"type,omitempty"`
	}
	if err := vmap.Decode(&scanpt); err != nil {
		return err
	}
	pt.ID = scanpt.ID
	pt.Type = scanpt.Type
	return nil
}

// QueryNamespaces queries the "namespaces" edge of the PackageType entity.
func (pt *PackageType) QueryNamespaces() *PackageNamespaceQuery {
	return NewPackageTypeClient(pt.config).QueryNamespaces(pt)
}

// Update returns a builder for updating this PackageType.
// Note that you need to call PackageType.Unwrap() before calling this method if this PackageType
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PackageType) Update() *PackageTypeUpdateOne {
	return NewPackageTypeClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PackageType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PackageType) Unwrap() *PackageType {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PackageType is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PackageType) String() string {
	var builder strings.Builder
	builder.WriteString("PackageType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("type=")
	builder.WriteString(pt.Type)
	builder.WriteByte(')')
	return builder.String()
}

// PackageTypes is a parsable slice of PackageType.
type PackageTypes []*PackageType

// FromResponse scans the gremlin response data into PackageTypes.
func (pt *PackageTypes) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanpt []struct {
		ID   int    `json:"id,omitempty"`
		Type string `json:"type,omitempty"`
	}
	if err := vmap.Decode(&scanpt); err != nil {
		return err
	}
	for _, v := range scanpt {
		node := &PackageType{ID: v.ID}
		node.Type = v.Type
		*pt = append(*pt, node)
	}
	return nil
}
