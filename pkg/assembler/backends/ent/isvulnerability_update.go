// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isvulnerability"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// IsVulnerabilityUpdate is the builder for updating IsVulnerability entities.
type IsVulnerabilityUpdate struct {
	config
	hooks    []Hook
	mutation *IsVulnerabilityMutation
}

// Where appends a list predicates to the IsVulnerabilityUpdate builder.
func (ivu *IsVulnerabilityUpdate) Where(ps ...predicate.IsVulnerability) *IsVulnerabilityUpdate {
	ivu.mutation.Where(ps...)
	return ivu
}

// SetOsvID sets the "osv_id" field.
func (ivu *IsVulnerabilityUpdate) SetOsvID(i int) *IsVulnerabilityUpdate {
	ivu.mutation.SetOsvID(i)
	return ivu
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (ivu *IsVulnerabilityUpdate) SetVulnerabilityID(i int) *IsVulnerabilityUpdate {
	ivu.mutation.SetVulnerabilityID(i)
	return ivu
}

// SetJustification sets the "justification" field.
func (ivu *IsVulnerabilityUpdate) SetJustification(s string) *IsVulnerabilityUpdate {
	ivu.mutation.SetJustification(s)
	return ivu
}

// SetOrigin sets the "origin" field.
func (ivu *IsVulnerabilityUpdate) SetOrigin(s string) *IsVulnerabilityUpdate {
	ivu.mutation.SetOrigin(s)
	return ivu
}

// SetCollector sets the "collector" field.
func (ivu *IsVulnerabilityUpdate) SetCollector(s string) *IsVulnerabilityUpdate {
	ivu.mutation.SetCollector(s)
	return ivu
}

// SetOsv sets the "osv" edge to the SecurityAdvisory entity.
func (ivu *IsVulnerabilityUpdate) SetOsv(s *SecurityAdvisory) *IsVulnerabilityUpdate {
	return ivu.SetOsvID(s.ID)
}

// SetVulnerability sets the "vulnerability" edge to the SecurityAdvisory entity.
func (ivu *IsVulnerabilityUpdate) SetVulnerability(s *SecurityAdvisory) *IsVulnerabilityUpdate {
	return ivu.SetVulnerabilityID(s.ID)
}

// Mutation returns the IsVulnerabilityMutation object of the builder.
func (ivu *IsVulnerabilityUpdate) Mutation() *IsVulnerabilityMutation {
	return ivu.mutation
}

// ClearOsv clears the "osv" edge to the SecurityAdvisory entity.
func (ivu *IsVulnerabilityUpdate) ClearOsv() *IsVulnerabilityUpdate {
	ivu.mutation.ClearOsv()
	return ivu
}

// ClearVulnerability clears the "vulnerability" edge to the SecurityAdvisory entity.
func (ivu *IsVulnerabilityUpdate) ClearVulnerability() *IsVulnerabilityUpdate {
	ivu.mutation.ClearVulnerability()
	return ivu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ivu *IsVulnerabilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ivu.gremlinSave, ivu.mutation, ivu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ivu *IsVulnerabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := ivu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ivu *IsVulnerabilityUpdate) Exec(ctx context.Context) error {
	_, err := ivu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivu *IsVulnerabilityUpdate) ExecX(ctx context.Context) {
	if err := ivu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivu *IsVulnerabilityUpdate) check() error {
	if _, ok := ivu.mutation.OsvID(); ivu.mutation.OsvCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsVulnerability.osv"`)
	}
	if _, ok := ivu.mutation.VulnerabilityID(); ivu.mutation.VulnerabilityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsVulnerability.vulnerability"`)
	}
	return nil
}

func (ivu *IsVulnerabilityUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := ivu.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := ivu.gremlin().Query()
	if err := ivu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	ivu.mutation.done = true
	return res.ReadInt()
}

func (ivu *IsVulnerabilityUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(isvulnerability.Label)
	for _, p := range ivu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := ivu.mutation.Justification(); ok {
		v.Property(dsl.Single, isvulnerability.FieldJustification, value)
	}
	if value, ok := ivu.mutation.Origin(); ok {
		v.Property(dsl.Single, isvulnerability.FieldOrigin, value)
	}
	if value, ok := ivu.mutation.Collector(); ok {
		v.Property(dsl.Single, isvulnerability.FieldCollector, value)
	}
	if ivu.mutation.OsvCleared() {
		tr := rv.Clone().OutE(isvulnerability.OsvLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ivu.mutation.OsvIDs() {
		v.AddE(isvulnerability.OsvLabel).To(g.V(id)).OutV()
	}
	if ivu.mutation.VulnerabilityCleared() {
		tr := rv.Clone().OutE(isvulnerability.VulnerabilityLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ivu.mutation.VulnerabilityIDs() {
		v.AddE(isvulnerability.VulnerabilityLabel).To(g.V(id)).OutV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// IsVulnerabilityUpdateOne is the builder for updating a single IsVulnerability entity.
type IsVulnerabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IsVulnerabilityMutation
}

// SetOsvID sets the "osv_id" field.
func (ivuo *IsVulnerabilityUpdateOne) SetOsvID(i int) *IsVulnerabilityUpdateOne {
	ivuo.mutation.SetOsvID(i)
	return ivuo
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (ivuo *IsVulnerabilityUpdateOne) SetVulnerabilityID(i int) *IsVulnerabilityUpdateOne {
	ivuo.mutation.SetVulnerabilityID(i)
	return ivuo
}

// SetJustification sets the "justification" field.
func (ivuo *IsVulnerabilityUpdateOne) SetJustification(s string) *IsVulnerabilityUpdateOne {
	ivuo.mutation.SetJustification(s)
	return ivuo
}

// SetOrigin sets the "origin" field.
func (ivuo *IsVulnerabilityUpdateOne) SetOrigin(s string) *IsVulnerabilityUpdateOne {
	ivuo.mutation.SetOrigin(s)
	return ivuo
}

// SetCollector sets the "collector" field.
func (ivuo *IsVulnerabilityUpdateOne) SetCollector(s string) *IsVulnerabilityUpdateOne {
	ivuo.mutation.SetCollector(s)
	return ivuo
}

// SetOsv sets the "osv" edge to the SecurityAdvisory entity.
func (ivuo *IsVulnerabilityUpdateOne) SetOsv(s *SecurityAdvisory) *IsVulnerabilityUpdateOne {
	return ivuo.SetOsvID(s.ID)
}

// SetVulnerability sets the "vulnerability" edge to the SecurityAdvisory entity.
func (ivuo *IsVulnerabilityUpdateOne) SetVulnerability(s *SecurityAdvisory) *IsVulnerabilityUpdateOne {
	return ivuo.SetVulnerabilityID(s.ID)
}

// Mutation returns the IsVulnerabilityMutation object of the builder.
func (ivuo *IsVulnerabilityUpdateOne) Mutation() *IsVulnerabilityMutation {
	return ivuo.mutation
}

// ClearOsv clears the "osv" edge to the SecurityAdvisory entity.
func (ivuo *IsVulnerabilityUpdateOne) ClearOsv() *IsVulnerabilityUpdateOne {
	ivuo.mutation.ClearOsv()
	return ivuo
}

// ClearVulnerability clears the "vulnerability" edge to the SecurityAdvisory entity.
func (ivuo *IsVulnerabilityUpdateOne) ClearVulnerability() *IsVulnerabilityUpdateOne {
	ivuo.mutation.ClearVulnerability()
	return ivuo
}

// Where appends a list predicates to the IsVulnerabilityUpdate builder.
func (ivuo *IsVulnerabilityUpdateOne) Where(ps ...predicate.IsVulnerability) *IsVulnerabilityUpdateOne {
	ivuo.mutation.Where(ps...)
	return ivuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ivuo *IsVulnerabilityUpdateOne) Select(field string, fields ...string) *IsVulnerabilityUpdateOne {
	ivuo.fields = append([]string{field}, fields...)
	return ivuo
}

// Save executes the query and returns the updated IsVulnerability entity.
func (ivuo *IsVulnerabilityUpdateOne) Save(ctx context.Context) (*IsVulnerability, error) {
	return withHooks(ctx, ivuo.gremlinSave, ivuo.mutation, ivuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ivuo *IsVulnerabilityUpdateOne) SaveX(ctx context.Context) *IsVulnerability {
	node, err := ivuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ivuo *IsVulnerabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := ivuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivuo *IsVulnerabilityUpdateOne) ExecX(ctx context.Context) {
	if err := ivuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivuo *IsVulnerabilityUpdateOne) check() error {
	if _, ok := ivuo.mutation.OsvID(); ivuo.mutation.OsvCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsVulnerability.osv"`)
	}
	if _, ok := ivuo.mutation.VulnerabilityID(); ivuo.mutation.VulnerabilityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IsVulnerability.vulnerability"`)
	}
	return nil
}

func (ivuo *IsVulnerabilityUpdateOne) gremlinSave(ctx context.Context) (*IsVulnerability, error) {
	if err := ivuo.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := ivuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IsVulnerability.id" for update`)}
	}
	query, bindings := ivuo.gremlin(id).Query()
	if err := ivuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	ivuo.mutation.done = true
	iv := &IsVulnerability{config: ivuo.config}
	if err := iv.FromResponse(res); err != nil {
		return nil, err
	}
	return iv, nil
}

func (ivuo *IsVulnerabilityUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := ivuo.mutation.Justification(); ok {
		v.Property(dsl.Single, isvulnerability.FieldJustification, value)
	}
	if value, ok := ivuo.mutation.Origin(); ok {
		v.Property(dsl.Single, isvulnerability.FieldOrigin, value)
	}
	if value, ok := ivuo.mutation.Collector(); ok {
		v.Property(dsl.Single, isvulnerability.FieldCollector, value)
	}
	if ivuo.mutation.OsvCleared() {
		tr := rv.Clone().OutE(isvulnerability.OsvLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ivuo.mutation.OsvIDs() {
		v.AddE(isvulnerability.OsvLabel).To(g.V(id)).OutV()
	}
	if ivuo.mutation.VulnerabilityCleared() {
		tr := rv.Clone().OutE(isvulnerability.VulnerabilityLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ivuo.mutation.VulnerabilityIDs() {
		v.AddE(isvulnerability.VulnerabilityLabel).To(g.V(id)).OutV()
	}
	if len(ivuo.fields) > 0 {
		fields := make([]any, 0, len(ivuo.fields)+1)
		fields = append(fields, true)
		for _, f := range ivuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
