// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// HashEqualDelete is the builder for deleting a HashEqual entity.
type HashEqualDelete struct {
	config
	hooks    []Hook
	mutation *HashEqualMutation
}

// Where appends a list predicates to the HashEqualDelete builder.
func (hed *HashEqualDelete) Where(ps ...predicate.HashEqual) *HashEqualDelete {
	hed.mutation.Where(ps...)
	return hed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hed *HashEqualDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, hed.gremlinExec, hed.mutation, hed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hed *HashEqualDelete) ExecX(ctx context.Context) int {
	n, err := hed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hed *HashEqualDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := hed.gremlin().Query()
	if err := hed.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	hed.mutation.done = true
	return res.ReadInt()
}

func (hed *HashEqualDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(hashequal.Label)
	for _, p := range hed.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// HashEqualDeleteOne is the builder for deleting a single HashEqual entity.
type HashEqualDeleteOne struct {
	hed *HashEqualDelete
}

// Where appends a list predicates to the HashEqualDelete builder.
func (hedo *HashEqualDeleteOne) Where(ps ...predicate.HashEqual) *HashEqualDeleteOne {
	hedo.hed.mutation.Where(ps...)
	return hedo
}

// Exec executes the deletion query.
func (hedo *HashEqualDeleteOne) Exec(ctx context.Context) error {
	n, err := hedo.hed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hashequal.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hedo *HashEqualDeleteOne) ExecX(ctx context.Context) {
	if err := hedo.Exec(ctx); err != nil {
		panic(err)
	}
}
