// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pkgequal"
)

// PkgEqualCreate is the builder for creating a PkgEqual entity.
type PkgEqualCreate struct {
	config
	mutation *PkgEqualMutation
	hooks    []Hook
}

// SetOrigin sets the "origin" field.
func (pec *PkgEqualCreate) SetOrigin(s string) *PkgEqualCreate {
	pec.mutation.SetOrigin(s)
	return pec
}

// SetCollector sets the "collector" field.
func (pec *PkgEqualCreate) SetCollector(s string) *PkgEqualCreate {
	pec.mutation.SetCollector(s)
	return pec
}

// SetJustification sets the "justification" field.
func (pec *PkgEqualCreate) SetJustification(s string) *PkgEqualCreate {
	pec.mutation.SetJustification(s)
	return pec
}

// SetPackagesHash sets the "packages_hash" field.
func (pec *PkgEqualCreate) SetPackagesHash(s string) *PkgEqualCreate {
	pec.mutation.SetPackagesHash(s)
	return pec
}

// AddPackageIDs adds the "packages" edge to the PackageVersion entity by IDs.
func (pec *PkgEqualCreate) AddPackageIDs(ids ...int) *PkgEqualCreate {
	pec.mutation.AddPackageIDs(ids...)
	return pec
}

// AddPackages adds the "packages" edges to the PackageVersion entity.
func (pec *PkgEqualCreate) AddPackages(p ...*PackageVersion) *PkgEqualCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pec.AddPackageIDs(ids...)
}

// Mutation returns the PkgEqualMutation object of the builder.
func (pec *PkgEqualCreate) Mutation() *PkgEqualMutation {
	return pec.mutation
}

// Save creates the PkgEqual in the database.
func (pec *PkgEqualCreate) Save(ctx context.Context) (*PkgEqual, error) {
	return withHooks(ctx, pec.gremlinSave, pec.mutation, pec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pec *PkgEqualCreate) SaveX(ctx context.Context) *PkgEqual {
	v, err := pec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pec *PkgEqualCreate) Exec(ctx context.Context) error {
	_, err := pec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pec *PkgEqualCreate) ExecX(ctx context.Context) {
	if err := pec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pec *PkgEqualCreate) check() error {
	if _, ok := pec.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "PkgEqual.origin"`)}
	}
	if _, ok := pec.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "PkgEqual.collector"`)}
	}
	if _, ok := pec.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "PkgEqual.justification"`)}
	}
	if _, ok := pec.mutation.PackagesHash(); !ok {
		return &ValidationError{Name: "packages_hash", err: errors.New(`ent: missing required field "PkgEqual.packages_hash"`)}
	}
	if len(pec.mutation.PackagesIDs()) == 0 {
		return &ValidationError{Name: "packages", err: errors.New(`ent: missing required edge "PkgEqual.packages"`)}
	}
	return nil
}

func (pec *PkgEqualCreate) gremlinSave(ctx context.Context) (*PkgEqual, error) {
	if err := pec.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := pec.gremlin().Query()
	if err := pec.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &PkgEqual{config: pec.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	pec.mutation.id = &rnode.ID
	pec.mutation.done = true
	return rnode, nil
}

func (pec *PkgEqualCreate) gremlin() *dsl.Traversal {
	v := g.AddV(pkgequal.Label)
	if value, ok := pec.mutation.Origin(); ok {
		v.Property(dsl.Single, pkgequal.FieldOrigin, value)
	}
	if value, ok := pec.mutation.Collector(); ok {
		v.Property(dsl.Single, pkgequal.FieldCollector, value)
	}
	if value, ok := pec.mutation.Justification(); ok {
		v.Property(dsl.Single, pkgequal.FieldJustification, value)
	}
	if value, ok := pec.mutation.PackagesHash(); ok {
		v.Property(dsl.Single, pkgequal.FieldPackagesHash, value)
	}
	for _, id := range pec.mutation.PackagesIDs() {
		v.AddE(pkgequal.PackagesLabel).To(g.V(id)).OutV()
	}
	return v.ValueMap(true)
}

// PkgEqualCreateBulk is the builder for creating many PkgEqual entities in bulk.
type PkgEqualCreateBulk struct {
	config
	builders []*PkgEqualCreate
}
