// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcenamespace"
)

// SourceNamespaceCreate is the builder for creating a SourceNamespace entity.
type SourceNamespaceCreate struct {
	config
	mutation *SourceNamespaceMutation
	hooks    []Hook
}

// SetNamespace sets the "namespace" field.
func (snc *SourceNamespaceCreate) SetNamespace(s string) *SourceNamespaceCreate {
	snc.mutation.SetNamespace(s)
	return snc
}

// SetSourceID sets the "source_id" field.
func (snc *SourceNamespaceCreate) SetSourceID(i int) *SourceNamespaceCreate {
	snc.mutation.SetSourceID(i)
	return snc
}

// SetSourceTypeID sets the "source_type" edge to the SourceType entity by ID.
func (snc *SourceNamespaceCreate) SetSourceTypeID(id int) *SourceNamespaceCreate {
	snc.mutation.SetSourceTypeID(id)
	return snc
}

// SetSourceType sets the "source_type" edge to the SourceType entity.
func (snc *SourceNamespaceCreate) SetSourceType(s *SourceType) *SourceNamespaceCreate {
	return snc.SetSourceTypeID(s.ID)
}

// AddNameIDs adds the "names" edge to the SourceName entity by IDs.
func (snc *SourceNamespaceCreate) AddNameIDs(ids ...int) *SourceNamespaceCreate {
	snc.mutation.AddNameIDs(ids...)
	return snc
}

// AddNames adds the "names" edges to the SourceName entity.
func (snc *SourceNamespaceCreate) AddNames(s ...*SourceName) *SourceNamespaceCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return snc.AddNameIDs(ids...)
}

// Mutation returns the SourceNamespaceMutation object of the builder.
func (snc *SourceNamespaceCreate) Mutation() *SourceNamespaceMutation {
	return snc.mutation
}

// Save creates the SourceNamespace in the database.
func (snc *SourceNamespaceCreate) Save(ctx context.Context) (*SourceNamespace, error) {
	return withHooks(ctx, snc.gremlinSave, snc.mutation, snc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (snc *SourceNamespaceCreate) SaveX(ctx context.Context) *SourceNamespace {
	v, err := snc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (snc *SourceNamespaceCreate) Exec(ctx context.Context) error {
	_, err := snc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snc *SourceNamespaceCreate) ExecX(ctx context.Context) {
	if err := snc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snc *SourceNamespaceCreate) check() error {
	if _, ok := snc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "SourceNamespace.namespace"`)}
	}
	if _, ok := snc.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source_id", err: errors.New(`ent: missing required field "SourceNamespace.source_id"`)}
	}
	if _, ok := snc.mutation.SourceTypeID(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New(`ent: missing required edge "SourceNamespace.source_type"`)}
	}
	return nil
}

func (snc *SourceNamespaceCreate) gremlinSave(ctx context.Context) (*SourceNamespace, error) {
	if err := snc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := snc.gremlin().Query()
	if err := snc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &SourceNamespace{config: snc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	snc.mutation.id = &rnode.ID
	snc.mutation.done = true
	return rnode, nil
}

func (snc *SourceNamespaceCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.AddV(sourcenamespace.Label)
	if value, ok := snc.mutation.Namespace(); ok {
		v.Property(dsl.Single, sourcenamespace.FieldNamespace, value)
	}
	for _, id := range snc.mutation.SourceTypeIDs() {
		v.AddE(sourcenamespace.SourceTypeLabel).To(g.V(id)).OutV()
	}
	for _, id := range snc.mutation.NamesIDs() {
		v.AddE(sourcename.NamespaceLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(sourcename.NamespaceLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(sourcenamespace.Label, sourcename.NamespaceLabel, id)),
		})
	}
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	tr := constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	for _, cr := range constraints[1:] {
		tr = cr.pred.Coalesce(cr.test, tr)
	}
	return tr
}

// SourceNamespaceCreateBulk is the builder for creating many SourceNamespace entities in bulk.
type SourceNamespaceCreateBulk struct {
	config
	builders []*SourceNamespaceCreate
}
