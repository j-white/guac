// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/slsaattestation"
)

// ArtifactUpdate is the builder for updating Artifact entities.
type ArtifactUpdate struct {
	config
	hooks    []Hook
	mutation *ArtifactMutation
}

// Where appends a list predicates to the ArtifactUpdate builder.
func (au *ArtifactUpdate) Where(ps ...predicate.Artifact) *ArtifactUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAlgorithm sets the "algorithm" field.
func (au *ArtifactUpdate) SetAlgorithm(s string) *ArtifactUpdate {
	au.mutation.SetAlgorithm(s)
	return au
}

// SetDigest sets the "digest" field.
func (au *ArtifactUpdate) SetDigest(s string) *ArtifactUpdate {
	au.mutation.SetDigest(s)
	return au
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (au *ArtifactUpdate) AddOccurrenceIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddOccurrenceIDs(ids...)
	return au
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (au *ArtifactUpdate) AddOccurrences(o ...*Occurrence) *ArtifactUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOccurrenceIDs(ids...)
}

// AddSbomIDs adds the "sbom" edge to the BillOfMaterials entity by IDs.
func (au *ArtifactUpdate) AddSbomIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddSbomIDs(ids...)
	return au
}

// AddSbom adds the "sbom" edges to the BillOfMaterials entity.
func (au *ArtifactUpdate) AddSbom(b ...*BillOfMaterials) *ArtifactUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.AddSbomIDs(ids...)
}

// AddAttestationIDs adds the "attestations" edge to the SLSAAttestation entity by IDs.
func (au *ArtifactUpdate) AddAttestationIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddAttestationIDs(ids...)
	return au
}

// AddAttestations adds the "attestations" edges to the SLSAAttestation entity.
func (au *ArtifactUpdate) AddAttestations(s ...*SLSAAttestation) *ArtifactUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddAttestationIDs(ids...)
}

// AddSameIDs adds the "same" edge to the HashEqual entity by IDs.
func (au *ArtifactUpdate) AddSameIDs(ids ...int) *ArtifactUpdate {
	au.mutation.AddSameIDs(ids...)
	return au
}

// AddSame adds the "same" edges to the HashEqual entity.
func (au *ArtifactUpdate) AddSame(h ...*HashEqual) *ArtifactUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return au.AddSameIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (au *ArtifactUpdate) Mutation() *ArtifactMutation {
	return au.mutation
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (au *ArtifactUpdate) ClearOccurrences() *ArtifactUpdate {
	au.mutation.ClearOccurrences()
	return au
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (au *ArtifactUpdate) RemoveOccurrenceIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveOccurrenceIDs(ids...)
	return au
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (au *ArtifactUpdate) RemoveOccurrences(o ...*Occurrence) *ArtifactUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOccurrenceIDs(ids...)
}

// ClearSbom clears all "sbom" edges to the BillOfMaterials entity.
func (au *ArtifactUpdate) ClearSbom() *ArtifactUpdate {
	au.mutation.ClearSbom()
	return au
}

// RemoveSbomIDs removes the "sbom" edge to BillOfMaterials entities by IDs.
func (au *ArtifactUpdate) RemoveSbomIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveSbomIDs(ids...)
	return au
}

// RemoveSbom removes "sbom" edges to BillOfMaterials entities.
func (au *ArtifactUpdate) RemoveSbom(b ...*BillOfMaterials) *ArtifactUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.RemoveSbomIDs(ids...)
}

// ClearAttestations clears all "attestations" edges to the SLSAAttestation entity.
func (au *ArtifactUpdate) ClearAttestations() *ArtifactUpdate {
	au.mutation.ClearAttestations()
	return au
}

// RemoveAttestationIDs removes the "attestations" edge to SLSAAttestation entities by IDs.
func (au *ArtifactUpdate) RemoveAttestationIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveAttestationIDs(ids...)
	return au
}

// RemoveAttestations removes "attestations" edges to SLSAAttestation entities.
func (au *ArtifactUpdate) RemoveAttestations(s ...*SLSAAttestation) *ArtifactUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveAttestationIDs(ids...)
}

// ClearSame clears all "same" edges to the HashEqual entity.
func (au *ArtifactUpdate) ClearSame() *ArtifactUpdate {
	au.mutation.ClearSame()
	return au
}

// RemoveSameIDs removes the "same" edge to HashEqual entities by IDs.
func (au *ArtifactUpdate) RemoveSameIDs(ids ...int) *ArtifactUpdate {
	au.mutation.RemoveSameIDs(ids...)
	return au
}

// RemoveSame removes "same" edges to HashEqual entities.
func (au *ArtifactUpdate) RemoveSame(h ...*HashEqual) *ArtifactUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return au.RemoveSameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArtifactUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.gremlinSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArtifactUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArtifactUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArtifactUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ArtifactUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := au.gremlin().Query()
	if err := au.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	au.mutation.done = true
	return res.ReadInt()
}

func (au *ArtifactUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V().HasLabel(artifact.Label)
	for _, p := range au.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := au.mutation.Algorithm(); ok {
		v.Property(dsl.Single, artifact.FieldAlgorithm, value)
	}
	if value, ok := au.mutation.Digest(); ok {
		v.Property(dsl.Single, artifact.FieldDigest, value)
	}
	for _, id := range au.mutation.RemovedOccurrencesIDs() {
		tr := rv.Clone().InE(occurrence.ArtifactLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range au.mutation.OccurrencesIDs() {
		v.AddE(occurrence.ArtifactLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(occurrence.ArtifactLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(artifact.Label, occurrence.ArtifactLabel, id)),
		})
	}
	for _, id := range au.mutation.RemovedSbomIDs() {
		tr := rv.Clone().InE(billofmaterials.ArtifactLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range au.mutation.SbomIDs() {
		v.AddE(billofmaterials.ArtifactLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(billofmaterials.ArtifactLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(artifact.Label, billofmaterials.ArtifactLabel, id)),
		})
	}
	for _, id := range au.mutation.RemovedAttestationsIDs() {
		tr := rv.Clone().InE(slsaattestation.BuiltFromLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range au.mutation.AttestationsIDs() {
		v.AddE(slsaattestation.BuiltFromLabel).From(g.V(id)).InV()
	}
	for _, id := range au.mutation.RemovedSameIDs() {
		tr := rv.Clone().InE(hashequal.ArtifactsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range au.mutation.SameIDs() {
		v.AddE(hashequal.ArtifactsLabel).From(g.V(id)).InV()
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// ArtifactUpdateOne is the builder for updating a single Artifact entity.
type ArtifactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtifactMutation
}

// SetAlgorithm sets the "algorithm" field.
func (auo *ArtifactUpdateOne) SetAlgorithm(s string) *ArtifactUpdateOne {
	auo.mutation.SetAlgorithm(s)
	return auo
}

// SetDigest sets the "digest" field.
func (auo *ArtifactUpdateOne) SetDigest(s string) *ArtifactUpdateOne {
	auo.mutation.SetDigest(s)
	return auo
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (auo *ArtifactUpdateOne) AddOccurrenceIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddOccurrenceIDs(ids...)
	return auo
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (auo *ArtifactUpdateOne) AddOccurrences(o ...*Occurrence) *ArtifactUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOccurrenceIDs(ids...)
}

// AddSbomIDs adds the "sbom" edge to the BillOfMaterials entity by IDs.
func (auo *ArtifactUpdateOne) AddSbomIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddSbomIDs(ids...)
	return auo
}

// AddSbom adds the "sbom" edges to the BillOfMaterials entity.
func (auo *ArtifactUpdateOne) AddSbom(b ...*BillOfMaterials) *ArtifactUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.AddSbomIDs(ids...)
}

// AddAttestationIDs adds the "attestations" edge to the SLSAAttestation entity by IDs.
func (auo *ArtifactUpdateOne) AddAttestationIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddAttestationIDs(ids...)
	return auo
}

// AddAttestations adds the "attestations" edges to the SLSAAttestation entity.
func (auo *ArtifactUpdateOne) AddAttestations(s ...*SLSAAttestation) *ArtifactUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddAttestationIDs(ids...)
}

// AddSameIDs adds the "same" edge to the HashEqual entity by IDs.
func (auo *ArtifactUpdateOne) AddSameIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.AddSameIDs(ids...)
	return auo
}

// AddSame adds the "same" edges to the HashEqual entity.
func (auo *ArtifactUpdateOne) AddSame(h ...*HashEqual) *ArtifactUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return auo.AddSameIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (auo *ArtifactUpdateOne) Mutation() *ArtifactMutation {
	return auo.mutation
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (auo *ArtifactUpdateOne) ClearOccurrences() *ArtifactUpdateOne {
	auo.mutation.ClearOccurrences()
	return auo
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (auo *ArtifactUpdateOne) RemoveOccurrenceIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveOccurrenceIDs(ids...)
	return auo
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (auo *ArtifactUpdateOne) RemoveOccurrences(o ...*Occurrence) *ArtifactUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOccurrenceIDs(ids...)
}

// ClearSbom clears all "sbom" edges to the BillOfMaterials entity.
func (auo *ArtifactUpdateOne) ClearSbom() *ArtifactUpdateOne {
	auo.mutation.ClearSbom()
	return auo
}

// RemoveSbomIDs removes the "sbom" edge to BillOfMaterials entities by IDs.
func (auo *ArtifactUpdateOne) RemoveSbomIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveSbomIDs(ids...)
	return auo
}

// RemoveSbom removes "sbom" edges to BillOfMaterials entities.
func (auo *ArtifactUpdateOne) RemoveSbom(b ...*BillOfMaterials) *ArtifactUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.RemoveSbomIDs(ids...)
}

// ClearAttestations clears all "attestations" edges to the SLSAAttestation entity.
func (auo *ArtifactUpdateOne) ClearAttestations() *ArtifactUpdateOne {
	auo.mutation.ClearAttestations()
	return auo
}

// RemoveAttestationIDs removes the "attestations" edge to SLSAAttestation entities by IDs.
func (auo *ArtifactUpdateOne) RemoveAttestationIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveAttestationIDs(ids...)
	return auo
}

// RemoveAttestations removes "attestations" edges to SLSAAttestation entities.
func (auo *ArtifactUpdateOne) RemoveAttestations(s ...*SLSAAttestation) *ArtifactUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveAttestationIDs(ids...)
}

// ClearSame clears all "same" edges to the HashEqual entity.
func (auo *ArtifactUpdateOne) ClearSame() *ArtifactUpdateOne {
	auo.mutation.ClearSame()
	return auo
}

// RemoveSameIDs removes the "same" edge to HashEqual entities by IDs.
func (auo *ArtifactUpdateOne) RemoveSameIDs(ids ...int) *ArtifactUpdateOne {
	auo.mutation.RemoveSameIDs(ids...)
	return auo
}

// RemoveSame removes "same" edges to HashEqual entities.
func (auo *ArtifactUpdateOne) RemoveSame(h ...*HashEqual) *ArtifactUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return auo.RemoveSameIDs(ids...)
}

// Where appends a list predicates to the ArtifactUpdate builder.
func (auo *ArtifactUpdateOne) Where(ps ...predicate.Artifact) *ArtifactUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArtifactUpdateOne) Select(field string, fields ...string) *ArtifactUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Artifact entity.
func (auo *ArtifactUpdateOne) Save(ctx context.Context) (*Artifact, error) {
	return withHooks(ctx, auo.gremlinSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArtifactUpdateOne) SaveX(ctx context.Context) *Artifact {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArtifactUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArtifactUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ArtifactUpdateOne) gremlinSave(ctx context.Context) (*Artifact, error) {
	res := &gremlin.Response{}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Artifact.id" for update`)}
	}
	query, bindings := auo.gremlin(id).Query()
	if err := auo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	auo.mutation.done = true
	a := &Artifact{config: auo.config}
	if err := a.FromResponse(res); err != nil {
		return nil, err
	}
	return a, nil
}

func (auo *ArtifactUpdateOne) gremlin(id int) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := auo.mutation.Algorithm(); ok {
		v.Property(dsl.Single, artifact.FieldAlgorithm, value)
	}
	if value, ok := auo.mutation.Digest(); ok {
		v.Property(dsl.Single, artifact.FieldDigest, value)
	}
	for _, id := range auo.mutation.RemovedOccurrencesIDs() {
		tr := rv.Clone().InE(occurrence.ArtifactLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range auo.mutation.OccurrencesIDs() {
		v.AddE(occurrence.ArtifactLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(occurrence.ArtifactLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(artifact.Label, occurrence.ArtifactLabel, id)),
		})
	}
	for _, id := range auo.mutation.RemovedSbomIDs() {
		tr := rv.Clone().InE(billofmaterials.ArtifactLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range auo.mutation.SbomIDs() {
		v.AddE(billofmaterials.ArtifactLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(billofmaterials.ArtifactLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(artifact.Label, billofmaterials.ArtifactLabel, id)),
		})
	}
	for _, id := range auo.mutation.RemovedAttestationsIDs() {
		tr := rv.Clone().InE(slsaattestation.BuiltFromLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range auo.mutation.AttestationsIDs() {
		v.AddE(slsaattestation.BuiltFromLabel).From(g.V(id)).InV()
	}
	for _, id := range auo.mutation.RemovedSameIDs() {
		tr := rv.Clone().InE(hashequal.ArtifactsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range auo.mutation.SameIDs() {
		v.AddE(hashequal.ArtifactsLabel).From(g.V(id)).InV()
	}
	if len(auo.fields) > 0 {
		fields := make([]any, 0, len(auo.fields)+1)
		fields = append(fields, true)
		for _, f := range auo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
