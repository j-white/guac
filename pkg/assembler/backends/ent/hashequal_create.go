// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
)

// HashEqualCreate is the builder for creating a HashEqual entity.
type HashEqualCreate struct {
	config
	mutation *HashEqualMutation
	hooks    []Hook
}

// SetOrigin sets the "origin" field.
func (hec *HashEqualCreate) SetOrigin(s string) *HashEqualCreate {
	hec.mutation.SetOrigin(s)
	return hec
}

// SetCollector sets the "collector" field.
func (hec *HashEqualCreate) SetCollector(s string) *HashEqualCreate {
	hec.mutation.SetCollector(s)
	return hec
}

// SetJustification sets the "justification" field.
func (hec *HashEqualCreate) SetJustification(s string) *HashEqualCreate {
	hec.mutation.SetJustification(s)
	return hec
}

// AddArtifactIDs adds the "artifacts" edge to the Artifact entity by IDs.
func (hec *HashEqualCreate) AddArtifactIDs(ids ...int) *HashEqualCreate {
	hec.mutation.AddArtifactIDs(ids...)
	return hec
}

// AddArtifacts adds the "artifacts" edges to the Artifact entity.
func (hec *HashEqualCreate) AddArtifacts(a ...*Artifact) *HashEqualCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return hec.AddArtifactIDs(ids...)
}

// Mutation returns the HashEqualMutation object of the builder.
func (hec *HashEqualCreate) Mutation() *HashEqualMutation {
	return hec.mutation
}

// Save creates the HashEqual in the database.
func (hec *HashEqualCreate) Save(ctx context.Context) (*HashEqual, error) {
	return withHooks(ctx, hec.gremlinSave, hec.mutation, hec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hec *HashEqualCreate) SaveX(ctx context.Context) *HashEqual {
	v, err := hec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hec *HashEqualCreate) Exec(ctx context.Context) error {
	_, err := hec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hec *HashEqualCreate) ExecX(ctx context.Context) {
	if err := hec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hec *HashEqualCreate) check() error {
	if _, ok := hec.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "HashEqual.origin"`)}
	}
	if _, ok := hec.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "HashEqual.collector"`)}
	}
	if _, ok := hec.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "HashEqual.justification"`)}
	}
	if len(hec.mutation.ArtifactsIDs()) == 0 {
		return &ValidationError{Name: "artifacts", err: errors.New(`ent: missing required edge "HashEqual.artifacts"`)}
	}
	return nil
}

func (hec *HashEqualCreate) gremlinSave(ctx context.Context) (*HashEqual, error) {
	if err := hec.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := hec.gremlin().Query()
	if err := hec.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &HashEqual{config: hec.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	hec.mutation.id = &rnode.ID
	hec.mutation.done = true
	return rnode, nil
}

func (hec *HashEqualCreate) gremlin() *dsl.Traversal {
	v := g.AddV(hashequal.Label)
	if value, ok := hec.mutation.Origin(); ok {
		v.Property(dsl.Single, hashequal.FieldOrigin, value)
	}
	if value, ok := hec.mutation.Collector(); ok {
		v.Property(dsl.Single, hashequal.FieldCollector, value)
	}
	if value, ok := hec.mutation.Justification(); ok {
		v.Property(dsl.Single, hashequal.FieldJustification, value)
	}
	for _, id := range hec.mutation.ArtifactsIDs() {
		v.AddE(hashequal.ArtifactsLabel).To(g.V(id)).OutV()
	}
	return v.ValueMap(true)
}

// HashEqualCreateBulk is the builder for creating many HashEqual entities in bulk.
type HashEqualCreateBulk struct {
	config
	builders []*HashEqualCreate
}
