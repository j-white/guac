// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hassourceat"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// HasSourceAtQuery is the builder for querying HasSourceAt entities.
type HasSourceAtQuery struct {
	config
	ctx                *QueryContext
	order              []hassourceat.OrderOption
	inters             []Interceptor
	predicates         []predicate.HasSourceAt
	withPackageVersion *PackageVersionQuery
	withAllVersions    *PackageNameQuery
	withSource         *SourceNameQuery
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Where adds a new predicate for the HasSourceAtQuery builder.
func (hsaq *HasSourceAtQuery) Where(ps ...predicate.HasSourceAt) *HasSourceAtQuery {
	hsaq.predicates = append(hsaq.predicates, ps...)
	return hsaq
}

// Limit the number of records to be returned by this query.
func (hsaq *HasSourceAtQuery) Limit(limit int) *HasSourceAtQuery {
	hsaq.ctx.Limit = &limit
	return hsaq
}

// Offset to start from.
func (hsaq *HasSourceAtQuery) Offset(offset int) *HasSourceAtQuery {
	hsaq.ctx.Offset = &offset
	return hsaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hsaq *HasSourceAtQuery) Unique(unique bool) *HasSourceAtQuery {
	hsaq.ctx.Unique = &unique
	return hsaq
}

// Order specifies how the records should be ordered.
func (hsaq *HasSourceAtQuery) Order(o ...hassourceat.OrderOption) *HasSourceAtQuery {
	hsaq.order = append(hsaq.order, o...)
	return hsaq
}

// QueryPackageVersion chains the current query on the "package_version" edge.
func (hsaq *HasSourceAtQuery) QueryPackageVersion() *PackageVersionQuery {
	query := (&PackageVersionClient{config: hsaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := hsaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := hsaq.gremlinQuery(ctx)
		fromU = gremlin.OutE(hassourceat.PackageVersionLabel).InV()
		return fromU, nil
	}
	return query
}

// QueryAllVersions chains the current query on the "all_versions" edge.
func (hsaq *HasSourceAtQuery) QueryAllVersions() *PackageNameQuery {
	query := (&PackageNameClient{config: hsaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := hsaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := hsaq.gremlinQuery(ctx)
		fromU = gremlin.OutE(hassourceat.AllVersionsLabel).InV()
		return fromU, nil
	}
	return query
}

// QuerySource chains the current query on the "source" edge.
func (hsaq *HasSourceAtQuery) QuerySource() *SourceNameQuery {
	query := (&SourceNameClient{config: hsaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := hsaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := hsaq.gremlinQuery(ctx)
		fromU = gremlin.OutE(hassourceat.SourceLabel).InV()
		return fromU, nil
	}
	return query
}

// First returns the first HasSourceAt entity from the query.
// Returns a *NotFoundError when no HasSourceAt was found.
func (hsaq *HasSourceAtQuery) First(ctx context.Context) (*HasSourceAt, error) {
	nodes, err := hsaq.Limit(1).All(setContextOp(ctx, hsaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hassourceat.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hsaq *HasSourceAtQuery) FirstX(ctx context.Context) *HasSourceAt {
	node, err := hsaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HasSourceAt ID from the query.
// Returns a *NotFoundError when no HasSourceAt ID was found.
func (hsaq *HasSourceAtQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hsaq.Limit(1).IDs(setContextOp(ctx, hsaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hassourceat.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hsaq *HasSourceAtQuery) FirstIDX(ctx context.Context) int {
	id, err := hsaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HasSourceAt entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HasSourceAt entity is found.
// Returns a *NotFoundError when no HasSourceAt entities are found.
func (hsaq *HasSourceAtQuery) Only(ctx context.Context) (*HasSourceAt, error) {
	nodes, err := hsaq.Limit(2).All(setContextOp(ctx, hsaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hassourceat.Label}
	default:
		return nil, &NotSingularError{hassourceat.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hsaq *HasSourceAtQuery) OnlyX(ctx context.Context) *HasSourceAt {
	node, err := hsaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HasSourceAt ID in the query.
// Returns a *NotSingularError when more than one HasSourceAt ID is found.
// Returns a *NotFoundError when no entities are found.
func (hsaq *HasSourceAtQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hsaq.Limit(2).IDs(setContextOp(ctx, hsaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hassourceat.Label}
	default:
		err = &NotSingularError{hassourceat.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hsaq *HasSourceAtQuery) OnlyIDX(ctx context.Context) int {
	id, err := hsaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HasSourceAts.
func (hsaq *HasSourceAtQuery) All(ctx context.Context) ([]*HasSourceAt, error) {
	ctx = setContextOp(ctx, hsaq.ctx, "All")
	if err := hsaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HasSourceAt, *HasSourceAtQuery]()
	return withInterceptors[[]*HasSourceAt](ctx, hsaq, qr, hsaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hsaq *HasSourceAtQuery) AllX(ctx context.Context) []*HasSourceAt {
	nodes, err := hsaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HasSourceAt IDs.
func (hsaq *HasSourceAtQuery) IDs(ctx context.Context) (ids []int, err error) {
	if hsaq.ctx.Unique == nil && hsaq.path != nil {
		hsaq.Unique(true)
	}
	ctx = setContextOp(ctx, hsaq.ctx, "IDs")
	if err = hsaq.Select(hassourceat.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hsaq *HasSourceAtQuery) IDsX(ctx context.Context) []int {
	ids, err := hsaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hsaq *HasSourceAtQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hsaq.ctx, "Count")
	if err := hsaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hsaq, querierCount[*HasSourceAtQuery](), hsaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hsaq *HasSourceAtQuery) CountX(ctx context.Context) int {
	count, err := hsaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hsaq *HasSourceAtQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hsaq.ctx, "Exist")
	switch _, err := hsaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hsaq *HasSourceAtQuery) ExistX(ctx context.Context) bool {
	exist, err := hsaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HasSourceAtQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hsaq *HasSourceAtQuery) Clone() *HasSourceAtQuery {
	if hsaq == nil {
		return nil
	}
	return &HasSourceAtQuery{
		config:             hsaq.config,
		ctx:                hsaq.ctx.Clone(),
		order:              append([]hassourceat.OrderOption{}, hsaq.order...),
		inters:             append([]Interceptor{}, hsaq.inters...),
		predicates:         append([]predicate.HasSourceAt{}, hsaq.predicates...),
		withPackageVersion: hsaq.withPackageVersion.Clone(),
		withAllVersions:    hsaq.withAllVersions.Clone(),
		withSource:         hsaq.withSource.Clone(),
		// clone intermediate query.
		gremlin: hsaq.gremlin.Clone(),
		path:    hsaq.path,
	}
}

// WithPackageVersion tells the query-builder to eager-load the nodes that are connected to
// the "package_version" edge. The optional arguments are used to configure the query builder of the edge.
func (hsaq *HasSourceAtQuery) WithPackageVersion(opts ...func(*PackageVersionQuery)) *HasSourceAtQuery {
	query := (&PackageVersionClient{config: hsaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hsaq.withPackageVersion = query
	return hsaq
}

// WithAllVersions tells the query-builder to eager-load the nodes that are connected to
// the "all_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (hsaq *HasSourceAtQuery) WithAllVersions(opts ...func(*PackageNameQuery)) *HasSourceAtQuery {
	query := (&PackageNameClient{config: hsaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hsaq.withAllVersions = query
	return hsaq
}

// WithSource tells the query-builder to eager-load the nodes that are connected to
// the "source" edge. The optional arguments are used to configure the query builder of the edge.
func (hsaq *HasSourceAtQuery) WithSource(opts ...func(*SourceNameQuery)) *HasSourceAtQuery {
	query := (&SourceNameClient{config: hsaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hsaq.withSource = query
	return hsaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PackageVersionID int `json:"package_version_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HasSourceAt.Query().
//		GroupBy(hassourceat.FieldPackageVersionID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hsaq *HasSourceAtQuery) GroupBy(field string, fields ...string) *HasSourceAtGroupBy {
	hsaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HasSourceAtGroupBy{build: hsaq}
	grbuild.flds = &hsaq.ctx.Fields
	grbuild.label = hassourceat.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PackageVersionID int `json:"package_version_id,omitempty"`
//	}
//
//	client.HasSourceAt.Query().
//		Select(hassourceat.FieldPackageVersionID).
//		Scan(ctx, &v)
func (hsaq *HasSourceAtQuery) Select(fields ...string) *HasSourceAtSelect {
	hsaq.ctx.Fields = append(hsaq.ctx.Fields, fields...)
	sbuild := &HasSourceAtSelect{HasSourceAtQuery: hsaq}
	sbuild.label = hassourceat.Label
	sbuild.flds, sbuild.scan = &hsaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HasSourceAtSelect configured with the given aggregations.
func (hsaq *HasSourceAtQuery) Aggregate(fns ...AggregateFunc) *HasSourceAtSelect {
	return hsaq.Select().Aggregate(fns...)
}

func (hsaq *HasSourceAtQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hsaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hsaq); err != nil {
				return err
			}
		}
	}
	if hsaq.path != nil {
		prev, err := hsaq.path(ctx)
		if err != nil {
			return err
		}
		hsaq.gremlin = prev
	}
	return nil
}

func (hsaq *HasSourceAtQuery) gremlinAll(ctx context.Context, hooks ...queryHook) ([]*HasSourceAt, error) {
	res := &gremlin.Response{}
	traversal := hsaq.gremlinQuery(ctx)
	if len(hsaq.ctx.Fields) > 0 {
		fields := make([]any, len(hsaq.ctx.Fields))
		for i, f := range hsaq.ctx.Fields {
			fields[i] = f
		}
		traversal.ValueMap(fields...)
	} else {
		traversal.ValueMap(true)
	}
	query, bindings := traversal.Query()
	if err := hsaq.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	var hsas HasSourceAts
	if err := hsas.FromResponse(res); err != nil {
		return nil, err
	}
	for i := range hsas {
		hsas[i].config = hsaq.config
	}
	return hsas, nil
}

func (hsaq *HasSourceAtQuery) gremlinCount(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := hsaq.gremlinQuery(ctx).Count().Query()
	if err := hsaq.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (hsaq *HasSourceAtQuery) gremlinQuery(context.Context) *dsl.Traversal {
	v := g.V().HasLabel(hassourceat.Label)
	if hsaq.gremlin != nil {
		v = hsaq.gremlin.Clone()
	}
	for _, p := range hsaq.predicates {
		p(v)
	}
	if len(hsaq.order) > 0 {
		v.Order()
		for _, p := range hsaq.order {
			p(v)
		}
	}
	switch limit, offset := hsaq.ctx.Limit, hsaq.ctx.Offset; {
	case limit != nil && offset != nil:
		v.Range(*offset, *offset+*limit)
	case offset != nil:
		v.Range(*offset, math.MaxInt32)
	case limit != nil:
		v.Limit(*limit)
	}
	if unique := hsaq.ctx.Unique; unique == nil || *unique {
		v.Dedup()
	}
	return v
}

// HasSourceAtGroupBy is the group-by builder for HasSourceAt entities.
type HasSourceAtGroupBy struct {
	selector
	build *HasSourceAtQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hsagb *HasSourceAtGroupBy) Aggregate(fns ...AggregateFunc) *HasSourceAtGroupBy {
	hsagb.fns = append(hsagb.fns, fns...)
	return hsagb
}

// Scan applies the selector query and scans the result into the given value.
func (hsagb *HasSourceAtGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hsagb.build.ctx, "GroupBy")
	if err := hsagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HasSourceAtQuery, *HasSourceAtGroupBy](ctx, hsagb.build, hsagb, hsagb.build.inters, v)
}

func (hsagb *HasSourceAtGroupBy) gremlinScan(ctx context.Context, root *HasSourceAtQuery, v any) error {
	var (
		trs   []any
		names []any
	)
	for _, fn := range hsagb.fns {
		name, tr := fn("p", "")
		trs = append(trs, tr)
		names = append(names, name)
	}
	for _, f := range *hsagb.flds {
		names = append(names, f)
		trs = append(trs, __.As("p").Unfold().Values(f).As(f))
	}
	query, bindings := root.gremlinQuery(ctx).Group().
		By(__.Values(*hsagb.flds...).Fold()).
		By(__.Fold().Match(trs...).Select(names...)).
		Select(dsl.Values).
		Next().
		Query()
	res := &gremlin.Response{}
	if err := hsagb.build.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(*hsagb.flds)+len(hsagb.fns) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

// HasSourceAtSelect is the builder for selecting fields of HasSourceAt entities.
type HasSourceAtSelect struct {
	*HasSourceAtQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hsas *HasSourceAtSelect) Aggregate(fns ...AggregateFunc) *HasSourceAtSelect {
	hsas.fns = append(hsas.fns, fns...)
	return hsas
}

// Scan applies the selector query and scans the result into the given value.
func (hsas *HasSourceAtSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hsas.ctx, "Select")
	if err := hsas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HasSourceAtQuery, *HasSourceAtSelect](ctx, hsas.HasSourceAtQuery, hsas, hsas.inters, v)
}

func (hsas *HasSourceAtSelect) gremlinScan(ctx context.Context, root *HasSourceAtQuery, v any) error {
	var (
		res       = &gremlin.Response{}
		traversal = root.gremlinQuery(ctx)
	)
	if fields := hsas.ctx.Fields; len(fields) == 1 {
		if fields[0] != hassourceat.FieldID {
			traversal = traversal.Values(fields...)
		} else {
			traversal = traversal.ID()
		}
	} else {
		fields := make([]any, len(hsas.ctx.Fields))
		for i, f := range hsas.ctx.Fields {
			fields[i] = f
		}
		traversal = traversal.ValueMap(fields...)
	}
	query, bindings := traversal.Query()
	if err := hsas.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(root.ctx.Fields) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}
