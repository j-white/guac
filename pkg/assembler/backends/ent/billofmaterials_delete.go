// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// BillOfMaterialsDelete is the builder for deleting a BillOfMaterials entity.
type BillOfMaterialsDelete struct {
	config
	hooks    []Hook
	mutation *BillOfMaterialsMutation
}

// Where appends a list predicates to the BillOfMaterialsDelete builder.
func (bomd *BillOfMaterialsDelete) Where(ps ...predicate.BillOfMaterials) *BillOfMaterialsDelete {
	bomd.mutation.Where(ps...)
	return bomd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bomd *BillOfMaterialsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bomd.gremlinExec, bomd.mutation, bomd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bomd *BillOfMaterialsDelete) ExecX(ctx context.Context) int {
	n, err := bomd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bomd *BillOfMaterialsDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := bomd.gremlin().Query()
	if err := bomd.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	bomd.mutation.done = true
	return res.ReadInt()
}

func (bomd *BillOfMaterialsDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(billofmaterials.Label)
	for _, p := range bomd.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// BillOfMaterialsDeleteOne is the builder for deleting a single BillOfMaterials entity.
type BillOfMaterialsDeleteOne struct {
	bomd *BillOfMaterialsDelete
}

// Where appends a list predicates to the BillOfMaterialsDelete builder.
func (bomdo *BillOfMaterialsDeleteOne) Where(ps ...predicate.BillOfMaterials) *BillOfMaterialsDeleteOne {
	bomdo.bomd.mutation.Where(ps...)
	return bomdo
}

// Exec executes the deletion query.
func (bomdo *BillOfMaterialsDeleteOne) Exec(ctx context.Context) error {
	n, err := bomdo.bomd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{billofmaterials.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bomdo *BillOfMaterialsDeleteOne) ExecX(ctx context.Context) {
	if err := bomdo.Exec(ctx); err != nil {
		panic(err)
	}
}
