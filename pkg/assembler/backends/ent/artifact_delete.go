// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ArtifactDelete is the builder for deleting a Artifact entity.
type ArtifactDelete struct {
	config
	hooks    []Hook
	mutation *ArtifactMutation
}

// Where appends a list predicates to the ArtifactDelete builder.
func (ad *ArtifactDelete) Where(ps ...predicate.Artifact) *ArtifactDelete {
	ad.mutation.Where(ps...)
	return ad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ad *ArtifactDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ad.gremlinExec, ad.mutation, ad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ad *ArtifactDelete) ExecX(ctx context.Context) int {
	n, err := ad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ad *ArtifactDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := ad.gremlin().Query()
	if err := ad.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	ad.mutation.done = true
	return res.ReadInt()
}

func (ad *ArtifactDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(artifact.Label)
	for _, p := range ad.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// ArtifactDeleteOne is the builder for deleting a single Artifact entity.
type ArtifactDeleteOne struct {
	ad *ArtifactDelete
}

// Where appends a list predicates to the ArtifactDelete builder.
func (ado *ArtifactDeleteOne) Where(ps ...predicate.Artifact) *ArtifactDeleteOne {
	ado.ad.mutation.Where(ps...)
	return ado
}

// Exec executes the deletion query.
func (ado *ArtifactDeleteOne) Exec(ctx context.Context) error {
	n, err := ado.ad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{artifact.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ado *ArtifactDeleteOne) ExecX(ctx context.Context) {
	if err := ado.Exec(ctx); err != nil {
		panic(err)
	}
}
