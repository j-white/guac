// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagetype"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PackageNamespaceUpdate is the builder for updating PackageNamespace entities.
type PackageNamespaceUpdate struct {
	config
	hooks    []Hook
	mutation *PackageNamespaceMutation
}

// Where appends a list predicates to the PackageNamespaceUpdate builder.
func (pnu *PackageNamespaceUpdate) Where(ps ...predicate.PackageNamespace) *PackageNamespaceUpdate {
	pnu.mutation.Where(ps...)
	return pnu
}

// SetPackageID sets the "package_id" field.
func (pnu *PackageNamespaceUpdate) SetPackageID(i int) *PackageNamespaceUpdate {
	pnu.mutation.SetPackageID(i)
	return pnu
}

// SetNamespace sets the "namespace" field.
func (pnu *PackageNamespaceUpdate) SetNamespace(s string) *PackageNamespaceUpdate {
	pnu.mutation.SetNamespace(s)
	return pnu
}

// SetPackage sets the "package" edge to the PackageType entity.
func (pnu *PackageNamespaceUpdate) SetPackage(p *PackageType) *PackageNamespaceUpdate {
	return pnu.SetPackageID(p.ID)
}

// AddNameIDs adds the "names" edge to the PackageName entity by IDs.
func (pnu *PackageNamespaceUpdate) AddNameIDs(ids ...int) *PackageNamespaceUpdate {
	pnu.mutation.AddNameIDs(ids...)
	return pnu
}

// AddNames adds the "names" edges to the PackageName entity.
func (pnu *PackageNamespaceUpdate) AddNames(p ...*PackageName) *PackageNamespaceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnu.AddNameIDs(ids...)
}

// Mutation returns the PackageNamespaceMutation object of the builder.
func (pnu *PackageNamespaceUpdate) Mutation() *PackageNamespaceMutation {
	return pnu.mutation
}

// ClearPackage clears the "package" edge to the PackageType entity.
func (pnu *PackageNamespaceUpdate) ClearPackage() *PackageNamespaceUpdate {
	pnu.mutation.ClearPackage()
	return pnu
}

// ClearNames clears all "names" edges to the PackageName entity.
func (pnu *PackageNamespaceUpdate) ClearNames() *PackageNamespaceUpdate {
	pnu.mutation.ClearNames()
	return pnu
}

// RemoveNameIDs removes the "names" edge to PackageName entities by IDs.
func (pnu *PackageNamespaceUpdate) RemoveNameIDs(ids ...int) *PackageNamespaceUpdate {
	pnu.mutation.RemoveNameIDs(ids...)
	return pnu
}

// RemoveNames removes "names" edges to PackageName entities.
func (pnu *PackageNamespaceUpdate) RemoveNames(p ...*PackageName) *PackageNamespaceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnu.RemoveNameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pnu *PackageNamespaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pnu.gremlinSave, pnu.mutation, pnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pnu *PackageNamespaceUpdate) SaveX(ctx context.Context) int {
	affected, err := pnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pnu *PackageNamespaceUpdate) Exec(ctx context.Context) error {
	_, err := pnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnu *PackageNamespaceUpdate) ExecX(ctx context.Context) {
	if err := pnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pnu *PackageNamespaceUpdate) check() error {
	if _, ok := pnu.mutation.PackageID(); pnu.mutation.PackageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PackageNamespace.package"`)
	}
	return nil
}

func (pnu *PackageNamespaceUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := pnu.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := pnu.gremlin().Query()
	if err := pnu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	pnu.mutation.done = true
	return res.ReadInt()
}

func (pnu *PackageNamespaceUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V().HasLabel(packagenamespace.Label)
	for _, p := range pnu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := pnu.mutation.Namespace(); ok {
		v.Property(dsl.Single, packagenamespace.FieldNamespace, value)
	}
	if pnu.mutation.PackageCleared() {
		tr := rv.Clone().InE(packagetype.NamespacesLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pnu.mutation.PackageIDs() {
		v.AddE(packagetype.NamespacesLabel).From(g.V(id)).InV()
	}
	for _, id := range pnu.mutation.RemovedNamesIDs() {
		tr := rv.Clone().OutE(packagenamespace.NamesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pnu.mutation.NamesIDs() {
		v.AddE(packagenamespace.NamesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(packagenamespace.NamesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packagenamespace.Label, packagenamespace.NamesLabel, id)),
		})
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// PackageNamespaceUpdateOne is the builder for updating a single PackageNamespace entity.
type PackageNamespaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackageNamespaceMutation
}

// SetPackageID sets the "package_id" field.
func (pnuo *PackageNamespaceUpdateOne) SetPackageID(i int) *PackageNamespaceUpdateOne {
	pnuo.mutation.SetPackageID(i)
	return pnuo
}

// SetNamespace sets the "namespace" field.
func (pnuo *PackageNamespaceUpdateOne) SetNamespace(s string) *PackageNamespaceUpdateOne {
	pnuo.mutation.SetNamespace(s)
	return pnuo
}

// SetPackage sets the "package" edge to the PackageType entity.
func (pnuo *PackageNamespaceUpdateOne) SetPackage(p *PackageType) *PackageNamespaceUpdateOne {
	return pnuo.SetPackageID(p.ID)
}

// AddNameIDs adds the "names" edge to the PackageName entity by IDs.
func (pnuo *PackageNamespaceUpdateOne) AddNameIDs(ids ...int) *PackageNamespaceUpdateOne {
	pnuo.mutation.AddNameIDs(ids...)
	return pnuo
}

// AddNames adds the "names" edges to the PackageName entity.
func (pnuo *PackageNamespaceUpdateOne) AddNames(p ...*PackageName) *PackageNamespaceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnuo.AddNameIDs(ids...)
}

// Mutation returns the PackageNamespaceMutation object of the builder.
func (pnuo *PackageNamespaceUpdateOne) Mutation() *PackageNamespaceMutation {
	return pnuo.mutation
}

// ClearPackage clears the "package" edge to the PackageType entity.
func (pnuo *PackageNamespaceUpdateOne) ClearPackage() *PackageNamespaceUpdateOne {
	pnuo.mutation.ClearPackage()
	return pnuo
}

// ClearNames clears all "names" edges to the PackageName entity.
func (pnuo *PackageNamespaceUpdateOne) ClearNames() *PackageNamespaceUpdateOne {
	pnuo.mutation.ClearNames()
	return pnuo
}

// RemoveNameIDs removes the "names" edge to PackageName entities by IDs.
func (pnuo *PackageNamespaceUpdateOne) RemoveNameIDs(ids ...int) *PackageNamespaceUpdateOne {
	pnuo.mutation.RemoveNameIDs(ids...)
	return pnuo
}

// RemoveNames removes "names" edges to PackageName entities.
func (pnuo *PackageNamespaceUpdateOne) RemoveNames(p ...*PackageName) *PackageNamespaceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnuo.RemoveNameIDs(ids...)
}

// Where appends a list predicates to the PackageNamespaceUpdate builder.
func (pnuo *PackageNamespaceUpdateOne) Where(ps ...predicate.PackageNamespace) *PackageNamespaceUpdateOne {
	pnuo.mutation.Where(ps...)
	return pnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pnuo *PackageNamespaceUpdateOne) Select(field string, fields ...string) *PackageNamespaceUpdateOne {
	pnuo.fields = append([]string{field}, fields...)
	return pnuo
}

// Save executes the query and returns the updated PackageNamespace entity.
func (pnuo *PackageNamespaceUpdateOne) Save(ctx context.Context) (*PackageNamespace, error) {
	return withHooks(ctx, pnuo.gremlinSave, pnuo.mutation, pnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pnuo *PackageNamespaceUpdateOne) SaveX(ctx context.Context) *PackageNamespace {
	node, err := pnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pnuo *PackageNamespaceUpdateOne) Exec(ctx context.Context) error {
	_, err := pnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnuo *PackageNamespaceUpdateOne) ExecX(ctx context.Context) {
	if err := pnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pnuo *PackageNamespaceUpdateOne) check() error {
	if _, ok := pnuo.mutation.PackageID(); pnuo.mutation.PackageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PackageNamespace.package"`)
	}
	return nil
}

func (pnuo *PackageNamespaceUpdateOne) gremlinSave(ctx context.Context) (*PackageNamespace, error) {
	if err := pnuo.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := pnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PackageNamespace.id" for update`)}
	}
	query, bindings := pnuo.gremlin(id).Query()
	if err := pnuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	pnuo.mutation.done = true
	pn := &PackageNamespace{config: pnuo.config}
	if err := pn.FromResponse(res); err != nil {
		return nil, err
	}
	return pn, nil
}

func (pnuo *PackageNamespaceUpdateOne) gremlin(id int) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := pnuo.mutation.Namespace(); ok {
		v.Property(dsl.Single, packagenamespace.FieldNamespace, value)
	}
	if pnuo.mutation.PackageCleared() {
		tr := rv.Clone().InE(packagetype.NamespacesLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pnuo.mutation.PackageIDs() {
		v.AddE(packagetype.NamespacesLabel).From(g.V(id)).InV()
	}
	for _, id := range pnuo.mutation.RemovedNamesIDs() {
		tr := rv.Clone().OutE(packagenamespace.NamesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pnuo.mutation.NamesIDs() {
		v.AddE(packagenamespace.NamesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(packagenamespace.NamesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packagenamespace.Label, packagenamespace.NamesLabel, id)),
		})
	}
	if len(pnuo.fields) > 0 {
		fields := make([]any, 0, len(pnuo.fields)+1)
		fields = append(fields, true)
		for _, f := range pnuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
