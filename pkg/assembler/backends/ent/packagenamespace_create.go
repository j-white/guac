// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagetype"
)

// PackageNamespaceCreate is the builder for creating a PackageNamespace entity.
type PackageNamespaceCreate struct {
	config
	mutation *PackageNamespaceMutation
	hooks    []Hook
}

// SetPackageID sets the "package_id" field.
func (pnc *PackageNamespaceCreate) SetPackageID(i int) *PackageNamespaceCreate {
	pnc.mutation.SetPackageID(i)
	return pnc
}

// SetNamespace sets the "namespace" field.
func (pnc *PackageNamespaceCreate) SetNamespace(s string) *PackageNamespaceCreate {
	pnc.mutation.SetNamespace(s)
	return pnc
}

// SetPackage sets the "package" edge to the PackageType entity.
func (pnc *PackageNamespaceCreate) SetPackage(p *PackageType) *PackageNamespaceCreate {
	return pnc.SetPackageID(p.ID)
}

// AddNameIDs adds the "names" edge to the PackageName entity by IDs.
func (pnc *PackageNamespaceCreate) AddNameIDs(ids ...int) *PackageNamespaceCreate {
	pnc.mutation.AddNameIDs(ids...)
	return pnc
}

// AddNames adds the "names" edges to the PackageName entity.
func (pnc *PackageNamespaceCreate) AddNames(p ...*PackageName) *PackageNamespaceCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnc.AddNameIDs(ids...)
}

// Mutation returns the PackageNamespaceMutation object of the builder.
func (pnc *PackageNamespaceCreate) Mutation() *PackageNamespaceMutation {
	return pnc.mutation
}

// Save creates the PackageNamespace in the database.
func (pnc *PackageNamespaceCreate) Save(ctx context.Context) (*PackageNamespace, error) {
	return withHooks(ctx, pnc.gremlinSave, pnc.mutation, pnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pnc *PackageNamespaceCreate) SaveX(ctx context.Context) *PackageNamespace {
	v, err := pnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pnc *PackageNamespaceCreate) Exec(ctx context.Context) error {
	_, err := pnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnc *PackageNamespaceCreate) ExecX(ctx context.Context) {
	if err := pnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pnc *PackageNamespaceCreate) check() error {
	if _, ok := pnc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package_id", err: errors.New(`ent: missing required field "PackageNamespace.package_id"`)}
	}
	if _, ok := pnc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "PackageNamespace.namespace"`)}
	}
	if _, ok := pnc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package", err: errors.New(`ent: missing required edge "PackageNamespace.package"`)}
	}
	return nil
}

func (pnc *PackageNamespaceCreate) gremlinSave(ctx context.Context) (*PackageNamespace, error) {
	if err := pnc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := pnc.gremlin().Query()
	if err := pnc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &PackageNamespace{config: pnc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	pnc.mutation.id = &rnode.ID
	pnc.mutation.done = true
	return rnode, nil
}

func (pnc *PackageNamespaceCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.AddV(packagenamespace.Label)
	if value, ok := pnc.mutation.Namespace(); ok {
		v.Property(dsl.Single, packagenamespace.FieldNamespace, value)
	}
	for _, id := range pnc.mutation.PackageIDs() {
		v.AddE(packagetype.NamespacesLabel).From(g.V(id)).InV()
	}
	for _, id := range pnc.mutation.NamesIDs() {
		v.AddE(packagenamespace.NamesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(packagenamespace.NamesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packagenamespace.Label, packagenamespace.NamesLabel, id)),
		})
	}
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	tr := constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	for _, cr := range constraints[1:] {
		tr = cr.pred.Coalesce(cr.test, tr)
	}
	return tr
}

// PackageNamespaceCreateBulk is the builder for creating many PackageNamespace entities in bulk.
type PackageNamespaceCreateBulk struct {
	config
	builders []*PackageNamespaceCreate
}
