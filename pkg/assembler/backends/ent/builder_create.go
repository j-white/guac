// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/builder"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/slsaattestation"
)

// BuilderCreate is the builder for creating a Builder entity.
type BuilderCreate struct {
	config
	mutation *BuilderMutation
	hooks    []Hook
}

// SetURI sets the "uri" field.
func (bc *BuilderCreate) SetURI(s string) *BuilderCreate {
	bc.mutation.SetURI(s)
	return bc
}

// AddSlsaAttestationIDs adds the "slsa_attestations" edge to the SLSAAttestation entity by IDs.
func (bc *BuilderCreate) AddSlsaAttestationIDs(ids ...int) *BuilderCreate {
	bc.mutation.AddSlsaAttestationIDs(ids...)
	return bc
}

// AddSlsaAttestations adds the "slsa_attestations" edges to the SLSAAttestation entity.
func (bc *BuilderCreate) AddSlsaAttestations(s ...*SLSAAttestation) *BuilderCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bc.AddSlsaAttestationIDs(ids...)
}

// Mutation returns the BuilderMutation object of the builder.
func (bc *BuilderCreate) Mutation() *BuilderMutation {
	return bc.mutation
}

// Save creates the Builder in the database.
func (bc *BuilderCreate) Save(ctx context.Context) (*Builder, error) {
	return withHooks(ctx, bc.gremlinSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BuilderCreate) SaveX(ctx context.Context) *Builder {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BuilderCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BuilderCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BuilderCreate) check() error {
	if _, ok := bc.mutation.URI(); !ok {
		return &ValidationError{Name: "uri", err: errors.New(`ent: missing required field "Builder.uri"`)}
	}
	return nil
}

func (bc *BuilderCreate) gremlinSave(ctx context.Context) (*Builder, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := bc.gremlin().Query()
	if err := bc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &Builder{config: bc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	bc.mutation.id = &rnode.ID
	bc.mutation.done = true
	return rnode, nil
}

func (bc *BuilderCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.AddV(builder.Label)
	if value, ok := bc.mutation.URI(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(builder.Label, builder.FieldURI, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(builder.Label, builder.FieldURI, value)),
		})
		v.Property(dsl.Single, builder.FieldURI, value)
	}
	for _, id := range bc.mutation.SlsaAttestationsIDs() {
		v.AddE(slsaattestation.BuiltByLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(slsaattestation.BuiltByLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(builder.Label, slsaattestation.BuiltByLabel, id)),
		})
	}
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	tr := constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	for _, cr := range constraints[1:] {
		tr = cr.pred.Coalesce(cr.test, tr)
	}
	return tr
}

// BuilderCreateBulk is the builder for creating many Builder entities in bulk.
type BuilderCreateBulk struct {
	config
	builders []*BuilderCreate
}
