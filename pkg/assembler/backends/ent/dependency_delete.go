// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/dependency"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// DependencyDelete is the builder for deleting a Dependency entity.
type DependencyDelete struct {
	config
	hooks    []Hook
	mutation *DependencyMutation
}

// Where appends a list predicates to the DependencyDelete builder.
func (dd *DependencyDelete) Where(ps ...predicate.Dependency) *DependencyDelete {
	dd.mutation.Where(ps...)
	return dd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dd *DependencyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dd.gremlinExec, dd.mutation, dd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dd *DependencyDelete) ExecX(ctx context.Context) int {
	n, err := dd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dd *DependencyDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := dd.gremlin().Query()
	if err := dd.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	dd.mutation.done = true
	return res.ReadInt()
}

func (dd *DependencyDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(dependency.Label)
	for _, p := range dd.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// DependencyDeleteOne is the builder for deleting a single Dependency entity.
type DependencyDeleteOne struct {
	dd *DependencyDelete
}

// Where appends a list predicates to the DependencyDelete builder.
func (ddo *DependencyDeleteOne) Where(ps ...predicate.Dependency) *DependencyDeleteOne {
	ddo.dd.mutation.Where(ps...)
	return ddo
}

// Exec executes the deletion query.
func (ddo *DependencyDeleteOne) Exec(ctx context.Context) error {
	n, err := ddo.dd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{dependency.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ddo *DependencyDeleteOne) ExecX(ctx context.Context) {
	if err := ddo.Exec(ctx); err != nil {
		panic(err)
	}
}
