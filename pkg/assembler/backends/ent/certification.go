// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certification"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// Certification is the model entity for the Certification schema.
type Certification struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID *int `json:"source_id,omitempty"`
	// PackageVersionID holds the value of the "package_version_id" field.
	PackageVersionID *int `json:"package_version_id,omitempty"`
	// PackageNameID holds the value of the "package_name_id" field.
	PackageNameID *int `json:"package_name_id,omitempty"`
	// ArtifactID holds the value of the "artifact_id" field.
	ArtifactID *int `json:"artifact_id,omitempty"`
	// Type holds the value of the "type" field.
	Type certification.Type `json:"type,omitempty"`
	// Justification holds the value of the "justification" field.
	Justification string `json:"justification,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CertificationQuery when eager-loading is set.
	Edges CertificationEdges `json:"edges"`
}

// CertificationEdges holds the relations/edges for other nodes in the graph.
type CertificationEdges struct {
	// Source holds the value of the source edge.
	Source *SourceName `json:"source,omitempty"`
	// PackageVersion holds the value of the package_version edge.
	PackageVersion *PackageVersion `json:"package_version,omitempty"`
	// AllVersions holds the value of the all_versions edge.
	AllVersions *PackageName `json:"all_versions,omitempty"`
	// Artifact holds the value of the artifact edge.
	Artifact *Artifact `json:"artifact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertificationEdges) SourceOrErr() (*SourceName, error) {
	if e.loadedTypes[0] {
		if e.Source == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sourcename.Label}
		}
		return e.Source, nil
	}
	return nil, &NotLoadedError{edge: "source"}
}

// PackageVersionOrErr returns the PackageVersion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertificationEdges) PackageVersionOrErr() (*PackageVersion, error) {
	if e.loadedTypes[1] {
		if e.PackageVersion == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.PackageVersion, nil
	}
	return nil, &NotLoadedError{edge: "package_version"}
}

// AllVersionsOrErr returns the AllVersions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertificationEdges) AllVersionsOrErr() (*PackageName, error) {
	if e.loadedTypes[2] {
		if e.AllVersions == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packagename.Label}
		}
		return e.AllVersions, nil
	}
	return nil, &NotLoadedError{edge: "all_versions"}
}

// ArtifactOrErr returns the Artifact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertificationEdges) ArtifactOrErr() (*Artifact, error) {
	if e.loadedTypes[3] {
		if e.Artifact == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: artifact.Label}
		}
		return e.Artifact, nil
	}
	return nil, &NotLoadedError{edge: "artifact"}
}

// FromResponse scans the gremlin response data into Certification.
func (c *Certification) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanc struct {
		ID               int                `json:"id,omitempty"`
		SourceID         *int               `json:"source_id,omitempty"`
		PackageVersionID *int               `json:"package_version_id,omitempty"`
		PackageNameID    *int               `json:"package_name_id,omitempty"`
		ArtifactID       *int               `json:"artifact_id,omitempty"`
		Type             certification.Type `json:"type,omitempty"`
		Justification    string             `json:"justification,omitempty"`
		Origin           string             `json:"origin,omitempty"`
		Collector        string             `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scanc); err != nil {
		return err
	}
	c.ID = scanc.ID
	c.SourceID = scanc.SourceID
	c.PackageVersionID = scanc.PackageVersionID
	c.PackageNameID = scanc.PackageNameID
	c.ArtifactID = scanc.ArtifactID
	c.Type = scanc.Type
	c.Justification = scanc.Justification
	c.Origin = scanc.Origin
	c.Collector = scanc.Collector
	return nil
}

// QuerySource queries the "source" edge of the Certification entity.
func (c *Certification) QuerySource() *SourceNameQuery {
	return NewCertificationClient(c.config).QuerySource(c)
}

// QueryPackageVersion queries the "package_version" edge of the Certification entity.
func (c *Certification) QueryPackageVersion() *PackageVersionQuery {
	return NewCertificationClient(c.config).QueryPackageVersion(c)
}

// QueryAllVersions queries the "all_versions" edge of the Certification entity.
func (c *Certification) QueryAllVersions() *PackageNameQuery {
	return NewCertificationClient(c.config).QueryAllVersions(c)
}

// QueryArtifact queries the "artifact" edge of the Certification entity.
func (c *Certification) QueryArtifact() *ArtifactQuery {
	return NewCertificationClient(c.config).QueryArtifact(c)
}

// Update returns a builder for updating this Certification.
// Note that you need to call Certification.Unwrap() before calling this method if this Certification
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Certification) Update() *CertificationUpdateOne {
	return NewCertificationClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Certification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Certification) Unwrap() *Certification {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Certification is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Certification) String() string {
	var builder strings.Builder
	builder.WriteString("Certification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	if v := c.SourceID; v != nil {
		builder.WriteString("source_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.PackageVersionID; v != nil {
		builder.WriteString("package_version_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.PackageNameID; v != nil {
		builder.WriteString("package_name_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.ArtifactID; v != nil {
		builder.WriteString("artifact_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(c.Justification)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(c.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(c.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// Certifications is a parsable slice of Certification.
type Certifications []*Certification

// FromResponse scans the gremlin response data into Certifications.
func (c *Certifications) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanc []struct {
		ID               int                `json:"id,omitempty"`
		SourceID         *int               `json:"source_id,omitempty"`
		PackageVersionID *int               `json:"package_version_id,omitempty"`
		PackageNameID    *int               `json:"package_name_id,omitempty"`
		ArtifactID       *int               `json:"artifact_id,omitempty"`
		Type             certification.Type `json:"type,omitempty"`
		Justification    string             `json:"justification,omitempty"`
		Origin           string             `json:"origin,omitempty"`
		Collector        string             `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scanc); err != nil {
		return err
	}
	for _, v := range scanc {
		node := &Certification{ID: v.ID}
		node.SourceID = v.SourceID
		node.PackageVersionID = v.PackageVersionID
		node.PackageNameID = v.PackageNameID
		node.ArtifactID = v.ArtifactID
		node.Type = v.Type
		node.Justification = v.Justification
		node.Origin = v.Origin
		node.Collector = v.Collector
		*c = append(*c, node)
	}
	return nil
}
