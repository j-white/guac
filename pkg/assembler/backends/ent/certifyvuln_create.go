// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvuln"
)

// CertifyVulnCreate is the builder for creating a CertifyVuln entity.
type CertifyVulnCreate struct {
	config
	mutation *CertifyVulnMutation
	hooks    []Hook
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (cvc *CertifyVulnCreate) SetVulnerabilityID(i int) *CertifyVulnCreate {
	cvc.mutation.SetVulnerabilityID(i)
	return cvc
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (cvc *CertifyVulnCreate) SetNillableVulnerabilityID(i *int) *CertifyVulnCreate {
	if i != nil {
		cvc.SetVulnerabilityID(*i)
	}
	return cvc
}

// SetPackageID sets the "package_id" field.
func (cvc *CertifyVulnCreate) SetPackageID(i int) *CertifyVulnCreate {
	cvc.mutation.SetPackageID(i)
	return cvc
}

// SetTimeScanned sets the "time_scanned" field.
func (cvc *CertifyVulnCreate) SetTimeScanned(t time.Time) *CertifyVulnCreate {
	cvc.mutation.SetTimeScanned(t)
	return cvc
}

// SetDbURI sets the "db_uri" field.
func (cvc *CertifyVulnCreate) SetDbURI(s string) *CertifyVulnCreate {
	cvc.mutation.SetDbURI(s)
	return cvc
}

// SetDbVersion sets the "db_version" field.
func (cvc *CertifyVulnCreate) SetDbVersion(s string) *CertifyVulnCreate {
	cvc.mutation.SetDbVersion(s)
	return cvc
}

// SetScannerURI sets the "scanner_uri" field.
func (cvc *CertifyVulnCreate) SetScannerURI(s string) *CertifyVulnCreate {
	cvc.mutation.SetScannerURI(s)
	return cvc
}

// SetScannerVersion sets the "scanner_version" field.
func (cvc *CertifyVulnCreate) SetScannerVersion(s string) *CertifyVulnCreate {
	cvc.mutation.SetScannerVersion(s)
	return cvc
}

// SetOrigin sets the "origin" field.
func (cvc *CertifyVulnCreate) SetOrigin(s string) *CertifyVulnCreate {
	cvc.mutation.SetOrigin(s)
	return cvc
}

// SetCollector sets the "collector" field.
func (cvc *CertifyVulnCreate) SetCollector(s string) *CertifyVulnCreate {
	cvc.mutation.SetCollector(s)
	return cvc
}

// SetVulnerability sets the "vulnerability" edge to the SecurityAdvisory entity.
func (cvc *CertifyVulnCreate) SetVulnerability(s *SecurityAdvisory) *CertifyVulnCreate {
	return cvc.SetVulnerabilityID(s.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (cvc *CertifyVulnCreate) SetPackage(p *PackageVersion) *CertifyVulnCreate {
	return cvc.SetPackageID(p.ID)
}

// Mutation returns the CertifyVulnMutation object of the builder.
func (cvc *CertifyVulnCreate) Mutation() *CertifyVulnMutation {
	return cvc.mutation
}

// Save creates the CertifyVuln in the database.
func (cvc *CertifyVulnCreate) Save(ctx context.Context) (*CertifyVuln, error) {
	return withHooks(ctx, cvc.gremlinSave, cvc.mutation, cvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cvc *CertifyVulnCreate) SaveX(ctx context.Context) *CertifyVuln {
	v, err := cvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvc *CertifyVulnCreate) Exec(ctx context.Context) error {
	_, err := cvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvc *CertifyVulnCreate) ExecX(ctx context.Context) {
	if err := cvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvc *CertifyVulnCreate) check() error {
	if _, ok := cvc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package_id", err: errors.New(`ent: missing required field "CertifyVuln.package_id"`)}
	}
	if _, ok := cvc.mutation.TimeScanned(); !ok {
		return &ValidationError{Name: "time_scanned", err: errors.New(`ent: missing required field "CertifyVuln.time_scanned"`)}
	}
	if _, ok := cvc.mutation.DbURI(); !ok {
		return &ValidationError{Name: "db_uri", err: errors.New(`ent: missing required field "CertifyVuln.db_uri"`)}
	}
	if _, ok := cvc.mutation.DbVersion(); !ok {
		return &ValidationError{Name: "db_version", err: errors.New(`ent: missing required field "CertifyVuln.db_version"`)}
	}
	if _, ok := cvc.mutation.ScannerURI(); !ok {
		return &ValidationError{Name: "scanner_uri", err: errors.New(`ent: missing required field "CertifyVuln.scanner_uri"`)}
	}
	if _, ok := cvc.mutation.ScannerVersion(); !ok {
		return &ValidationError{Name: "scanner_version", err: errors.New(`ent: missing required field "CertifyVuln.scanner_version"`)}
	}
	if _, ok := cvc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "CertifyVuln.origin"`)}
	}
	if _, ok := cvc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "CertifyVuln.collector"`)}
	}
	if _, ok := cvc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package", err: errors.New(`ent: missing required edge "CertifyVuln.package"`)}
	}
	return nil
}

func (cvc *CertifyVulnCreate) gremlinSave(ctx context.Context) (*CertifyVuln, error) {
	if err := cvc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := cvc.gremlin().Query()
	if err := cvc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &CertifyVuln{config: cvc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	cvc.mutation.id = &rnode.ID
	cvc.mutation.done = true
	return rnode, nil
}

func (cvc *CertifyVulnCreate) gremlin() *dsl.Traversal {
	v := g.AddV(certifyvuln.Label)
	if value, ok := cvc.mutation.TimeScanned(); ok {
		v.Property(dsl.Single, certifyvuln.FieldTimeScanned, value)
	}
	if value, ok := cvc.mutation.DbURI(); ok {
		v.Property(dsl.Single, certifyvuln.FieldDbURI, value)
	}
	if value, ok := cvc.mutation.DbVersion(); ok {
		v.Property(dsl.Single, certifyvuln.FieldDbVersion, value)
	}
	if value, ok := cvc.mutation.ScannerURI(); ok {
		v.Property(dsl.Single, certifyvuln.FieldScannerURI, value)
	}
	if value, ok := cvc.mutation.ScannerVersion(); ok {
		v.Property(dsl.Single, certifyvuln.FieldScannerVersion, value)
	}
	if value, ok := cvc.mutation.Origin(); ok {
		v.Property(dsl.Single, certifyvuln.FieldOrigin, value)
	}
	if value, ok := cvc.mutation.Collector(); ok {
		v.Property(dsl.Single, certifyvuln.FieldCollector, value)
	}
	for _, id := range cvc.mutation.VulnerabilityIDs() {
		v.AddE(certifyvuln.VulnerabilityLabel).To(g.V(id)).OutV()
	}
	for _, id := range cvc.mutation.PackageIDs() {
		v.AddE(certifyvuln.PackageLabel).To(g.V(id)).OutV()
	}
	return v.ValueMap(true)
}

// CertifyVulnCreateBulk is the builder for creating many CertifyVuln entities in bulk.
type CertifyVulnCreateBulk struct {
	config
	builders []*CertifyVulnCreate
}
