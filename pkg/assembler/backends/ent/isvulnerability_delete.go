// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isvulnerability"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// IsVulnerabilityDelete is the builder for deleting a IsVulnerability entity.
type IsVulnerabilityDelete struct {
	config
	hooks    []Hook
	mutation *IsVulnerabilityMutation
}

// Where appends a list predicates to the IsVulnerabilityDelete builder.
func (ivd *IsVulnerabilityDelete) Where(ps ...predicate.IsVulnerability) *IsVulnerabilityDelete {
	ivd.mutation.Where(ps...)
	return ivd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ivd *IsVulnerabilityDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ivd.gremlinExec, ivd.mutation, ivd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ivd *IsVulnerabilityDelete) ExecX(ctx context.Context) int {
	n, err := ivd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ivd *IsVulnerabilityDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := ivd.gremlin().Query()
	if err := ivd.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	ivd.mutation.done = true
	return res.ReadInt()
}

func (ivd *IsVulnerabilityDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(isvulnerability.Label)
	for _, p := range ivd.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// IsVulnerabilityDeleteOne is the builder for deleting a single IsVulnerability entity.
type IsVulnerabilityDeleteOne struct {
	ivd *IsVulnerabilityDelete
}

// Where appends a list predicates to the IsVulnerabilityDelete builder.
func (ivdo *IsVulnerabilityDeleteOne) Where(ps ...predicate.IsVulnerability) *IsVulnerabilityDeleteOne {
	ivdo.ivd.mutation.Where(ps...)
	return ivdo
}

// Exec executes the deletion query.
func (ivdo *IsVulnerabilityDeleteOne) Exec(ctx context.Context) error {
	n, err := ivdo.ivd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{isvulnerability.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ivdo *IsVulnerabilityDeleteOne) ExecX(ctx context.Context) {
	if err := ivdo.Exec(ctx); err != nil {
		panic(err)
	}
}
