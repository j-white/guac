// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certification"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// CertificationDelete is the builder for deleting a Certification entity.
type CertificationDelete struct {
	config
	hooks    []Hook
	mutation *CertificationMutation
}

// Where appends a list predicates to the CertificationDelete builder.
func (cd *CertificationDelete) Where(ps ...predicate.Certification) *CertificationDelete {
	cd.mutation.Where(ps...)
	return cd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cd *CertificationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cd.gremlinExec, cd.mutation, cd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cd *CertificationDelete) ExecX(ctx context.Context) int {
	n, err := cd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cd *CertificationDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := cd.gremlin().Query()
	if err := cd.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	cd.mutation.done = true
	return res.ReadInt()
}

func (cd *CertificationDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(certification.Label)
	for _, p := range cd.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// CertificationDeleteOne is the builder for deleting a single Certification entity.
type CertificationDeleteOne struct {
	cd *CertificationDelete
}

// Where appends a list predicates to the CertificationDelete builder.
func (cdo *CertificationDeleteOne) Where(ps ...predicate.Certification) *CertificationDeleteOne {
	cdo.cd.mutation.Where(ps...)
	return cdo
}

// Exec executes the deletion query.
func (cdo *CertificationDeleteOne) Exec(ctx context.Context) error {
	n, err := cdo.cd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{certification.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cdo *CertificationDeleteOne) ExecX(ctx context.Context) {
	if err := cdo.Exec(ctx); err != nil {
		panic(err)
	}
}
