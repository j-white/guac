// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/dependency"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// DependencyQuery is the builder for querying Dependency entities.
type DependencyQuery struct {
	config
	ctx                  *QueryContext
	order                []dependency.OrderOption
	inters               []Interceptor
	predicates           []predicate.Dependency
	withPackage          *PackageVersionQuery
	withDependentPackage *PackageNameQuery
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Where adds a new predicate for the DependencyQuery builder.
func (dq *DependencyQuery) Where(ps ...predicate.Dependency) *DependencyQuery {
	dq.predicates = append(dq.predicates, ps...)
	return dq
}

// Limit the number of records to be returned by this query.
func (dq *DependencyQuery) Limit(limit int) *DependencyQuery {
	dq.ctx.Limit = &limit
	return dq
}

// Offset to start from.
func (dq *DependencyQuery) Offset(offset int) *DependencyQuery {
	dq.ctx.Offset = &offset
	return dq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dq *DependencyQuery) Unique(unique bool) *DependencyQuery {
	dq.ctx.Unique = &unique
	return dq
}

// Order specifies how the records should be ordered.
func (dq *DependencyQuery) Order(o ...dependency.OrderOption) *DependencyQuery {
	dq.order = append(dq.order, o...)
	return dq
}

// QueryPackage chains the current query on the "package" edge.
func (dq *DependencyQuery) QueryPackage() *PackageVersionQuery {
	query := (&PackageVersionClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := dq.gremlinQuery(ctx)
		fromU = gremlin.OutE(dependency.PackageLabel).InV()
		return fromU, nil
	}
	return query
}

// QueryDependentPackage chains the current query on the "dependent_package" edge.
func (dq *DependencyQuery) QueryDependentPackage() *PackageNameQuery {
	query := (&PackageNameClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := dq.gremlinQuery(ctx)
		fromU = gremlin.OutE(dependency.DependentPackageLabel).InV()
		return fromU, nil
	}
	return query
}

// First returns the first Dependency entity from the query.
// Returns a *NotFoundError when no Dependency was found.
func (dq *DependencyQuery) First(ctx context.Context) (*Dependency, error) {
	nodes, err := dq.Limit(1).All(setContextOp(ctx, dq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{dependency.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dq *DependencyQuery) FirstX(ctx context.Context) *Dependency {
	node, err := dq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Dependency ID from the query.
// Returns a *NotFoundError when no Dependency ID was found.
func (dq *DependencyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dq.Limit(1).IDs(setContextOp(ctx, dq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{dependency.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dq *DependencyQuery) FirstIDX(ctx context.Context) int {
	id, err := dq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Dependency entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Dependency entity is found.
// Returns a *NotFoundError when no Dependency entities are found.
func (dq *DependencyQuery) Only(ctx context.Context) (*Dependency, error) {
	nodes, err := dq.Limit(2).All(setContextOp(ctx, dq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{dependency.Label}
	default:
		return nil, &NotSingularError{dependency.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dq *DependencyQuery) OnlyX(ctx context.Context) *Dependency {
	node, err := dq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Dependency ID in the query.
// Returns a *NotSingularError when more than one Dependency ID is found.
// Returns a *NotFoundError when no entities are found.
func (dq *DependencyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dq.Limit(2).IDs(setContextOp(ctx, dq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{dependency.Label}
	default:
		err = &NotSingularError{dependency.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dq *DependencyQuery) OnlyIDX(ctx context.Context) int {
	id, err := dq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Dependencies.
func (dq *DependencyQuery) All(ctx context.Context) ([]*Dependency, error) {
	ctx = setContextOp(ctx, dq.ctx, "All")
	if err := dq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Dependency, *DependencyQuery]()
	return withInterceptors[[]*Dependency](ctx, dq, qr, dq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dq *DependencyQuery) AllX(ctx context.Context) []*Dependency {
	nodes, err := dq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Dependency IDs.
func (dq *DependencyQuery) IDs(ctx context.Context) (ids []int, err error) {
	if dq.ctx.Unique == nil && dq.path != nil {
		dq.Unique(true)
	}
	ctx = setContextOp(ctx, dq.ctx, "IDs")
	if err = dq.Select(dependency.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dq *DependencyQuery) IDsX(ctx context.Context) []int {
	ids, err := dq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dq *DependencyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dq.ctx, "Count")
	if err := dq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dq, querierCount[*DependencyQuery](), dq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dq *DependencyQuery) CountX(ctx context.Context) int {
	count, err := dq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dq *DependencyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dq.ctx, "Exist")
	switch _, err := dq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dq *DependencyQuery) ExistX(ctx context.Context) bool {
	exist, err := dq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DependencyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dq *DependencyQuery) Clone() *DependencyQuery {
	if dq == nil {
		return nil
	}
	return &DependencyQuery{
		config:               dq.config,
		ctx:                  dq.ctx.Clone(),
		order:                append([]dependency.OrderOption{}, dq.order...),
		inters:               append([]Interceptor{}, dq.inters...),
		predicates:           append([]predicate.Dependency{}, dq.predicates...),
		withPackage:          dq.withPackage.Clone(),
		withDependentPackage: dq.withDependentPackage.Clone(),
		// clone intermediate query.
		gremlin: dq.gremlin.Clone(),
		path:    dq.path,
	}
}

// WithPackage tells the query-builder to eager-load the nodes that are connected to
// the "package" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DependencyQuery) WithPackage(opts ...func(*PackageVersionQuery)) *DependencyQuery {
	query := (&PackageVersionClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withPackage = query
	return dq
}

// WithDependentPackage tells the query-builder to eager-load the nodes that are connected to
// the "dependent_package" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DependencyQuery) WithDependentPackage(opts ...func(*PackageNameQuery)) *DependencyQuery {
	query := (&PackageNameClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withDependentPackage = query
	return dq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PackageID int `json:"package_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Dependency.Query().
//		GroupBy(dependency.FieldPackageID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dq *DependencyQuery) GroupBy(field string, fields ...string) *DependencyGroupBy {
	dq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DependencyGroupBy{build: dq}
	grbuild.flds = &dq.ctx.Fields
	grbuild.label = dependency.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PackageID int `json:"package_id,omitempty"`
//	}
//
//	client.Dependency.Query().
//		Select(dependency.FieldPackageID).
//		Scan(ctx, &v)
func (dq *DependencyQuery) Select(fields ...string) *DependencySelect {
	dq.ctx.Fields = append(dq.ctx.Fields, fields...)
	sbuild := &DependencySelect{DependencyQuery: dq}
	sbuild.label = dependency.Label
	sbuild.flds, sbuild.scan = &dq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DependencySelect configured with the given aggregations.
func (dq *DependencyQuery) Aggregate(fns ...AggregateFunc) *DependencySelect {
	return dq.Select().Aggregate(fns...)
}

func (dq *DependencyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dq); err != nil {
				return err
			}
		}
	}
	if dq.path != nil {
		prev, err := dq.path(ctx)
		if err != nil {
			return err
		}
		dq.gremlin = prev
	}
	return nil
}

func (dq *DependencyQuery) gremlinAll(ctx context.Context, hooks ...queryHook) ([]*Dependency, error) {
	res := &gremlin.Response{}
	traversal := dq.gremlinQuery(ctx)
	if len(dq.ctx.Fields) > 0 {
		fields := make([]any, len(dq.ctx.Fields))
		for i, f := range dq.ctx.Fields {
			fields[i] = f
		}
		traversal.ValueMap(fields...)
	} else {
		traversal.ValueMap(true)
	}
	query, bindings := traversal.Query()
	if err := dq.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	var ds Dependencies
	if err := ds.FromResponse(res); err != nil {
		return nil, err
	}
	for i := range ds {
		ds[i].config = dq.config
	}
	return ds, nil
}

func (dq *DependencyQuery) gremlinCount(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := dq.gremlinQuery(ctx).Count().Query()
	if err := dq.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (dq *DependencyQuery) gremlinQuery(context.Context) *dsl.Traversal {
	v := g.V().HasLabel(dependency.Label)
	if dq.gremlin != nil {
		v = dq.gremlin.Clone()
	}
	for _, p := range dq.predicates {
		p(v)
	}
	if len(dq.order) > 0 {
		v.Order()
		for _, p := range dq.order {
			p(v)
		}
	}
	switch limit, offset := dq.ctx.Limit, dq.ctx.Offset; {
	case limit != nil && offset != nil:
		v.Range(*offset, *offset+*limit)
	case offset != nil:
		v.Range(*offset, math.MaxInt32)
	case limit != nil:
		v.Limit(*limit)
	}
	if unique := dq.ctx.Unique; unique == nil || *unique {
		v.Dedup()
	}
	return v
}

// DependencyGroupBy is the group-by builder for Dependency entities.
type DependencyGroupBy struct {
	selector
	build *DependencyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dgb *DependencyGroupBy) Aggregate(fns ...AggregateFunc) *DependencyGroupBy {
	dgb.fns = append(dgb.fns, fns...)
	return dgb
}

// Scan applies the selector query and scans the result into the given value.
func (dgb *DependencyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dgb.build.ctx, "GroupBy")
	if err := dgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DependencyQuery, *DependencyGroupBy](ctx, dgb.build, dgb, dgb.build.inters, v)
}

func (dgb *DependencyGroupBy) gremlinScan(ctx context.Context, root *DependencyQuery, v any) error {
	var (
		trs   []any
		names []any
	)
	for _, fn := range dgb.fns {
		name, tr := fn("p", "")
		trs = append(trs, tr)
		names = append(names, name)
	}
	for _, f := range *dgb.flds {
		names = append(names, f)
		trs = append(trs, __.As("p").Unfold().Values(f).As(f))
	}
	query, bindings := root.gremlinQuery(ctx).Group().
		By(__.Values(*dgb.flds...).Fold()).
		By(__.Fold().Match(trs...).Select(names...)).
		Select(dsl.Values).
		Next().
		Query()
	res := &gremlin.Response{}
	if err := dgb.build.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(*dgb.flds)+len(dgb.fns) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

// DependencySelect is the builder for selecting fields of Dependency entities.
type DependencySelect struct {
	*DependencyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ds *DependencySelect) Aggregate(fns ...AggregateFunc) *DependencySelect {
	ds.fns = append(ds.fns, fns...)
	return ds
}

// Scan applies the selector query and scans the result into the given value.
func (ds *DependencySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ds.ctx, "Select")
	if err := ds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DependencyQuery, *DependencySelect](ctx, ds.DependencyQuery, ds, ds.inters, v)
}

func (ds *DependencySelect) gremlinScan(ctx context.Context, root *DependencyQuery, v any) error {
	var (
		res       = &gremlin.Response{}
		traversal = root.gremlinQuery(ctx)
	)
	if fields := ds.ctx.Fields; len(fields) == 1 {
		if fields[0] != dependency.FieldID {
			traversal = traversal.Values(fields...)
		} else {
			traversal = traversal.ID()
		}
	} else {
		fields := make([]any, len(ds.ctx.Fields))
		for i, f := range ds.ctx.Fields {
			fields[i] = f
		}
		traversal = traversal.ValueMap(fields...)
	}
	query, bindings := traversal.Query()
	if err := ds.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(root.ctx.Fields) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}
