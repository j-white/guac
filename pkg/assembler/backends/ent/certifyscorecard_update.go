// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyscorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/scorecard"
)

// CertifyScorecardUpdate is the builder for updating CertifyScorecard entities.
type CertifyScorecardUpdate struct {
	config
	hooks    []Hook
	mutation *CertifyScorecardMutation
}

// Where appends a list predicates to the CertifyScorecardUpdate builder.
func (csu *CertifyScorecardUpdate) Where(ps ...predicate.CertifyScorecard) *CertifyScorecardUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetSourceID sets the "source_id" field.
func (csu *CertifyScorecardUpdate) SetSourceID(i int) *CertifyScorecardUpdate {
	csu.mutation.SetSourceID(i)
	return csu
}

// SetScorecardID sets the "scorecard_id" field.
func (csu *CertifyScorecardUpdate) SetScorecardID(i int) *CertifyScorecardUpdate {
	csu.mutation.SetScorecardID(i)
	return csu
}

// SetScorecard sets the "scorecard" edge to the Scorecard entity.
func (csu *CertifyScorecardUpdate) SetScorecard(s *Scorecard) *CertifyScorecardUpdate {
	return csu.SetScorecardID(s.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (csu *CertifyScorecardUpdate) SetSource(s *SourceName) *CertifyScorecardUpdate {
	return csu.SetSourceID(s.ID)
}

// Mutation returns the CertifyScorecardMutation object of the builder.
func (csu *CertifyScorecardUpdate) Mutation() *CertifyScorecardMutation {
	return csu.mutation
}

// ClearScorecard clears the "scorecard" edge to the Scorecard entity.
func (csu *CertifyScorecardUpdate) ClearScorecard() *CertifyScorecardUpdate {
	csu.mutation.ClearScorecard()
	return csu
}

// ClearSource clears the "source" edge to the SourceName entity.
func (csu *CertifyScorecardUpdate) ClearSource() *CertifyScorecardUpdate {
	csu.mutation.ClearSource()
	return csu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CertifyScorecardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.gremlinSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CertifyScorecardUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CertifyScorecardUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CertifyScorecardUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CertifyScorecardUpdate) check() error {
	if _, ok := csu.mutation.ScorecardID(); csu.mutation.ScorecardCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CertifyScorecard.scorecard"`)
	}
	if _, ok := csu.mutation.SourceID(); csu.mutation.SourceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CertifyScorecard.source"`)
	}
	return nil
}

func (csu *CertifyScorecardUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := csu.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := csu.gremlin().Query()
	if err := csu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	csu.mutation.done = true
	return res.ReadInt()
}

func (csu *CertifyScorecardUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(certifyscorecard.Label)
	for _, p := range csu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if csu.mutation.ScorecardCleared() {
		tr := rv.Clone().InE(scorecard.CertificationsLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range csu.mutation.ScorecardIDs() {
		v.AddE(scorecard.CertificationsLabel).From(g.V(id)).InV()
	}
	if csu.mutation.SourceCleared() {
		tr := rv.Clone().OutE(certifyscorecard.SourceLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range csu.mutation.SourceIDs() {
		v.AddE(certifyscorecard.SourceLabel).To(g.V(id)).OutV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// CertifyScorecardUpdateOne is the builder for updating a single CertifyScorecard entity.
type CertifyScorecardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertifyScorecardMutation
}

// SetSourceID sets the "source_id" field.
func (csuo *CertifyScorecardUpdateOne) SetSourceID(i int) *CertifyScorecardUpdateOne {
	csuo.mutation.SetSourceID(i)
	return csuo
}

// SetScorecardID sets the "scorecard_id" field.
func (csuo *CertifyScorecardUpdateOne) SetScorecardID(i int) *CertifyScorecardUpdateOne {
	csuo.mutation.SetScorecardID(i)
	return csuo
}

// SetScorecard sets the "scorecard" edge to the Scorecard entity.
func (csuo *CertifyScorecardUpdateOne) SetScorecard(s *Scorecard) *CertifyScorecardUpdateOne {
	return csuo.SetScorecardID(s.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (csuo *CertifyScorecardUpdateOne) SetSource(s *SourceName) *CertifyScorecardUpdateOne {
	return csuo.SetSourceID(s.ID)
}

// Mutation returns the CertifyScorecardMutation object of the builder.
func (csuo *CertifyScorecardUpdateOne) Mutation() *CertifyScorecardMutation {
	return csuo.mutation
}

// ClearScorecard clears the "scorecard" edge to the Scorecard entity.
func (csuo *CertifyScorecardUpdateOne) ClearScorecard() *CertifyScorecardUpdateOne {
	csuo.mutation.ClearScorecard()
	return csuo
}

// ClearSource clears the "source" edge to the SourceName entity.
func (csuo *CertifyScorecardUpdateOne) ClearSource() *CertifyScorecardUpdateOne {
	csuo.mutation.ClearSource()
	return csuo
}

// Where appends a list predicates to the CertifyScorecardUpdate builder.
func (csuo *CertifyScorecardUpdateOne) Where(ps ...predicate.CertifyScorecard) *CertifyScorecardUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CertifyScorecardUpdateOne) Select(field string, fields ...string) *CertifyScorecardUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CertifyScorecard entity.
func (csuo *CertifyScorecardUpdateOne) Save(ctx context.Context) (*CertifyScorecard, error) {
	return withHooks(ctx, csuo.gremlinSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CertifyScorecardUpdateOne) SaveX(ctx context.Context) *CertifyScorecard {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CertifyScorecardUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CertifyScorecardUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CertifyScorecardUpdateOne) check() error {
	if _, ok := csuo.mutation.ScorecardID(); csuo.mutation.ScorecardCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CertifyScorecard.scorecard"`)
	}
	if _, ok := csuo.mutation.SourceID(); csuo.mutation.SourceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CertifyScorecard.source"`)
	}
	return nil
}

func (csuo *CertifyScorecardUpdateOne) gremlinSave(ctx context.Context) (*CertifyScorecard, error) {
	if err := csuo.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CertifyScorecard.id" for update`)}
	}
	query, bindings := csuo.gremlin(id).Query()
	if err := csuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	csuo.mutation.done = true
	cs := &CertifyScorecard{config: csuo.config}
	if err := cs.FromResponse(res); err != nil {
		return nil, err
	}
	return cs, nil
}

func (csuo *CertifyScorecardUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if csuo.mutation.ScorecardCleared() {
		tr := rv.Clone().InE(scorecard.CertificationsLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range csuo.mutation.ScorecardIDs() {
		v.AddE(scorecard.CertificationsLabel).From(g.V(id)).InV()
	}
	if csuo.mutation.SourceCleared() {
		tr := rv.Clone().OutE(certifyscorecard.SourceLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range csuo.mutation.SourceIDs() {
		v.AddE(certifyscorecard.SourceLabel).To(g.V(id)).OutV()
	}
	if len(csuo.fields) > 0 {
		fields := make([]any, 0, len(csuo.fields)+1)
		fields = append(fields, true)
		for _, f := range csuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
