// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
)

// OccurrenceCreate is the builder for creating a Occurrence entity.
type OccurrenceCreate struct {
	config
	mutation *OccurrenceMutation
	hooks    []Hook
}

// SetArtifactID sets the "artifact_id" field.
func (oc *OccurrenceCreate) SetArtifactID(i int) *OccurrenceCreate {
	oc.mutation.SetArtifactID(i)
	return oc
}

// SetJustification sets the "justification" field.
func (oc *OccurrenceCreate) SetJustification(s string) *OccurrenceCreate {
	oc.mutation.SetJustification(s)
	return oc
}

// SetOrigin sets the "origin" field.
func (oc *OccurrenceCreate) SetOrigin(s string) *OccurrenceCreate {
	oc.mutation.SetOrigin(s)
	return oc
}

// SetCollector sets the "collector" field.
func (oc *OccurrenceCreate) SetCollector(s string) *OccurrenceCreate {
	oc.mutation.SetCollector(s)
	return oc
}

// SetSourceID sets the "source_id" field.
func (oc *OccurrenceCreate) SetSourceID(i int) *OccurrenceCreate {
	oc.mutation.SetSourceID(i)
	return oc
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (oc *OccurrenceCreate) SetNillableSourceID(i *int) *OccurrenceCreate {
	if i != nil {
		oc.SetSourceID(*i)
	}
	return oc
}

// SetPackageID sets the "package_id" field.
func (oc *OccurrenceCreate) SetPackageID(i int) *OccurrenceCreate {
	oc.mutation.SetPackageID(i)
	return oc
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (oc *OccurrenceCreate) SetNillablePackageID(i *int) *OccurrenceCreate {
	if i != nil {
		oc.SetPackageID(*i)
	}
	return oc
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (oc *OccurrenceCreate) SetArtifact(a *Artifact) *OccurrenceCreate {
	return oc.SetArtifactID(a.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (oc *OccurrenceCreate) SetPackage(p *PackageVersion) *OccurrenceCreate {
	return oc.SetPackageID(p.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (oc *OccurrenceCreate) SetSource(s *SourceName) *OccurrenceCreate {
	return oc.SetSourceID(s.ID)
}

// Mutation returns the OccurrenceMutation object of the builder.
func (oc *OccurrenceCreate) Mutation() *OccurrenceMutation {
	return oc.mutation
}

// Save creates the Occurrence in the database.
func (oc *OccurrenceCreate) Save(ctx context.Context) (*Occurrence, error) {
	return withHooks(ctx, oc.gremlinSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OccurrenceCreate) SaveX(ctx context.Context) *Occurrence {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OccurrenceCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OccurrenceCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OccurrenceCreate) check() error {
	if _, ok := oc.mutation.ArtifactID(); !ok {
		return &ValidationError{Name: "artifact_id", err: errors.New(`ent: missing required field "Occurrence.artifact_id"`)}
	}
	if _, ok := oc.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "Occurrence.justification"`)}
	}
	if _, ok := oc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "Occurrence.origin"`)}
	}
	if _, ok := oc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "Occurrence.collector"`)}
	}
	if _, ok := oc.mutation.ArtifactID(); !ok {
		return &ValidationError{Name: "artifact", err: errors.New(`ent: missing required edge "Occurrence.artifact"`)}
	}
	return nil
}

func (oc *OccurrenceCreate) gremlinSave(ctx context.Context) (*Occurrence, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := oc.gremlin().Query()
	if err := oc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &Occurrence{config: oc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	oc.mutation.id = &rnode.ID
	oc.mutation.done = true
	return rnode, nil
}

func (oc *OccurrenceCreate) gremlin() *dsl.Traversal {
	v := g.AddV(occurrence.Label)
	if value, ok := oc.mutation.Justification(); ok {
		v.Property(dsl.Single, occurrence.FieldJustification, value)
	}
	if value, ok := oc.mutation.Origin(); ok {
		v.Property(dsl.Single, occurrence.FieldOrigin, value)
	}
	if value, ok := oc.mutation.Collector(); ok {
		v.Property(dsl.Single, occurrence.FieldCollector, value)
	}
	for _, id := range oc.mutation.ArtifactIDs() {
		v.AddE(occurrence.ArtifactLabel).To(g.V(id)).OutV()
	}
	for _, id := range oc.mutation.PackageIDs() {
		v.AddE(occurrence.PackageLabel).To(g.V(id)).OutV()
	}
	for _, id := range oc.mutation.SourceIDs() {
		v.AddE(occurrence.SourceLabel).To(g.V(id)).OutV()
	}
	return v.ValueMap(true)
}

// OccurrenceCreateBulk is the builder for creating many Occurrence entities in bulk.
type OccurrenceCreateBulk struct {
	config
	builders []*OccurrenceCreate
}
