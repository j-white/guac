// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// SourceNameCreate is the builder for creating a SourceName entity.
type SourceNameCreate struct {
	config
	mutation *SourceNameMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (snc *SourceNameCreate) SetName(s string) *SourceNameCreate {
	snc.mutation.SetName(s)
	return snc
}

// SetCommit sets the "commit" field.
func (snc *SourceNameCreate) SetCommit(s string) *SourceNameCreate {
	snc.mutation.SetCommit(s)
	return snc
}

// SetNillableCommit sets the "commit" field if the given value is not nil.
func (snc *SourceNameCreate) SetNillableCommit(s *string) *SourceNameCreate {
	if s != nil {
		snc.SetCommit(*s)
	}
	return snc
}

// SetTag sets the "tag" field.
func (snc *SourceNameCreate) SetTag(s string) *SourceNameCreate {
	snc.mutation.SetTag(s)
	return snc
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (snc *SourceNameCreate) SetNillableTag(s *string) *SourceNameCreate {
	if s != nil {
		snc.SetTag(*s)
	}
	return snc
}

// SetNamespaceID sets the "namespace_id" field.
func (snc *SourceNameCreate) SetNamespaceID(i int) *SourceNameCreate {
	snc.mutation.SetNamespaceID(i)
	return snc
}

// SetNamespace sets the "namespace" edge to the SourceNamespace entity.
func (snc *SourceNameCreate) SetNamespace(s *SourceNamespace) *SourceNameCreate {
	return snc.SetNamespaceID(s.ID)
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (snc *SourceNameCreate) AddOccurrenceIDs(ids ...int) *SourceNameCreate {
	snc.mutation.AddOccurrenceIDs(ids...)
	return snc
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (snc *SourceNameCreate) AddOccurrences(o ...*Occurrence) *SourceNameCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snc.AddOccurrenceIDs(ids...)
}

// Mutation returns the SourceNameMutation object of the builder.
func (snc *SourceNameCreate) Mutation() *SourceNameMutation {
	return snc.mutation
}

// Save creates the SourceName in the database.
func (snc *SourceNameCreate) Save(ctx context.Context) (*SourceName, error) {
	return withHooks(ctx, snc.gremlinSave, snc.mutation, snc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (snc *SourceNameCreate) SaveX(ctx context.Context) *SourceName {
	v, err := snc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (snc *SourceNameCreate) Exec(ctx context.Context) error {
	_, err := snc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snc *SourceNameCreate) ExecX(ctx context.Context) {
	if err := snc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snc *SourceNameCreate) check() error {
	if _, ok := snc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SourceName.name"`)}
	}
	if _, ok := snc.mutation.NamespaceID(); !ok {
		return &ValidationError{Name: "namespace_id", err: errors.New(`ent: missing required field "SourceName.namespace_id"`)}
	}
	if _, ok := snc.mutation.NamespaceID(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required edge "SourceName.namespace"`)}
	}
	return nil
}

func (snc *SourceNameCreate) gremlinSave(ctx context.Context) (*SourceName, error) {
	if err := snc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := snc.gremlin().Query()
	if err := snc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &SourceName{config: snc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	snc.mutation.id = &rnode.ID
	snc.mutation.done = true
	return rnode, nil
}

func (snc *SourceNameCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.AddV(sourcename.Label)
	if value, ok := snc.mutation.Name(); ok {
		v.Property(dsl.Single, sourcename.FieldName, value)
	}
	if value, ok := snc.mutation.Commit(); ok {
		v.Property(dsl.Single, sourcename.FieldCommit, value)
	}
	if value, ok := snc.mutation.Tag(); ok {
		v.Property(dsl.Single, sourcename.FieldTag, value)
	}
	for _, id := range snc.mutation.NamespaceIDs() {
		v.AddE(sourcename.NamespaceLabel).To(g.V(id)).OutV()
	}
	for _, id := range snc.mutation.OccurrencesIDs() {
		v.AddE(occurrence.SourceLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(occurrence.SourceLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(sourcename.Label, occurrence.SourceLabel, id)),
		})
	}
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	tr := constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	for _, cr := range constraints[1:] {
		tr = cr.pred.Coalesce(cr.test, tr)
	}
	return tr
}

// SourceNameCreateBulk is the builder for creating many SourceName entities in bulk.
type SourceNameCreateBulk struct {
	config
	builders []*SourceNameCreate
}
