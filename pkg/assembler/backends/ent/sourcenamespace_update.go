// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcenamespace"
)

// SourceNamespaceUpdate is the builder for updating SourceNamespace entities.
type SourceNamespaceUpdate struct {
	config
	hooks    []Hook
	mutation *SourceNamespaceMutation
}

// Where appends a list predicates to the SourceNamespaceUpdate builder.
func (snu *SourceNamespaceUpdate) Where(ps ...predicate.SourceNamespace) *SourceNamespaceUpdate {
	snu.mutation.Where(ps...)
	return snu
}

// SetNamespace sets the "namespace" field.
func (snu *SourceNamespaceUpdate) SetNamespace(s string) *SourceNamespaceUpdate {
	snu.mutation.SetNamespace(s)
	return snu
}

// SetSourceID sets the "source_id" field.
func (snu *SourceNamespaceUpdate) SetSourceID(i int) *SourceNamespaceUpdate {
	snu.mutation.SetSourceID(i)
	return snu
}

// SetSourceTypeID sets the "source_type" edge to the SourceType entity by ID.
func (snu *SourceNamespaceUpdate) SetSourceTypeID(id int) *SourceNamespaceUpdate {
	snu.mutation.SetSourceTypeID(id)
	return snu
}

// SetSourceType sets the "source_type" edge to the SourceType entity.
func (snu *SourceNamespaceUpdate) SetSourceType(s *SourceType) *SourceNamespaceUpdate {
	return snu.SetSourceTypeID(s.ID)
}

// AddNameIDs adds the "names" edge to the SourceName entity by IDs.
func (snu *SourceNamespaceUpdate) AddNameIDs(ids ...int) *SourceNamespaceUpdate {
	snu.mutation.AddNameIDs(ids...)
	return snu
}

// AddNames adds the "names" edges to the SourceName entity.
func (snu *SourceNamespaceUpdate) AddNames(s ...*SourceName) *SourceNamespaceUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return snu.AddNameIDs(ids...)
}

// Mutation returns the SourceNamespaceMutation object of the builder.
func (snu *SourceNamespaceUpdate) Mutation() *SourceNamespaceMutation {
	return snu.mutation
}

// ClearSourceType clears the "source_type" edge to the SourceType entity.
func (snu *SourceNamespaceUpdate) ClearSourceType() *SourceNamespaceUpdate {
	snu.mutation.ClearSourceType()
	return snu
}

// ClearNames clears all "names" edges to the SourceName entity.
func (snu *SourceNamespaceUpdate) ClearNames() *SourceNamespaceUpdate {
	snu.mutation.ClearNames()
	return snu
}

// RemoveNameIDs removes the "names" edge to SourceName entities by IDs.
func (snu *SourceNamespaceUpdate) RemoveNameIDs(ids ...int) *SourceNamespaceUpdate {
	snu.mutation.RemoveNameIDs(ids...)
	return snu
}

// RemoveNames removes "names" edges to SourceName entities.
func (snu *SourceNamespaceUpdate) RemoveNames(s ...*SourceName) *SourceNamespaceUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return snu.RemoveNameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (snu *SourceNamespaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, snu.gremlinSave, snu.mutation, snu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snu *SourceNamespaceUpdate) SaveX(ctx context.Context) int {
	affected, err := snu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (snu *SourceNamespaceUpdate) Exec(ctx context.Context) error {
	_, err := snu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snu *SourceNamespaceUpdate) ExecX(ctx context.Context) {
	if err := snu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snu *SourceNamespaceUpdate) check() error {
	if _, ok := snu.mutation.SourceTypeID(); snu.mutation.SourceTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SourceNamespace.source_type"`)
	}
	return nil
}

func (snu *SourceNamespaceUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := snu.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := snu.gremlin().Query()
	if err := snu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	snu.mutation.done = true
	return res.ReadInt()
}

func (snu *SourceNamespaceUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V().HasLabel(sourcenamespace.Label)
	for _, p := range snu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := snu.mutation.Namespace(); ok {
		v.Property(dsl.Single, sourcenamespace.FieldNamespace, value)
	}
	if snu.mutation.SourceTypeCleared() {
		tr := rv.Clone().OutE(sourcenamespace.SourceTypeLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range snu.mutation.SourceTypeIDs() {
		v.AddE(sourcenamespace.SourceTypeLabel).To(g.V(id)).OutV()
	}
	for _, id := range snu.mutation.RemovedNamesIDs() {
		tr := rv.Clone().InE(sourcename.NamespaceLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range snu.mutation.NamesIDs() {
		v.AddE(sourcename.NamespaceLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(sourcename.NamespaceLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(sourcenamespace.Label, sourcename.NamespaceLabel, id)),
		})
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// SourceNamespaceUpdateOne is the builder for updating a single SourceNamespace entity.
type SourceNamespaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SourceNamespaceMutation
}

// SetNamespace sets the "namespace" field.
func (snuo *SourceNamespaceUpdateOne) SetNamespace(s string) *SourceNamespaceUpdateOne {
	snuo.mutation.SetNamespace(s)
	return snuo
}

// SetSourceID sets the "source_id" field.
func (snuo *SourceNamespaceUpdateOne) SetSourceID(i int) *SourceNamespaceUpdateOne {
	snuo.mutation.SetSourceID(i)
	return snuo
}

// SetSourceTypeID sets the "source_type" edge to the SourceType entity by ID.
func (snuo *SourceNamespaceUpdateOne) SetSourceTypeID(id int) *SourceNamespaceUpdateOne {
	snuo.mutation.SetSourceTypeID(id)
	return snuo
}

// SetSourceType sets the "source_type" edge to the SourceType entity.
func (snuo *SourceNamespaceUpdateOne) SetSourceType(s *SourceType) *SourceNamespaceUpdateOne {
	return snuo.SetSourceTypeID(s.ID)
}

// AddNameIDs adds the "names" edge to the SourceName entity by IDs.
func (snuo *SourceNamespaceUpdateOne) AddNameIDs(ids ...int) *SourceNamespaceUpdateOne {
	snuo.mutation.AddNameIDs(ids...)
	return snuo
}

// AddNames adds the "names" edges to the SourceName entity.
func (snuo *SourceNamespaceUpdateOne) AddNames(s ...*SourceName) *SourceNamespaceUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return snuo.AddNameIDs(ids...)
}

// Mutation returns the SourceNamespaceMutation object of the builder.
func (snuo *SourceNamespaceUpdateOne) Mutation() *SourceNamespaceMutation {
	return snuo.mutation
}

// ClearSourceType clears the "source_type" edge to the SourceType entity.
func (snuo *SourceNamespaceUpdateOne) ClearSourceType() *SourceNamespaceUpdateOne {
	snuo.mutation.ClearSourceType()
	return snuo
}

// ClearNames clears all "names" edges to the SourceName entity.
func (snuo *SourceNamespaceUpdateOne) ClearNames() *SourceNamespaceUpdateOne {
	snuo.mutation.ClearNames()
	return snuo
}

// RemoveNameIDs removes the "names" edge to SourceName entities by IDs.
func (snuo *SourceNamespaceUpdateOne) RemoveNameIDs(ids ...int) *SourceNamespaceUpdateOne {
	snuo.mutation.RemoveNameIDs(ids...)
	return snuo
}

// RemoveNames removes "names" edges to SourceName entities.
func (snuo *SourceNamespaceUpdateOne) RemoveNames(s ...*SourceName) *SourceNamespaceUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return snuo.RemoveNameIDs(ids...)
}

// Where appends a list predicates to the SourceNamespaceUpdate builder.
func (snuo *SourceNamespaceUpdateOne) Where(ps ...predicate.SourceNamespace) *SourceNamespaceUpdateOne {
	snuo.mutation.Where(ps...)
	return snuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (snuo *SourceNamespaceUpdateOne) Select(field string, fields ...string) *SourceNamespaceUpdateOne {
	snuo.fields = append([]string{field}, fields...)
	return snuo
}

// Save executes the query and returns the updated SourceNamespace entity.
func (snuo *SourceNamespaceUpdateOne) Save(ctx context.Context) (*SourceNamespace, error) {
	return withHooks(ctx, snuo.gremlinSave, snuo.mutation, snuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snuo *SourceNamespaceUpdateOne) SaveX(ctx context.Context) *SourceNamespace {
	node, err := snuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (snuo *SourceNamespaceUpdateOne) Exec(ctx context.Context) error {
	_, err := snuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snuo *SourceNamespaceUpdateOne) ExecX(ctx context.Context) {
	if err := snuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snuo *SourceNamespaceUpdateOne) check() error {
	if _, ok := snuo.mutation.SourceTypeID(); snuo.mutation.SourceTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SourceNamespace.source_type"`)
	}
	return nil
}

func (snuo *SourceNamespaceUpdateOne) gremlinSave(ctx context.Context) (*SourceNamespace, error) {
	if err := snuo.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := snuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SourceNamespace.id" for update`)}
	}
	query, bindings := snuo.gremlin(id).Query()
	if err := snuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	snuo.mutation.done = true
	sn := &SourceNamespace{config: snuo.config}
	if err := sn.FromResponse(res); err != nil {
		return nil, err
	}
	return sn, nil
}

func (snuo *SourceNamespaceUpdateOne) gremlin(id int) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := snuo.mutation.Namespace(); ok {
		v.Property(dsl.Single, sourcenamespace.FieldNamespace, value)
	}
	if snuo.mutation.SourceTypeCleared() {
		tr := rv.Clone().OutE(sourcenamespace.SourceTypeLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range snuo.mutation.SourceTypeIDs() {
		v.AddE(sourcenamespace.SourceTypeLabel).To(g.V(id)).OutV()
	}
	for _, id := range snuo.mutation.RemovedNamesIDs() {
		tr := rv.Clone().InE(sourcename.NamespaceLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range snuo.mutation.NamesIDs() {
		v.AddE(sourcename.NamespaceLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(sourcename.NamespaceLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(sourcenamespace.Label, sourcename.NamespaceLabel, id)),
		})
	}
	if len(snuo.fields) > 0 {
		fields := make([]any, 0, len(snuo.fields)+1)
		fields = append(fields, true)
		for _, f := range snuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
