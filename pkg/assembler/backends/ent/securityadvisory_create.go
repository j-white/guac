// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/securityadvisory"
)

// SecurityAdvisoryCreate is the builder for creating a SecurityAdvisory entity.
type SecurityAdvisoryCreate struct {
	config
	mutation *SecurityAdvisoryMutation
	hooks    []Hook
}

// SetGhsaID sets the "ghsa_id" field.
func (sac *SecurityAdvisoryCreate) SetGhsaID(s string) *SecurityAdvisoryCreate {
	sac.mutation.SetGhsaID(s)
	return sac
}

// SetNillableGhsaID sets the "ghsa_id" field if the given value is not nil.
func (sac *SecurityAdvisoryCreate) SetNillableGhsaID(s *string) *SecurityAdvisoryCreate {
	if s != nil {
		sac.SetGhsaID(*s)
	}
	return sac
}

// SetCveID sets the "cve_id" field.
func (sac *SecurityAdvisoryCreate) SetCveID(s string) *SecurityAdvisoryCreate {
	sac.mutation.SetCveID(s)
	return sac
}

// SetNillableCveID sets the "cve_id" field if the given value is not nil.
func (sac *SecurityAdvisoryCreate) SetNillableCveID(s *string) *SecurityAdvisoryCreate {
	if s != nil {
		sac.SetCveID(*s)
	}
	return sac
}

// SetCveYear sets the "cve_year" field.
func (sac *SecurityAdvisoryCreate) SetCveYear(i int) *SecurityAdvisoryCreate {
	sac.mutation.SetCveYear(i)
	return sac
}

// SetNillableCveYear sets the "cve_year" field if the given value is not nil.
func (sac *SecurityAdvisoryCreate) SetNillableCveYear(i *int) *SecurityAdvisoryCreate {
	if i != nil {
		sac.SetCveYear(*i)
	}
	return sac
}

// SetOsvID sets the "osv_id" field.
func (sac *SecurityAdvisoryCreate) SetOsvID(s string) *SecurityAdvisoryCreate {
	sac.mutation.SetOsvID(s)
	return sac
}

// SetNillableOsvID sets the "osv_id" field if the given value is not nil.
func (sac *SecurityAdvisoryCreate) SetNillableOsvID(s *string) *SecurityAdvisoryCreate {
	if s != nil {
		sac.SetOsvID(*s)
	}
	return sac
}

// Mutation returns the SecurityAdvisoryMutation object of the builder.
func (sac *SecurityAdvisoryCreate) Mutation() *SecurityAdvisoryMutation {
	return sac.mutation
}

// Save creates the SecurityAdvisory in the database.
func (sac *SecurityAdvisoryCreate) Save(ctx context.Context) (*SecurityAdvisory, error) {
	return withHooks(ctx, sac.gremlinSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SecurityAdvisoryCreate) SaveX(ctx context.Context) *SecurityAdvisory {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SecurityAdvisoryCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SecurityAdvisoryCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *SecurityAdvisoryCreate) check() error {
	return nil
}

func (sac *SecurityAdvisoryCreate) gremlinSave(ctx context.Context) (*SecurityAdvisory, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := sac.gremlin().Query()
	if err := sac.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &SecurityAdvisory{config: sac.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	sac.mutation.id = &rnode.ID
	sac.mutation.done = true
	return rnode, nil
}

func (sac *SecurityAdvisoryCreate) gremlin() *dsl.Traversal {
	v := g.AddV(securityadvisory.Label)
	if value, ok := sac.mutation.GhsaID(); ok {
		v.Property(dsl.Single, securityadvisory.FieldGhsaID, value)
	}
	if value, ok := sac.mutation.CveID(); ok {
		v.Property(dsl.Single, securityadvisory.FieldCveID, value)
	}
	if value, ok := sac.mutation.CveYear(); ok {
		v.Property(dsl.Single, securityadvisory.FieldCveYear, value)
	}
	if value, ok := sac.mutation.OsvID(); ok {
		v.Property(dsl.Single, securityadvisory.FieldOsvID, value)
	}
	return v.ValueMap(true)
}

// SecurityAdvisoryCreateBulk is the builder for creating many SecurityAdvisory entities in bulk.
type SecurityAdvisoryCreateBulk struct {
	config
	builders []*SecurityAdvisoryCreate
}
