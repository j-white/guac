// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// SourceNameUpdate is the builder for updating SourceName entities.
type SourceNameUpdate struct {
	config
	hooks    []Hook
	mutation *SourceNameMutation
}

// Where appends a list predicates to the SourceNameUpdate builder.
func (snu *SourceNameUpdate) Where(ps ...predicate.SourceName) *SourceNameUpdate {
	snu.mutation.Where(ps...)
	return snu
}

// SetName sets the "name" field.
func (snu *SourceNameUpdate) SetName(s string) *SourceNameUpdate {
	snu.mutation.SetName(s)
	return snu
}

// SetCommit sets the "commit" field.
func (snu *SourceNameUpdate) SetCommit(s string) *SourceNameUpdate {
	snu.mutation.SetCommit(s)
	return snu
}

// SetNillableCommit sets the "commit" field if the given value is not nil.
func (snu *SourceNameUpdate) SetNillableCommit(s *string) *SourceNameUpdate {
	if s != nil {
		snu.SetCommit(*s)
	}
	return snu
}

// ClearCommit clears the value of the "commit" field.
func (snu *SourceNameUpdate) ClearCommit() *SourceNameUpdate {
	snu.mutation.ClearCommit()
	return snu
}

// SetTag sets the "tag" field.
func (snu *SourceNameUpdate) SetTag(s string) *SourceNameUpdate {
	snu.mutation.SetTag(s)
	return snu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (snu *SourceNameUpdate) SetNillableTag(s *string) *SourceNameUpdate {
	if s != nil {
		snu.SetTag(*s)
	}
	return snu
}

// ClearTag clears the value of the "tag" field.
func (snu *SourceNameUpdate) ClearTag() *SourceNameUpdate {
	snu.mutation.ClearTag()
	return snu
}

// SetNamespaceID sets the "namespace_id" field.
func (snu *SourceNameUpdate) SetNamespaceID(i int) *SourceNameUpdate {
	snu.mutation.SetNamespaceID(i)
	return snu
}

// SetNamespace sets the "namespace" edge to the SourceNamespace entity.
func (snu *SourceNameUpdate) SetNamespace(s *SourceNamespace) *SourceNameUpdate {
	return snu.SetNamespaceID(s.ID)
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (snu *SourceNameUpdate) AddOccurrenceIDs(ids ...int) *SourceNameUpdate {
	snu.mutation.AddOccurrenceIDs(ids...)
	return snu
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (snu *SourceNameUpdate) AddOccurrences(o ...*Occurrence) *SourceNameUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snu.AddOccurrenceIDs(ids...)
}

// Mutation returns the SourceNameMutation object of the builder.
func (snu *SourceNameUpdate) Mutation() *SourceNameMutation {
	return snu.mutation
}

// ClearNamespace clears the "namespace" edge to the SourceNamespace entity.
func (snu *SourceNameUpdate) ClearNamespace() *SourceNameUpdate {
	snu.mutation.ClearNamespace()
	return snu
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (snu *SourceNameUpdate) ClearOccurrences() *SourceNameUpdate {
	snu.mutation.ClearOccurrences()
	return snu
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (snu *SourceNameUpdate) RemoveOccurrenceIDs(ids ...int) *SourceNameUpdate {
	snu.mutation.RemoveOccurrenceIDs(ids...)
	return snu
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (snu *SourceNameUpdate) RemoveOccurrences(o ...*Occurrence) *SourceNameUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snu.RemoveOccurrenceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (snu *SourceNameUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, snu.gremlinSave, snu.mutation, snu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snu *SourceNameUpdate) SaveX(ctx context.Context) int {
	affected, err := snu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (snu *SourceNameUpdate) Exec(ctx context.Context) error {
	_, err := snu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snu *SourceNameUpdate) ExecX(ctx context.Context) {
	if err := snu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snu *SourceNameUpdate) check() error {
	if _, ok := snu.mutation.NamespaceID(); snu.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SourceName.namespace"`)
	}
	return nil
}

func (snu *SourceNameUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := snu.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := snu.gremlin().Query()
	if err := snu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	snu.mutation.done = true
	return res.ReadInt()
}

func (snu *SourceNameUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V().HasLabel(sourcename.Label)
	for _, p := range snu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := snu.mutation.Name(); ok {
		v.Property(dsl.Single, sourcename.FieldName, value)
	}
	if value, ok := snu.mutation.Commit(); ok {
		v.Property(dsl.Single, sourcename.FieldCommit, value)
	}
	if value, ok := snu.mutation.Tag(); ok {
		v.Property(dsl.Single, sourcename.FieldTag, value)
	}
	var properties []any
	if snu.mutation.CommitCleared() {
		properties = append(properties, sourcename.FieldCommit)
	}
	if snu.mutation.TagCleared() {
		properties = append(properties, sourcename.FieldTag)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if snu.mutation.NamespaceCleared() {
		tr := rv.Clone().OutE(sourcename.NamespaceLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range snu.mutation.NamespaceIDs() {
		v.AddE(sourcename.NamespaceLabel).To(g.V(id)).OutV()
	}
	for _, id := range snu.mutation.RemovedOccurrencesIDs() {
		tr := rv.Clone().InE(occurrence.SourceLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range snu.mutation.OccurrencesIDs() {
		v.AddE(occurrence.SourceLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(occurrence.SourceLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(sourcename.Label, occurrence.SourceLabel, id)),
		})
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// SourceNameUpdateOne is the builder for updating a single SourceName entity.
type SourceNameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SourceNameMutation
}

// SetName sets the "name" field.
func (snuo *SourceNameUpdateOne) SetName(s string) *SourceNameUpdateOne {
	snuo.mutation.SetName(s)
	return snuo
}

// SetCommit sets the "commit" field.
func (snuo *SourceNameUpdateOne) SetCommit(s string) *SourceNameUpdateOne {
	snuo.mutation.SetCommit(s)
	return snuo
}

// SetNillableCommit sets the "commit" field if the given value is not nil.
func (snuo *SourceNameUpdateOne) SetNillableCommit(s *string) *SourceNameUpdateOne {
	if s != nil {
		snuo.SetCommit(*s)
	}
	return snuo
}

// ClearCommit clears the value of the "commit" field.
func (snuo *SourceNameUpdateOne) ClearCommit() *SourceNameUpdateOne {
	snuo.mutation.ClearCommit()
	return snuo
}

// SetTag sets the "tag" field.
func (snuo *SourceNameUpdateOne) SetTag(s string) *SourceNameUpdateOne {
	snuo.mutation.SetTag(s)
	return snuo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (snuo *SourceNameUpdateOne) SetNillableTag(s *string) *SourceNameUpdateOne {
	if s != nil {
		snuo.SetTag(*s)
	}
	return snuo
}

// ClearTag clears the value of the "tag" field.
func (snuo *SourceNameUpdateOne) ClearTag() *SourceNameUpdateOne {
	snuo.mutation.ClearTag()
	return snuo
}

// SetNamespaceID sets the "namespace_id" field.
func (snuo *SourceNameUpdateOne) SetNamespaceID(i int) *SourceNameUpdateOne {
	snuo.mutation.SetNamespaceID(i)
	return snuo
}

// SetNamespace sets the "namespace" edge to the SourceNamespace entity.
func (snuo *SourceNameUpdateOne) SetNamespace(s *SourceNamespace) *SourceNameUpdateOne {
	return snuo.SetNamespaceID(s.ID)
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (snuo *SourceNameUpdateOne) AddOccurrenceIDs(ids ...int) *SourceNameUpdateOne {
	snuo.mutation.AddOccurrenceIDs(ids...)
	return snuo
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (snuo *SourceNameUpdateOne) AddOccurrences(o ...*Occurrence) *SourceNameUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snuo.AddOccurrenceIDs(ids...)
}

// Mutation returns the SourceNameMutation object of the builder.
func (snuo *SourceNameUpdateOne) Mutation() *SourceNameMutation {
	return snuo.mutation
}

// ClearNamespace clears the "namespace" edge to the SourceNamespace entity.
func (snuo *SourceNameUpdateOne) ClearNamespace() *SourceNameUpdateOne {
	snuo.mutation.ClearNamespace()
	return snuo
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (snuo *SourceNameUpdateOne) ClearOccurrences() *SourceNameUpdateOne {
	snuo.mutation.ClearOccurrences()
	return snuo
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (snuo *SourceNameUpdateOne) RemoveOccurrenceIDs(ids ...int) *SourceNameUpdateOne {
	snuo.mutation.RemoveOccurrenceIDs(ids...)
	return snuo
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (snuo *SourceNameUpdateOne) RemoveOccurrences(o ...*Occurrence) *SourceNameUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return snuo.RemoveOccurrenceIDs(ids...)
}

// Where appends a list predicates to the SourceNameUpdate builder.
func (snuo *SourceNameUpdateOne) Where(ps ...predicate.SourceName) *SourceNameUpdateOne {
	snuo.mutation.Where(ps...)
	return snuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (snuo *SourceNameUpdateOne) Select(field string, fields ...string) *SourceNameUpdateOne {
	snuo.fields = append([]string{field}, fields...)
	return snuo
}

// Save executes the query and returns the updated SourceName entity.
func (snuo *SourceNameUpdateOne) Save(ctx context.Context) (*SourceName, error) {
	return withHooks(ctx, snuo.gremlinSave, snuo.mutation, snuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snuo *SourceNameUpdateOne) SaveX(ctx context.Context) *SourceName {
	node, err := snuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (snuo *SourceNameUpdateOne) Exec(ctx context.Context) error {
	_, err := snuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snuo *SourceNameUpdateOne) ExecX(ctx context.Context) {
	if err := snuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snuo *SourceNameUpdateOne) check() error {
	if _, ok := snuo.mutation.NamespaceID(); snuo.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SourceName.namespace"`)
	}
	return nil
}

func (snuo *SourceNameUpdateOne) gremlinSave(ctx context.Context) (*SourceName, error) {
	if err := snuo.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := snuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SourceName.id" for update`)}
	}
	query, bindings := snuo.gremlin(id).Query()
	if err := snuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	snuo.mutation.done = true
	sn := &SourceName{config: snuo.config}
	if err := sn.FromResponse(res); err != nil {
		return nil, err
	}
	return sn, nil
}

func (snuo *SourceNameUpdateOne) gremlin(id int) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := snuo.mutation.Name(); ok {
		v.Property(dsl.Single, sourcename.FieldName, value)
	}
	if value, ok := snuo.mutation.Commit(); ok {
		v.Property(dsl.Single, sourcename.FieldCommit, value)
	}
	if value, ok := snuo.mutation.Tag(); ok {
		v.Property(dsl.Single, sourcename.FieldTag, value)
	}
	var properties []any
	if snuo.mutation.CommitCleared() {
		properties = append(properties, sourcename.FieldCommit)
	}
	if snuo.mutation.TagCleared() {
		properties = append(properties, sourcename.FieldTag)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if snuo.mutation.NamespaceCleared() {
		tr := rv.Clone().OutE(sourcename.NamespaceLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range snuo.mutation.NamespaceIDs() {
		v.AddE(sourcename.NamespaceLabel).To(g.V(id)).OutV()
	}
	for _, id := range snuo.mutation.RemovedOccurrencesIDs() {
		tr := rv.Clone().InE(occurrence.SourceLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range snuo.mutation.OccurrencesIDs() {
		v.AddE(occurrence.SourceLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(occurrence.SourceLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(sourcename.Label, occurrence.SourceLabel, id)),
		})
	}
	if len(snuo.fields) > 0 {
		fields := make([]any, 0, len(snuo.fields)+1)
		fields = append(fields, true)
		for _, f := range snuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
