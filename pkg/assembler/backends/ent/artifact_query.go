// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/slsaattestation"
)

// ArtifactQuery is the builder for querying Artifact entities.
type ArtifactQuery struct {
	config
	ctx              *QueryContext
	order            []artifact.OrderOption
	inters           []Interceptor
	predicates       []predicate.Artifact
	withOccurrences  *OccurrenceQuery
	withSbom         *BillOfMaterialsQuery
	withAttestations *SLSAAttestationQuery
	withSame         *HashEqualQuery
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Where adds a new predicate for the ArtifactQuery builder.
func (aq *ArtifactQuery) Where(ps ...predicate.Artifact) *ArtifactQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit the number of records to be returned by this query.
func (aq *ArtifactQuery) Limit(limit int) *ArtifactQuery {
	aq.ctx.Limit = &limit
	return aq
}

// Offset to start from.
func (aq *ArtifactQuery) Offset(offset int) *ArtifactQuery {
	aq.ctx.Offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *ArtifactQuery) Unique(unique bool) *ArtifactQuery {
	aq.ctx.Unique = &unique
	return aq
}

// Order specifies how the records should be ordered.
func (aq *ArtifactQuery) Order(o ...artifact.OrderOption) *ArtifactQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryOccurrences chains the current query on the "occurrences" edge.
func (aq *ArtifactQuery) QueryOccurrences() *OccurrenceQuery {
	query := (&OccurrenceClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := aq.gremlinQuery(ctx)
		fromU = gremlin.InE(occurrence.ArtifactLabel).OutV()
		return fromU, nil
	}
	return query
}

// QuerySbom chains the current query on the "sbom" edge.
func (aq *ArtifactQuery) QuerySbom() *BillOfMaterialsQuery {
	query := (&BillOfMaterialsClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := aq.gremlinQuery(ctx)
		fromU = gremlin.InE(billofmaterials.ArtifactLabel).OutV()
		return fromU, nil
	}
	return query
}

// QueryAttestations chains the current query on the "attestations" edge.
func (aq *ArtifactQuery) QueryAttestations() *SLSAAttestationQuery {
	query := (&SLSAAttestationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := aq.gremlinQuery(ctx)
		fromU = gremlin.InE(slsaattestation.BuiltFromLabel).OutV()
		return fromU, nil
	}
	return query
}

// QuerySame chains the current query on the "same" edge.
func (aq *ArtifactQuery) QuerySame() *HashEqualQuery {
	query := (&HashEqualClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := aq.gremlinQuery(ctx)
		fromU = gremlin.InE(hashequal.ArtifactsLabel).OutV()
		return fromU, nil
	}
	return query
}

// First returns the first Artifact entity from the query.
// Returns a *NotFoundError when no Artifact was found.
func (aq *ArtifactQuery) First(ctx context.Context) (*Artifact, error) {
	nodes, err := aq.Limit(1).All(setContextOp(ctx, aq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{artifact.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *ArtifactQuery) FirstX(ctx context.Context) *Artifact {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Artifact ID from the query.
// Returns a *NotFoundError when no Artifact ID was found.
func (aq *ArtifactQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(setContextOp(ctx, aq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{artifact.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *ArtifactQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Artifact entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Artifact entity is found.
// Returns a *NotFoundError when no Artifact entities are found.
func (aq *ArtifactQuery) Only(ctx context.Context) (*Artifact, error) {
	nodes, err := aq.Limit(2).All(setContextOp(ctx, aq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{artifact.Label}
	default:
		return nil, &NotSingularError{artifact.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *ArtifactQuery) OnlyX(ctx context.Context) *Artifact {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Artifact ID in the query.
// Returns a *NotSingularError when more than one Artifact ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *ArtifactQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(setContextOp(ctx, aq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{artifact.Label}
	default:
		err = &NotSingularError{artifact.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *ArtifactQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Artifacts.
func (aq *ArtifactQuery) All(ctx context.Context) ([]*Artifact, error) {
	ctx = setContextOp(ctx, aq.ctx, "All")
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Artifact, *ArtifactQuery]()
	return withInterceptors[[]*Artifact](ctx, aq, qr, aq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aq *ArtifactQuery) AllX(ctx context.Context) []*Artifact {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Artifact IDs.
func (aq *ArtifactQuery) IDs(ctx context.Context) (ids []int, err error) {
	if aq.ctx.Unique == nil && aq.path != nil {
		aq.Unique(true)
	}
	ctx = setContextOp(ctx, aq.ctx, "IDs")
	if err = aq.Select(artifact.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *ArtifactQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *ArtifactQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, "Count")
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aq, querierCount[*ArtifactQuery](), aq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aq *ArtifactQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *ArtifactQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aq.ctx, "Exist")
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *ArtifactQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ArtifactQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *ArtifactQuery) Clone() *ArtifactQuery {
	if aq == nil {
		return nil
	}
	return &ArtifactQuery{
		config:           aq.config,
		ctx:              aq.ctx.Clone(),
		order:            append([]artifact.OrderOption{}, aq.order...),
		inters:           append([]Interceptor{}, aq.inters...),
		predicates:       append([]predicate.Artifact{}, aq.predicates...),
		withOccurrences:  aq.withOccurrences.Clone(),
		withSbom:         aq.withSbom.Clone(),
		withAttestations: aq.withAttestations.Clone(),
		withSame:         aq.withSame.Clone(),
		// clone intermediate query.
		gremlin: aq.gremlin.Clone(),
		path:    aq.path,
	}
}

// WithOccurrences tells the query-builder to eager-load the nodes that are connected to
// the "occurrences" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithOccurrences(opts ...func(*OccurrenceQuery)) *ArtifactQuery {
	query := (&OccurrenceClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withOccurrences = query
	return aq
}

// WithSbom tells the query-builder to eager-load the nodes that are connected to
// the "sbom" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithSbom(opts ...func(*BillOfMaterialsQuery)) *ArtifactQuery {
	query := (&BillOfMaterialsClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withSbom = query
	return aq
}

// WithAttestations tells the query-builder to eager-load the nodes that are connected to
// the "attestations" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithAttestations(opts ...func(*SLSAAttestationQuery)) *ArtifactQuery {
	query := (&SLSAAttestationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAttestations = query
	return aq
}

// WithSame tells the query-builder to eager-load the nodes that are connected to
// the "same" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtifactQuery) WithSame(opts ...func(*HashEqualQuery)) *ArtifactQuery {
	query := (&HashEqualClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withSame = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Algorithm string `json:"algorithm,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Artifact.Query().
//		GroupBy(artifact.FieldAlgorithm).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aq *ArtifactQuery) GroupBy(field string, fields ...string) *ArtifactGroupBy {
	aq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ArtifactGroupBy{build: aq}
	grbuild.flds = &aq.ctx.Fields
	grbuild.label = artifact.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Algorithm string `json:"algorithm,omitempty"`
//	}
//
//	client.Artifact.Query().
//		Select(artifact.FieldAlgorithm).
//		Scan(ctx, &v)
func (aq *ArtifactQuery) Select(fields ...string) *ArtifactSelect {
	aq.ctx.Fields = append(aq.ctx.Fields, fields...)
	sbuild := &ArtifactSelect{ArtifactQuery: aq}
	sbuild.label = artifact.Label
	sbuild.flds, sbuild.scan = &aq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ArtifactSelect configured with the given aggregations.
func (aq *ArtifactQuery) Aggregate(fns ...AggregateFunc) *ArtifactSelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *ArtifactQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aq); err != nil {
				return err
			}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.gremlin = prev
	}
	return nil
}

func (aq *ArtifactQuery) gremlinAll(ctx context.Context, hooks ...queryHook) ([]*Artifact, error) {
	res := &gremlin.Response{}
	traversal := aq.gremlinQuery(ctx)
	if len(aq.ctx.Fields) > 0 {
		fields := make([]any, len(aq.ctx.Fields))
		for i, f := range aq.ctx.Fields {
			fields[i] = f
		}
		traversal.ValueMap(fields...)
	} else {
		traversal.ValueMap(true)
	}
	query, bindings := traversal.Query()
	if err := aq.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	var as Artifacts
	if err := as.FromResponse(res); err != nil {
		return nil, err
	}
	for i := range as {
		as[i].config = aq.config
	}
	return as, nil
}

func (aq *ArtifactQuery) gremlinCount(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := aq.gremlinQuery(ctx).Count().Query()
	if err := aq.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (aq *ArtifactQuery) gremlinQuery(context.Context) *dsl.Traversal {
	v := g.V().HasLabel(artifact.Label)
	if aq.gremlin != nil {
		v = aq.gremlin.Clone()
	}
	for _, p := range aq.predicates {
		p(v)
	}
	if len(aq.order) > 0 {
		v.Order()
		for _, p := range aq.order {
			p(v)
		}
	}
	switch limit, offset := aq.ctx.Limit, aq.ctx.Offset; {
	case limit != nil && offset != nil:
		v.Range(*offset, *offset+*limit)
	case offset != nil:
		v.Range(*offset, math.MaxInt32)
	case limit != nil:
		v.Limit(*limit)
	}
	if unique := aq.ctx.Unique; unique == nil || *unique {
		v.Dedup()
	}
	return v
}

// ArtifactGroupBy is the group-by builder for Artifact entities.
type ArtifactGroupBy struct {
	selector
	build *ArtifactQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *ArtifactGroupBy) Aggregate(fns ...AggregateFunc) *ArtifactGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *ArtifactGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, agb.build.ctx, "GroupBy")
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ArtifactQuery, *ArtifactGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *ArtifactGroupBy) gremlinScan(ctx context.Context, root *ArtifactQuery, v any) error {
	var (
		trs   []any
		names []any
	)
	for _, fn := range agb.fns {
		name, tr := fn("p", "")
		trs = append(trs, tr)
		names = append(names, name)
	}
	for _, f := range *agb.flds {
		names = append(names, f)
		trs = append(trs, __.As("p").Unfold().Values(f).As(f))
	}
	query, bindings := root.gremlinQuery(ctx).Group().
		By(__.Values(*agb.flds...).Fold()).
		By(__.Fold().Match(trs...).Select(names...)).
		Select(dsl.Values).
		Next().
		Query()
	res := &gremlin.Response{}
	if err := agb.build.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(*agb.flds)+len(agb.fns) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

// ArtifactSelect is the builder for selecting fields of Artifact entities.
type ArtifactSelect struct {
	*ArtifactQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *ArtifactSelect) Aggregate(fns ...AggregateFunc) *ArtifactSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *ArtifactSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, as.ctx, "Select")
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ArtifactQuery, *ArtifactSelect](ctx, as.ArtifactQuery, as, as.inters, v)
}

func (as *ArtifactSelect) gremlinScan(ctx context.Context, root *ArtifactQuery, v any) error {
	var (
		res       = &gremlin.Response{}
		traversal = root.gremlinQuery(ctx)
	)
	if fields := as.ctx.Fields; len(fields) == 1 {
		if fields[0] != artifact.FieldID {
			traversal = traversal.Values(fields...)
		} else {
			traversal = traversal.ID()
		}
	} else {
		fields := make([]any, len(as.ctx.Fields))
		for i, f := range as.ctx.Fields {
			fields[i] = f
		}
		traversal = traversal.ValueMap(fields...)
	}
	query, bindings := traversal.Query()
	if err := as.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(root.ctx.Fields) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}
