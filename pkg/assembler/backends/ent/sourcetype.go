// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
)

// SourceType is the model entity for the SourceType schema.
type SourceType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SourceTypeQuery when eager-loading is set.
	Edges SourceTypeEdges `json:"edges"`
}

// SourceTypeEdges holds the relations/edges for other nodes in the graph.
type SourceTypeEdges struct {
	// Namespaces holds the value of the namespaces edge.
	Namespaces []*SourceNamespace `json:"namespaces,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NamespacesOrErr returns the Namespaces value or an error if the edge
// was not loaded in eager-loading.
func (e SourceTypeEdges) NamespacesOrErr() ([]*SourceNamespace, error) {
	if e.loadedTypes[0] {
		return e.Namespaces, nil
	}
	return nil, &NotLoadedError{edge: "namespaces"}
}

// FromResponse scans the gremlin response data into SourceType.
func (st *SourceType) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanst struct {
		ID   int    `json:"id,omitempty"`
		Type string `json:"type,omitempty"`
	}
	if err := vmap.Decode(&scanst); err != nil {
		return err
	}
	st.ID = scanst.ID
	st.Type = scanst.Type
	return nil
}

// QueryNamespaces queries the "namespaces" edge of the SourceType entity.
func (st *SourceType) QueryNamespaces() *SourceNamespaceQuery {
	return NewSourceTypeClient(st.config).QueryNamespaces(st)
}

// Update returns a builder for updating this SourceType.
// Note that you need to call SourceType.Unwrap() before calling this method if this SourceType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SourceType) Update() *SourceTypeUpdateOne {
	return NewSourceTypeClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SourceType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SourceType) Unwrap() *SourceType {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SourceType is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SourceType) String() string {
	var builder strings.Builder
	builder.WriteString("SourceType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("type=")
	builder.WriteString(st.Type)
	builder.WriteByte(')')
	return builder.String()
}

// SourceTypes is a parsable slice of SourceType.
type SourceTypes []*SourceType

// FromResponse scans the gremlin response data into SourceTypes.
func (st *SourceTypes) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanst []struct {
		ID   int    `json:"id,omitempty"`
		Type string `json:"type,omitempty"`
	}
	if err := vmap.Decode(&scanst); err != nil {
		return err
	}
	for _, v := range scanst {
		node := &SourceType{ID: v.ID}
		node.Type = v.Type
		*st = append(*st, node)
	}
	return nil
}
