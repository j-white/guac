// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certification"
)

// CertificationCreate is the builder for creating a Certification entity.
type CertificationCreate struct {
	config
	mutation *CertificationMutation
	hooks    []Hook
}

// SetSourceID sets the "source_id" field.
func (cc *CertificationCreate) SetSourceID(i int) *CertificationCreate {
	cc.mutation.SetSourceID(i)
	return cc
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableSourceID(i *int) *CertificationCreate {
	if i != nil {
		cc.SetSourceID(*i)
	}
	return cc
}

// SetPackageVersionID sets the "package_version_id" field.
func (cc *CertificationCreate) SetPackageVersionID(i int) *CertificationCreate {
	cc.mutation.SetPackageVersionID(i)
	return cc
}

// SetNillablePackageVersionID sets the "package_version_id" field if the given value is not nil.
func (cc *CertificationCreate) SetNillablePackageVersionID(i *int) *CertificationCreate {
	if i != nil {
		cc.SetPackageVersionID(*i)
	}
	return cc
}

// SetPackageNameID sets the "package_name_id" field.
func (cc *CertificationCreate) SetPackageNameID(i int) *CertificationCreate {
	cc.mutation.SetPackageNameID(i)
	return cc
}

// SetNillablePackageNameID sets the "package_name_id" field if the given value is not nil.
func (cc *CertificationCreate) SetNillablePackageNameID(i *int) *CertificationCreate {
	if i != nil {
		cc.SetPackageNameID(*i)
	}
	return cc
}

// SetArtifactID sets the "artifact_id" field.
func (cc *CertificationCreate) SetArtifactID(i int) *CertificationCreate {
	cc.mutation.SetArtifactID(i)
	return cc
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableArtifactID(i *int) *CertificationCreate {
	if i != nil {
		cc.SetArtifactID(*i)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *CertificationCreate) SetType(c certification.Type) *CertificationCreate {
	cc.mutation.SetType(c)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableType(c *certification.Type) *CertificationCreate {
	if c != nil {
		cc.SetType(*c)
	}
	return cc
}

// SetJustification sets the "justification" field.
func (cc *CertificationCreate) SetJustification(s string) *CertificationCreate {
	cc.mutation.SetJustification(s)
	return cc
}

// SetOrigin sets the "origin" field.
func (cc *CertificationCreate) SetOrigin(s string) *CertificationCreate {
	cc.mutation.SetOrigin(s)
	return cc
}

// SetCollector sets the "collector" field.
func (cc *CertificationCreate) SetCollector(s string) *CertificationCreate {
	cc.mutation.SetCollector(s)
	return cc
}

// SetSource sets the "source" edge to the SourceName entity.
func (cc *CertificationCreate) SetSource(s *SourceName) *CertificationCreate {
	return cc.SetSourceID(s.ID)
}

// SetPackageVersion sets the "package_version" edge to the PackageVersion entity.
func (cc *CertificationCreate) SetPackageVersion(p *PackageVersion) *CertificationCreate {
	return cc.SetPackageVersionID(p.ID)
}

// SetAllVersionsID sets the "all_versions" edge to the PackageName entity by ID.
func (cc *CertificationCreate) SetAllVersionsID(id int) *CertificationCreate {
	cc.mutation.SetAllVersionsID(id)
	return cc
}

// SetNillableAllVersionsID sets the "all_versions" edge to the PackageName entity by ID if the given value is not nil.
func (cc *CertificationCreate) SetNillableAllVersionsID(id *int) *CertificationCreate {
	if id != nil {
		cc = cc.SetAllVersionsID(*id)
	}
	return cc
}

// SetAllVersions sets the "all_versions" edge to the PackageName entity.
func (cc *CertificationCreate) SetAllVersions(p *PackageName) *CertificationCreate {
	return cc.SetAllVersionsID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (cc *CertificationCreate) SetArtifact(a *Artifact) *CertificationCreate {
	return cc.SetArtifactID(a.ID)
}

// Mutation returns the CertificationMutation object of the builder.
func (cc *CertificationCreate) Mutation() *CertificationMutation {
	return cc.mutation
}

// Save creates the Certification in the database.
func (cc *CertificationCreate) Save(ctx context.Context) (*Certification, error) {
	cc.defaults()
	return withHooks(ctx, cc.gremlinSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CertificationCreate) SaveX(ctx context.Context) *Certification {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CertificationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CertificationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CertificationCreate) defaults() {
	if _, ok := cc.mutation.GetType(); !ok {
		v := certification.DefaultType
		cc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CertificationCreate) check() error {
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Certification.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := certification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Certification.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "Certification.justification"`)}
	}
	if _, ok := cc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "Certification.origin"`)}
	}
	if _, ok := cc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "Certification.collector"`)}
	}
	return nil
}

func (cc *CertificationCreate) gremlinSave(ctx context.Context) (*Certification, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := cc.gremlin().Query()
	if err := cc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &Certification{config: cc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	cc.mutation.id = &rnode.ID
	cc.mutation.done = true
	return rnode, nil
}

func (cc *CertificationCreate) gremlin() *dsl.Traversal {
	v := g.AddV(certification.Label)
	if value, ok := cc.mutation.GetType(); ok {
		v.Property(dsl.Single, certification.FieldType, value)
	}
	if value, ok := cc.mutation.Justification(); ok {
		v.Property(dsl.Single, certification.FieldJustification, value)
	}
	if value, ok := cc.mutation.Origin(); ok {
		v.Property(dsl.Single, certification.FieldOrigin, value)
	}
	if value, ok := cc.mutation.Collector(); ok {
		v.Property(dsl.Single, certification.FieldCollector, value)
	}
	for _, id := range cc.mutation.SourceIDs() {
		v.AddE(certification.SourceLabel).To(g.V(id)).OutV()
	}
	for _, id := range cc.mutation.PackageVersionIDs() {
		v.AddE(certification.PackageVersionLabel).To(g.V(id)).OutV()
	}
	for _, id := range cc.mutation.AllVersionsIDs() {
		v.AddE(certification.AllVersionsLabel).To(g.V(id)).OutV()
	}
	for _, id := range cc.mutation.ArtifactIDs() {
		v.AddE(certification.ArtifactLabel).To(g.V(id)).OutV()
	}
	return v.ValueMap(true)
}

// CertificationCreateBulk is the builder for creating many Certification entities in bulk.
type CertificationCreateBulk struct {
	config
	builders []*CertificationCreate
}
