// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
)

// SecurityAdvisory is the model entity for the SecurityAdvisory schema.
type SecurityAdvisory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GHSA represents GitHub security advisories
	GhsaID *string `json:"ghsa_id,omitempty"`
	// CVE represents Common Vulnerabilities and Exposures
	CveID *string `json:"cve_id,omitempty"`
	// CVE year
	CveYear *int `json:"cve_year,omitempty"`
	// OSV represents Open Source Vulnerabilities
	OsvID *string `json:"osv_id,omitempty"`
}

// FromResponse scans the gremlin response data into SecurityAdvisory.
func (sa *SecurityAdvisory) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scansa struct {
		ID      int     `json:"id,omitempty"`
		GhsaID  *string `json:"ghsa_id,omitempty"`
		CveID   *string `json:"cve_id,omitempty"`
		CveYear *int    `json:"cve_year,omitempty"`
		OsvID   *string `json:"osv_id,omitempty"`
	}
	if err := vmap.Decode(&scansa); err != nil {
		return err
	}
	sa.ID = scansa.ID
	sa.GhsaID = scansa.GhsaID
	sa.CveID = scansa.CveID
	sa.CveYear = scansa.CveYear
	sa.OsvID = scansa.OsvID
	return nil
}

// Update returns a builder for updating this SecurityAdvisory.
// Note that you need to call SecurityAdvisory.Unwrap() before calling this method if this SecurityAdvisory
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SecurityAdvisory) Update() *SecurityAdvisoryUpdateOne {
	return NewSecurityAdvisoryClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the SecurityAdvisory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SecurityAdvisory) Unwrap() *SecurityAdvisory {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SecurityAdvisory is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SecurityAdvisory) String() string {
	var builder strings.Builder
	builder.WriteString("SecurityAdvisory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	if v := sa.GhsaID; v != nil {
		builder.WriteString("ghsa_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sa.CveID; v != nil {
		builder.WriteString("cve_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sa.CveYear; v != nil {
		builder.WriteString("cve_year=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sa.OsvID; v != nil {
		builder.WriteString("osv_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// SecurityAdvisories is a parsable slice of SecurityAdvisory.
type SecurityAdvisories []*SecurityAdvisory

// FromResponse scans the gremlin response data into SecurityAdvisories.
func (sa *SecurityAdvisories) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scansa []struct {
		ID      int     `json:"id,omitempty"`
		GhsaID  *string `json:"ghsa_id,omitempty"`
		CveID   *string `json:"cve_id,omitempty"`
		CveYear *int    `json:"cve_year,omitempty"`
		OsvID   *string `json:"osv_id,omitempty"`
	}
	if err := vmap.Decode(&scansa); err != nil {
		return err
	}
	for _, v := range scansa {
		node := &SecurityAdvisory{ID: v.ID}
		node.GhsaID = v.GhsaID
		node.CveID = v.CveID
		node.CveYear = v.CveYear
		node.OsvID = v.OsvID
		*sa = append(*sa, node)
	}
	return nil
}
