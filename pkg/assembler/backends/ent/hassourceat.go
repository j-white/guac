// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
)

// HasSourceAt is the model entity for the HasSourceAt schema.
type HasSourceAt struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageVersionID holds the value of the "package_version_id" field.
	PackageVersionID *int `json:"package_version_id,omitempty"`
	// PackageNameID holds the value of the "package_name_id" field.
	PackageNameID *int `json:"package_name_id,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID int `json:"source_id,omitempty"`
	// KnownSince holds the value of the "known_since" field.
	KnownSince time.Time `json:"known_since,omitempty"`
	// Justification holds the value of the "justification" field.
	Justification string `json:"justification,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HasSourceAtQuery when eager-loading is set.
	Edges HasSourceAtEdges `json:"edges"`
}

// HasSourceAtEdges holds the relations/edges for other nodes in the graph.
type HasSourceAtEdges struct {
	// PackageVersion holds the value of the package_version edge.
	PackageVersion *PackageVersion `json:"package_version,omitempty"`
	// AllVersions holds the value of the all_versions edge.
	AllVersions *PackageName `json:"all_versions,omitempty"`
	// Source holds the value of the source edge.
	Source *SourceName `json:"source,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PackageVersionOrErr returns the PackageVersion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HasSourceAtEdges) PackageVersionOrErr() (*PackageVersion, error) {
	if e.loadedTypes[0] {
		if e.PackageVersion == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.PackageVersion, nil
	}
	return nil, &NotLoadedError{edge: "package_version"}
}

// AllVersionsOrErr returns the AllVersions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HasSourceAtEdges) AllVersionsOrErr() (*PackageName, error) {
	if e.loadedTypes[1] {
		if e.AllVersions == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packagename.Label}
		}
		return e.AllVersions, nil
	}
	return nil, &NotLoadedError{edge: "all_versions"}
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HasSourceAtEdges) SourceOrErr() (*SourceName, error) {
	if e.loadedTypes[2] {
		if e.Source == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sourcename.Label}
		}
		return e.Source, nil
	}
	return nil, &NotLoadedError{edge: "source"}
}

// FromResponse scans the gremlin response data into HasSourceAt.
func (hsa *HasSourceAt) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanhsa struct {
		ID               int    `json:"id,omitempty"`
		PackageVersionID *int   `json:"package_version_id,omitempty"`
		PackageNameID    *int   `json:"package_name_id,omitempty"`
		SourceID         int    `json:"source_id,omitempty"`
		KnownSince       int64  `json:"known_since,omitempty"`
		Justification    string `json:"justification,omitempty"`
		Origin           string `json:"origin,omitempty"`
		Collector        string `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scanhsa); err != nil {
		return err
	}
	hsa.ID = scanhsa.ID
	hsa.PackageVersionID = scanhsa.PackageVersionID
	hsa.PackageNameID = scanhsa.PackageNameID
	hsa.SourceID = scanhsa.SourceID
	hsa.KnownSince = time.Unix(0, scanhsa.KnownSince)
	hsa.Justification = scanhsa.Justification
	hsa.Origin = scanhsa.Origin
	hsa.Collector = scanhsa.Collector
	return nil
}

// QueryPackageVersion queries the "package_version" edge of the HasSourceAt entity.
func (hsa *HasSourceAt) QueryPackageVersion() *PackageVersionQuery {
	return NewHasSourceAtClient(hsa.config).QueryPackageVersion(hsa)
}

// QueryAllVersions queries the "all_versions" edge of the HasSourceAt entity.
func (hsa *HasSourceAt) QueryAllVersions() *PackageNameQuery {
	return NewHasSourceAtClient(hsa.config).QueryAllVersions(hsa)
}

// QuerySource queries the "source" edge of the HasSourceAt entity.
func (hsa *HasSourceAt) QuerySource() *SourceNameQuery {
	return NewHasSourceAtClient(hsa.config).QuerySource(hsa)
}

// Update returns a builder for updating this HasSourceAt.
// Note that you need to call HasSourceAt.Unwrap() before calling this method if this HasSourceAt
// was returned from a transaction, and the transaction was committed or rolled back.
func (hsa *HasSourceAt) Update() *HasSourceAtUpdateOne {
	return NewHasSourceAtClient(hsa.config).UpdateOne(hsa)
}

// Unwrap unwraps the HasSourceAt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hsa *HasSourceAt) Unwrap() *HasSourceAt {
	_tx, ok := hsa.config.driver.(*txDriver)
	if !ok {
		panic("ent: HasSourceAt is not a transactional entity")
	}
	hsa.config.driver = _tx.drv
	return hsa
}

// String implements the fmt.Stringer.
func (hsa *HasSourceAt) String() string {
	var builder strings.Builder
	builder.WriteString("HasSourceAt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hsa.ID))
	if v := hsa.PackageVersionID; v != nil {
		builder.WriteString("package_version_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := hsa.PackageNameID; v != nil {
		builder.WriteString("package_name_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("source_id=")
	builder.WriteString(fmt.Sprintf("%v", hsa.SourceID))
	builder.WriteString(", ")
	builder.WriteString("known_since=")
	builder.WriteString(hsa.KnownSince.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(hsa.Justification)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(hsa.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(hsa.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// HasSourceAts is a parsable slice of HasSourceAt.
type HasSourceAts []*HasSourceAt

// FromResponse scans the gremlin response data into HasSourceAts.
func (hsa *HasSourceAts) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanhsa []struct {
		ID               int    `json:"id,omitempty"`
		PackageVersionID *int   `json:"package_version_id,omitempty"`
		PackageNameID    *int   `json:"package_name_id,omitempty"`
		SourceID         int    `json:"source_id,omitempty"`
		KnownSince       int64  `json:"known_since,omitempty"`
		Justification    string `json:"justification,omitempty"`
		Origin           string `json:"origin,omitempty"`
		Collector        string `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scanhsa); err != nil {
		return err
	}
	for _, v := range scanhsa {
		node := &HasSourceAt{ID: v.ID}
		node.PackageVersionID = v.PackageVersionID
		node.PackageNameID = v.PackageNameID
		node.SourceID = v.SourceID
		node.KnownSince = time.Unix(0, v.KnownSince)
		node.Justification = v.Justification
		node.Origin = v.Origin
		node.Collector = v.Collector
		*hsa = append(*hsa, node)
	}
	return nil
}
