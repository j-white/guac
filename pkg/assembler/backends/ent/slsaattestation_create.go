// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/slsaattestation"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// SLSAAttestationCreate is the builder for creating a SLSAAttestation entity.
type SLSAAttestationCreate struct {
	config
	mutation *SLSAAttestationMutation
	hooks    []Hook
}

// SetBuildType sets the "build_type" field.
func (sac *SLSAAttestationCreate) SetBuildType(s string) *SLSAAttestationCreate {
	sac.mutation.SetBuildType(s)
	return sac
}

// SetBuiltByID sets the "built_by_id" field.
func (sac *SLSAAttestationCreate) SetBuiltByID(i int) *SLSAAttestationCreate {
	sac.mutation.SetBuiltByID(i)
	return sac
}

// SetSubjectID sets the "subject_id" field.
func (sac *SLSAAttestationCreate) SetSubjectID(i int) *SLSAAttestationCreate {
	sac.mutation.SetSubjectID(i)
	return sac
}

// SetSlsaPredicate sets the "slsa_predicate" field.
func (sac *SLSAAttestationCreate) SetSlsaPredicate(mp []*model.SLSAPredicate) *SLSAAttestationCreate {
	sac.mutation.SetSlsaPredicate(mp)
	return sac
}

// SetSlsaVersion sets the "slsa_version" field.
func (sac *SLSAAttestationCreate) SetSlsaVersion(s string) *SLSAAttestationCreate {
	sac.mutation.SetSlsaVersion(s)
	return sac
}

// SetStartedOn sets the "started_on" field.
func (sac *SLSAAttestationCreate) SetStartedOn(t time.Time) *SLSAAttestationCreate {
	sac.mutation.SetStartedOn(t)
	return sac
}

// SetNillableStartedOn sets the "started_on" field if the given value is not nil.
func (sac *SLSAAttestationCreate) SetNillableStartedOn(t *time.Time) *SLSAAttestationCreate {
	if t != nil {
		sac.SetStartedOn(*t)
	}
	return sac
}

// SetFinishedOn sets the "finished_on" field.
func (sac *SLSAAttestationCreate) SetFinishedOn(t time.Time) *SLSAAttestationCreate {
	sac.mutation.SetFinishedOn(t)
	return sac
}

// SetNillableFinishedOn sets the "finished_on" field if the given value is not nil.
func (sac *SLSAAttestationCreate) SetNillableFinishedOn(t *time.Time) *SLSAAttestationCreate {
	if t != nil {
		sac.SetFinishedOn(*t)
	}
	return sac
}

// SetOrigin sets the "origin" field.
func (sac *SLSAAttestationCreate) SetOrigin(s string) *SLSAAttestationCreate {
	sac.mutation.SetOrigin(s)
	return sac
}

// SetCollector sets the "collector" field.
func (sac *SLSAAttestationCreate) SetCollector(s string) *SLSAAttestationCreate {
	sac.mutation.SetCollector(s)
	return sac
}

// SetBuiltFromHash sets the "built_from_hash" field.
func (sac *SLSAAttestationCreate) SetBuiltFromHash(s string) *SLSAAttestationCreate {
	sac.mutation.SetBuiltFromHash(s)
	return sac
}

// AddBuiltFromIDs adds the "built_from" edge to the Artifact entity by IDs.
func (sac *SLSAAttestationCreate) AddBuiltFromIDs(ids ...int) *SLSAAttestationCreate {
	sac.mutation.AddBuiltFromIDs(ids...)
	return sac
}

// AddBuiltFrom adds the "built_from" edges to the Artifact entity.
func (sac *SLSAAttestationCreate) AddBuiltFrom(a ...*Artifact) *SLSAAttestationCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sac.AddBuiltFromIDs(ids...)
}

// SetBuiltBy sets the "built_by" edge to the Builder entity.
func (sac *SLSAAttestationCreate) SetBuiltBy(b *Builder) *SLSAAttestationCreate {
	return sac.SetBuiltByID(b.ID)
}

// SetSubject sets the "subject" edge to the Artifact entity.
func (sac *SLSAAttestationCreate) SetSubject(a *Artifact) *SLSAAttestationCreate {
	return sac.SetSubjectID(a.ID)
}

// Mutation returns the SLSAAttestationMutation object of the builder.
func (sac *SLSAAttestationCreate) Mutation() *SLSAAttestationMutation {
	return sac.mutation
}

// Save creates the SLSAAttestation in the database.
func (sac *SLSAAttestationCreate) Save(ctx context.Context) (*SLSAAttestation, error) {
	return withHooks(ctx, sac.gremlinSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SLSAAttestationCreate) SaveX(ctx context.Context) *SLSAAttestation {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SLSAAttestationCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SLSAAttestationCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *SLSAAttestationCreate) check() error {
	if _, ok := sac.mutation.BuildType(); !ok {
		return &ValidationError{Name: "build_type", err: errors.New(`ent: missing required field "SLSAAttestation.build_type"`)}
	}
	if _, ok := sac.mutation.BuiltByID(); !ok {
		return &ValidationError{Name: "built_by_id", err: errors.New(`ent: missing required field "SLSAAttestation.built_by_id"`)}
	}
	if _, ok := sac.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject_id", err: errors.New(`ent: missing required field "SLSAAttestation.subject_id"`)}
	}
	if _, ok := sac.mutation.SlsaVersion(); !ok {
		return &ValidationError{Name: "slsa_version", err: errors.New(`ent: missing required field "SLSAAttestation.slsa_version"`)}
	}
	if _, ok := sac.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "SLSAAttestation.origin"`)}
	}
	if _, ok := sac.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "SLSAAttestation.collector"`)}
	}
	if _, ok := sac.mutation.BuiltFromHash(); !ok {
		return &ValidationError{Name: "built_from_hash", err: errors.New(`ent: missing required field "SLSAAttestation.built_from_hash"`)}
	}
	if _, ok := sac.mutation.BuiltByID(); !ok {
		return &ValidationError{Name: "built_by", err: errors.New(`ent: missing required edge "SLSAAttestation.built_by"`)}
	}
	if _, ok := sac.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required edge "SLSAAttestation.subject"`)}
	}
	return nil
}

func (sac *SLSAAttestationCreate) gremlinSave(ctx context.Context) (*SLSAAttestation, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := sac.gremlin().Query()
	if err := sac.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &SLSAAttestation{config: sac.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	sac.mutation.id = &rnode.ID
	sac.mutation.done = true
	return rnode, nil
}

func (sac *SLSAAttestationCreate) gremlin() *dsl.Traversal {
	v := g.AddV(slsaattestation.Label)
	if value, ok := sac.mutation.BuildType(); ok {
		v.Property(dsl.Single, slsaattestation.FieldBuildType, value)
	}
	if value, ok := sac.mutation.SlsaPredicate(); ok {
		v.Property(dsl.Single, slsaattestation.FieldSlsaPredicate, value)
	}
	if value, ok := sac.mutation.SlsaVersion(); ok {
		v.Property(dsl.Single, slsaattestation.FieldSlsaVersion, value)
	}
	if value, ok := sac.mutation.StartedOn(); ok {
		v.Property(dsl.Single, slsaattestation.FieldStartedOn, value)
	}
	if value, ok := sac.mutation.FinishedOn(); ok {
		v.Property(dsl.Single, slsaattestation.FieldFinishedOn, value)
	}
	if value, ok := sac.mutation.Origin(); ok {
		v.Property(dsl.Single, slsaattestation.FieldOrigin, value)
	}
	if value, ok := sac.mutation.Collector(); ok {
		v.Property(dsl.Single, slsaattestation.FieldCollector, value)
	}
	if value, ok := sac.mutation.BuiltFromHash(); ok {
		v.Property(dsl.Single, slsaattestation.FieldBuiltFromHash, value)
	}
	for _, id := range sac.mutation.BuiltFromIDs() {
		v.AddE(slsaattestation.BuiltFromLabel).To(g.V(id)).OutV()
	}
	for _, id := range sac.mutation.BuiltByIDs() {
		v.AddE(slsaattestation.BuiltByLabel).To(g.V(id)).OutV()
	}
	for _, id := range sac.mutation.SubjectIDs() {
		v.AddE(slsaattestation.SubjectLabel).To(g.V(id)).OutV()
	}
	return v.ValueMap(true)
}

// SLSAAttestationCreateBulk is the builder for creating many SLSAAttestation entities in bulk.
type SLSAAttestationCreateBulk struct {
	config
	builders []*SLSAAttestationCreate
}
