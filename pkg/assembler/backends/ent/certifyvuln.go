// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/securityadvisory"
)

// CertifyVuln is the model entity for the CertifyVuln schema.
type CertifyVuln struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Advisory is one of OSV, GHSA, or CVE, or nil if not vulnerable
	VulnerabilityID *int `json:"vulnerability_id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID int `json:"package_id,omitempty"`
	// TimeScanned holds the value of the "time_scanned" field.
	TimeScanned time.Time `json:"time_scanned,omitempty"`
	// DbURI holds the value of the "db_uri" field.
	DbURI string `json:"db_uri,omitempty"`
	// DbVersion holds the value of the "db_version" field.
	DbVersion string `json:"db_version,omitempty"`
	// ScannerURI holds the value of the "scanner_uri" field.
	ScannerURI string `json:"scanner_uri,omitempty"`
	// ScannerVersion holds the value of the "scanner_version" field.
	ScannerVersion string `json:"scanner_version,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CertifyVulnQuery when eager-loading is set.
	Edges CertifyVulnEdges `json:"edges"`
}

// CertifyVulnEdges holds the relations/edges for other nodes in the graph.
type CertifyVulnEdges struct {
	// Vulnerability is one of OSV, GHSA, or CVE
	Vulnerability *SecurityAdvisory `json:"vulnerability,omitempty"`
	// Package holds the value of the package edge.
	Package *PackageVersion `json:"package,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VulnerabilityOrErr returns the Vulnerability value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertifyVulnEdges) VulnerabilityOrErr() (*SecurityAdvisory, error) {
	if e.loadedTypes[0] {
		if e.Vulnerability == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: securityadvisory.Label}
		}
		return e.Vulnerability, nil
	}
	return nil, &NotLoadedError{edge: "vulnerability"}
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertifyVulnEdges) PackageOrErr() (*PackageVersion, error) {
	if e.loadedTypes[1] {
		if e.Package == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.Package, nil
	}
	return nil, &NotLoadedError{edge: "package"}
}

// FromResponse scans the gremlin response data into CertifyVuln.
func (cv *CertifyVuln) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scancv struct {
		ID              int    `json:"id,omitempty"`
		VulnerabilityID *int   `json:"vulnerability_id,omitempty"`
		PackageID       int    `json:"package_id,omitempty"`
		TimeScanned     int64  `json:"time_scanned,omitempty"`
		DbURI           string `json:"db_uri,omitempty"`
		DbVersion       string `json:"db_version,omitempty"`
		ScannerURI      string `json:"scanner_uri,omitempty"`
		ScannerVersion  string `json:"scanner_version,omitempty"`
		Origin          string `json:"origin,omitempty"`
		Collector       string `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scancv); err != nil {
		return err
	}
	cv.ID = scancv.ID
	cv.VulnerabilityID = scancv.VulnerabilityID
	cv.PackageID = scancv.PackageID
	cv.TimeScanned = time.Unix(0, scancv.TimeScanned)
	cv.DbURI = scancv.DbURI
	cv.DbVersion = scancv.DbVersion
	cv.ScannerURI = scancv.ScannerURI
	cv.ScannerVersion = scancv.ScannerVersion
	cv.Origin = scancv.Origin
	cv.Collector = scancv.Collector
	return nil
}

// QueryVulnerability queries the "vulnerability" edge of the CertifyVuln entity.
func (cv *CertifyVuln) QueryVulnerability() *SecurityAdvisoryQuery {
	return NewCertifyVulnClient(cv.config).QueryVulnerability(cv)
}

// QueryPackage queries the "package" edge of the CertifyVuln entity.
func (cv *CertifyVuln) QueryPackage() *PackageVersionQuery {
	return NewCertifyVulnClient(cv.config).QueryPackage(cv)
}

// Update returns a builder for updating this CertifyVuln.
// Note that you need to call CertifyVuln.Unwrap() before calling this method if this CertifyVuln
// was returned from a transaction, and the transaction was committed or rolled back.
func (cv *CertifyVuln) Update() *CertifyVulnUpdateOne {
	return NewCertifyVulnClient(cv.config).UpdateOne(cv)
}

// Unwrap unwraps the CertifyVuln entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cv *CertifyVuln) Unwrap() *CertifyVuln {
	_tx, ok := cv.config.driver.(*txDriver)
	if !ok {
		panic("ent: CertifyVuln is not a transactional entity")
	}
	cv.config.driver = _tx.drv
	return cv
}

// String implements the fmt.Stringer.
func (cv *CertifyVuln) String() string {
	var builder strings.Builder
	builder.WriteString("CertifyVuln(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cv.ID))
	if v := cv.VulnerabilityID; v != nil {
		builder.WriteString("vulnerability_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("package_id=")
	builder.WriteString(fmt.Sprintf("%v", cv.PackageID))
	builder.WriteString(", ")
	builder.WriteString("time_scanned=")
	builder.WriteString(cv.TimeScanned.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("db_uri=")
	builder.WriteString(cv.DbURI)
	builder.WriteString(", ")
	builder.WriteString("db_version=")
	builder.WriteString(cv.DbVersion)
	builder.WriteString(", ")
	builder.WriteString("scanner_uri=")
	builder.WriteString(cv.ScannerURI)
	builder.WriteString(", ")
	builder.WriteString("scanner_version=")
	builder.WriteString(cv.ScannerVersion)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(cv.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(cv.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// CertifyVulns is a parsable slice of CertifyVuln.
type CertifyVulns []*CertifyVuln

// FromResponse scans the gremlin response data into CertifyVulns.
func (cv *CertifyVulns) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scancv []struct {
		ID              int    `json:"id,omitempty"`
		VulnerabilityID *int   `json:"vulnerability_id,omitempty"`
		PackageID       int    `json:"package_id,omitempty"`
		TimeScanned     int64  `json:"time_scanned,omitempty"`
		DbURI           string `json:"db_uri,omitempty"`
		DbVersion       string `json:"db_version,omitempty"`
		ScannerURI      string `json:"scanner_uri,omitempty"`
		ScannerVersion  string `json:"scanner_version,omitempty"`
		Origin          string `json:"origin,omitempty"`
		Collector       string `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scancv); err != nil {
		return err
	}
	for _, v := range scancv {
		node := &CertifyVuln{ID: v.ID}
		node.VulnerabilityID = v.VulnerabilityID
		node.PackageID = v.PackageID
		node.TimeScanned = time.Unix(0, v.TimeScanned)
		node.DbURI = v.DbURI
		node.DbVersion = v.DbVersion
		node.ScannerURI = v.ScannerURI
		node.ScannerVersion = v.ScannerVersion
		node.Origin = v.Origin
		node.Collector = v.Collector
		*cv = append(*cv, node)
	}
	return nil
}
