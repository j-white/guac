// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/securityadvisory"
)

// SecurityAdvisoryQuery is the builder for querying SecurityAdvisory entities.
type SecurityAdvisoryQuery struct {
	config
	ctx        *QueryContext
	order      []securityadvisory.OrderOption
	inters     []Interceptor
	predicates []predicate.SecurityAdvisory
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Where adds a new predicate for the SecurityAdvisoryQuery builder.
func (saq *SecurityAdvisoryQuery) Where(ps ...predicate.SecurityAdvisory) *SecurityAdvisoryQuery {
	saq.predicates = append(saq.predicates, ps...)
	return saq
}

// Limit the number of records to be returned by this query.
func (saq *SecurityAdvisoryQuery) Limit(limit int) *SecurityAdvisoryQuery {
	saq.ctx.Limit = &limit
	return saq
}

// Offset to start from.
func (saq *SecurityAdvisoryQuery) Offset(offset int) *SecurityAdvisoryQuery {
	saq.ctx.Offset = &offset
	return saq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (saq *SecurityAdvisoryQuery) Unique(unique bool) *SecurityAdvisoryQuery {
	saq.ctx.Unique = &unique
	return saq
}

// Order specifies how the records should be ordered.
func (saq *SecurityAdvisoryQuery) Order(o ...securityadvisory.OrderOption) *SecurityAdvisoryQuery {
	saq.order = append(saq.order, o...)
	return saq
}

// First returns the first SecurityAdvisory entity from the query.
// Returns a *NotFoundError when no SecurityAdvisory was found.
func (saq *SecurityAdvisoryQuery) First(ctx context.Context) (*SecurityAdvisory, error) {
	nodes, err := saq.Limit(1).All(setContextOp(ctx, saq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{securityadvisory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (saq *SecurityAdvisoryQuery) FirstX(ctx context.Context) *SecurityAdvisory {
	node, err := saq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SecurityAdvisory ID from the query.
// Returns a *NotFoundError when no SecurityAdvisory ID was found.
func (saq *SecurityAdvisoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = saq.Limit(1).IDs(setContextOp(ctx, saq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{securityadvisory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (saq *SecurityAdvisoryQuery) FirstIDX(ctx context.Context) int {
	id, err := saq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SecurityAdvisory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SecurityAdvisory entity is found.
// Returns a *NotFoundError when no SecurityAdvisory entities are found.
func (saq *SecurityAdvisoryQuery) Only(ctx context.Context) (*SecurityAdvisory, error) {
	nodes, err := saq.Limit(2).All(setContextOp(ctx, saq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{securityadvisory.Label}
	default:
		return nil, &NotSingularError{securityadvisory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (saq *SecurityAdvisoryQuery) OnlyX(ctx context.Context) *SecurityAdvisory {
	node, err := saq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SecurityAdvisory ID in the query.
// Returns a *NotSingularError when more than one SecurityAdvisory ID is found.
// Returns a *NotFoundError when no entities are found.
func (saq *SecurityAdvisoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = saq.Limit(2).IDs(setContextOp(ctx, saq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{securityadvisory.Label}
	default:
		err = &NotSingularError{securityadvisory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (saq *SecurityAdvisoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := saq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SecurityAdvisories.
func (saq *SecurityAdvisoryQuery) All(ctx context.Context) ([]*SecurityAdvisory, error) {
	ctx = setContextOp(ctx, saq.ctx, "All")
	if err := saq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SecurityAdvisory, *SecurityAdvisoryQuery]()
	return withInterceptors[[]*SecurityAdvisory](ctx, saq, qr, saq.inters)
}

// AllX is like All, but panics if an error occurs.
func (saq *SecurityAdvisoryQuery) AllX(ctx context.Context) []*SecurityAdvisory {
	nodes, err := saq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SecurityAdvisory IDs.
func (saq *SecurityAdvisoryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if saq.ctx.Unique == nil && saq.path != nil {
		saq.Unique(true)
	}
	ctx = setContextOp(ctx, saq.ctx, "IDs")
	if err = saq.Select(securityadvisory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (saq *SecurityAdvisoryQuery) IDsX(ctx context.Context) []int {
	ids, err := saq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (saq *SecurityAdvisoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, saq.ctx, "Count")
	if err := saq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, saq, querierCount[*SecurityAdvisoryQuery](), saq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (saq *SecurityAdvisoryQuery) CountX(ctx context.Context) int {
	count, err := saq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (saq *SecurityAdvisoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, saq.ctx, "Exist")
	switch _, err := saq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (saq *SecurityAdvisoryQuery) ExistX(ctx context.Context) bool {
	exist, err := saq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SecurityAdvisoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (saq *SecurityAdvisoryQuery) Clone() *SecurityAdvisoryQuery {
	if saq == nil {
		return nil
	}
	return &SecurityAdvisoryQuery{
		config:     saq.config,
		ctx:        saq.ctx.Clone(),
		order:      append([]securityadvisory.OrderOption{}, saq.order...),
		inters:     append([]Interceptor{}, saq.inters...),
		predicates: append([]predicate.SecurityAdvisory{}, saq.predicates...),
		// clone intermediate query.
		gremlin: saq.gremlin.Clone(),
		path:    saq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		GhsaID string `json:"ghsa_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SecurityAdvisory.Query().
//		GroupBy(securityadvisory.FieldGhsaID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (saq *SecurityAdvisoryQuery) GroupBy(field string, fields ...string) *SecurityAdvisoryGroupBy {
	saq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SecurityAdvisoryGroupBy{build: saq}
	grbuild.flds = &saq.ctx.Fields
	grbuild.label = securityadvisory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		GhsaID string `json:"ghsa_id,omitempty"`
//	}
//
//	client.SecurityAdvisory.Query().
//		Select(securityadvisory.FieldGhsaID).
//		Scan(ctx, &v)
func (saq *SecurityAdvisoryQuery) Select(fields ...string) *SecurityAdvisorySelect {
	saq.ctx.Fields = append(saq.ctx.Fields, fields...)
	sbuild := &SecurityAdvisorySelect{SecurityAdvisoryQuery: saq}
	sbuild.label = securityadvisory.Label
	sbuild.flds, sbuild.scan = &saq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SecurityAdvisorySelect configured with the given aggregations.
func (saq *SecurityAdvisoryQuery) Aggregate(fns ...AggregateFunc) *SecurityAdvisorySelect {
	return saq.Select().Aggregate(fns...)
}

func (saq *SecurityAdvisoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range saq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, saq); err != nil {
				return err
			}
		}
	}
	if saq.path != nil {
		prev, err := saq.path(ctx)
		if err != nil {
			return err
		}
		saq.gremlin = prev
	}
	return nil
}

func (saq *SecurityAdvisoryQuery) gremlinAll(ctx context.Context, hooks ...queryHook) ([]*SecurityAdvisory, error) {
	res := &gremlin.Response{}
	traversal := saq.gremlinQuery(ctx)
	if len(saq.ctx.Fields) > 0 {
		fields := make([]any, len(saq.ctx.Fields))
		for i, f := range saq.ctx.Fields {
			fields[i] = f
		}
		traversal.ValueMap(fields...)
	} else {
		traversal.ValueMap(true)
	}
	query, bindings := traversal.Query()
	if err := saq.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	var sas SecurityAdvisories
	if err := sas.FromResponse(res); err != nil {
		return nil, err
	}
	for i := range sas {
		sas[i].config = saq.config
	}
	return sas, nil
}

func (saq *SecurityAdvisoryQuery) gremlinCount(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := saq.gremlinQuery(ctx).Count().Query()
	if err := saq.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (saq *SecurityAdvisoryQuery) gremlinQuery(context.Context) *dsl.Traversal {
	v := g.V().HasLabel(securityadvisory.Label)
	if saq.gremlin != nil {
		v = saq.gremlin.Clone()
	}
	for _, p := range saq.predicates {
		p(v)
	}
	if len(saq.order) > 0 {
		v.Order()
		for _, p := range saq.order {
			p(v)
		}
	}
	switch limit, offset := saq.ctx.Limit, saq.ctx.Offset; {
	case limit != nil && offset != nil:
		v.Range(*offset, *offset+*limit)
	case offset != nil:
		v.Range(*offset, math.MaxInt32)
	case limit != nil:
		v.Limit(*limit)
	}
	if unique := saq.ctx.Unique; unique == nil || *unique {
		v.Dedup()
	}
	return v
}

// SecurityAdvisoryGroupBy is the group-by builder for SecurityAdvisory entities.
type SecurityAdvisoryGroupBy struct {
	selector
	build *SecurityAdvisoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sagb *SecurityAdvisoryGroupBy) Aggregate(fns ...AggregateFunc) *SecurityAdvisoryGroupBy {
	sagb.fns = append(sagb.fns, fns...)
	return sagb
}

// Scan applies the selector query and scans the result into the given value.
func (sagb *SecurityAdvisoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sagb.build.ctx, "GroupBy")
	if err := sagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SecurityAdvisoryQuery, *SecurityAdvisoryGroupBy](ctx, sagb.build, sagb, sagb.build.inters, v)
}

func (sagb *SecurityAdvisoryGroupBy) gremlinScan(ctx context.Context, root *SecurityAdvisoryQuery, v any) error {
	var (
		trs   []any
		names []any
	)
	for _, fn := range sagb.fns {
		name, tr := fn("p", "")
		trs = append(trs, tr)
		names = append(names, name)
	}
	for _, f := range *sagb.flds {
		names = append(names, f)
		trs = append(trs, __.As("p").Unfold().Values(f).As(f))
	}
	query, bindings := root.gremlinQuery(ctx).Group().
		By(__.Values(*sagb.flds...).Fold()).
		By(__.Fold().Match(trs...).Select(names...)).
		Select(dsl.Values).
		Next().
		Query()
	res := &gremlin.Response{}
	if err := sagb.build.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(*sagb.flds)+len(sagb.fns) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

// SecurityAdvisorySelect is the builder for selecting fields of SecurityAdvisory entities.
type SecurityAdvisorySelect struct {
	*SecurityAdvisoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sas *SecurityAdvisorySelect) Aggregate(fns ...AggregateFunc) *SecurityAdvisorySelect {
	sas.fns = append(sas.fns, fns...)
	return sas
}

// Scan applies the selector query and scans the result into the given value.
func (sas *SecurityAdvisorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sas.ctx, "Select")
	if err := sas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SecurityAdvisoryQuery, *SecurityAdvisorySelect](ctx, sas.SecurityAdvisoryQuery, sas, sas.inters, v)
}

func (sas *SecurityAdvisorySelect) gremlinScan(ctx context.Context, root *SecurityAdvisoryQuery, v any) error {
	var (
		res       = &gremlin.Response{}
		traversal = root.gremlinQuery(ctx)
	)
	if fields := sas.ctx.Fields; len(fields) == 1 {
		if fields[0] != securityadvisory.FieldID {
			traversal = traversal.Values(fields...)
		} else {
			traversal = traversal.ID()
		}
	} else {
		fields := make([]any, len(sas.ctx.Fields))
		for i, f := range sas.ctx.Fields {
			fields[i] = f
		}
		traversal = traversal.ValueMap(fields...)
	}
	query, bindings := traversal.Query()
	if err := sas.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(root.ctx.Fields) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}
