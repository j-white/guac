// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hassourceat"
)

// HasSourceAtCreate is the builder for creating a HasSourceAt entity.
type HasSourceAtCreate struct {
	config
	mutation *HasSourceAtMutation
	hooks    []Hook
}

// SetPackageVersionID sets the "package_version_id" field.
func (hsac *HasSourceAtCreate) SetPackageVersionID(i int) *HasSourceAtCreate {
	hsac.mutation.SetPackageVersionID(i)
	return hsac
}

// SetNillablePackageVersionID sets the "package_version_id" field if the given value is not nil.
func (hsac *HasSourceAtCreate) SetNillablePackageVersionID(i *int) *HasSourceAtCreate {
	if i != nil {
		hsac.SetPackageVersionID(*i)
	}
	return hsac
}

// SetPackageNameID sets the "package_name_id" field.
func (hsac *HasSourceAtCreate) SetPackageNameID(i int) *HasSourceAtCreate {
	hsac.mutation.SetPackageNameID(i)
	return hsac
}

// SetNillablePackageNameID sets the "package_name_id" field if the given value is not nil.
func (hsac *HasSourceAtCreate) SetNillablePackageNameID(i *int) *HasSourceAtCreate {
	if i != nil {
		hsac.SetPackageNameID(*i)
	}
	return hsac
}

// SetSourceID sets the "source_id" field.
func (hsac *HasSourceAtCreate) SetSourceID(i int) *HasSourceAtCreate {
	hsac.mutation.SetSourceID(i)
	return hsac
}

// SetKnownSince sets the "known_since" field.
func (hsac *HasSourceAtCreate) SetKnownSince(t time.Time) *HasSourceAtCreate {
	hsac.mutation.SetKnownSince(t)
	return hsac
}

// SetJustification sets the "justification" field.
func (hsac *HasSourceAtCreate) SetJustification(s string) *HasSourceAtCreate {
	hsac.mutation.SetJustification(s)
	return hsac
}

// SetOrigin sets the "origin" field.
func (hsac *HasSourceAtCreate) SetOrigin(s string) *HasSourceAtCreate {
	hsac.mutation.SetOrigin(s)
	return hsac
}

// SetCollector sets the "collector" field.
func (hsac *HasSourceAtCreate) SetCollector(s string) *HasSourceAtCreate {
	hsac.mutation.SetCollector(s)
	return hsac
}

// SetPackageVersion sets the "package_version" edge to the PackageVersion entity.
func (hsac *HasSourceAtCreate) SetPackageVersion(p *PackageVersion) *HasSourceAtCreate {
	return hsac.SetPackageVersionID(p.ID)
}

// SetAllVersionsID sets the "all_versions" edge to the PackageName entity by ID.
func (hsac *HasSourceAtCreate) SetAllVersionsID(id int) *HasSourceAtCreate {
	hsac.mutation.SetAllVersionsID(id)
	return hsac
}

// SetNillableAllVersionsID sets the "all_versions" edge to the PackageName entity by ID if the given value is not nil.
func (hsac *HasSourceAtCreate) SetNillableAllVersionsID(id *int) *HasSourceAtCreate {
	if id != nil {
		hsac = hsac.SetAllVersionsID(*id)
	}
	return hsac
}

// SetAllVersions sets the "all_versions" edge to the PackageName entity.
func (hsac *HasSourceAtCreate) SetAllVersions(p *PackageName) *HasSourceAtCreate {
	return hsac.SetAllVersionsID(p.ID)
}

// SetSource sets the "source" edge to the SourceName entity.
func (hsac *HasSourceAtCreate) SetSource(s *SourceName) *HasSourceAtCreate {
	return hsac.SetSourceID(s.ID)
}

// Mutation returns the HasSourceAtMutation object of the builder.
func (hsac *HasSourceAtCreate) Mutation() *HasSourceAtMutation {
	return hsac.mutation
}

// Save creates the HasSourceAt in the database.
func (hsac *HasSourceAtCreate) Save(ctx context.Context) (*HasSourceAt, error) {
	return withHooks(ctx, hsac.gremlinSave, hsac.mutation, hsac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hsac *HasSourceAtCreate) SaveX(ctx context.Context) *HasSourceAt {
	v, err := hsac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hsac *HasSourceAtCreate) Exec(ctx context.Context) error {
	_, err := hsac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsac *HasSourceAtCreate) ExecX(ctx context.Context) {
	if err := hsac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hsac *HasSourceAtCreate) check() error {
	if _, ok := hsac.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source_id", err: errors.New(`ent: missing required field "HasSourceAt.source_id"`)}
	}
	if _, ok := hsac.mutation.KnownSince(); !ok {
		return &ValidationError{Name: "known_since", err: errors.New(`ent: missing required field "HasSourceAt.known_since"`)}
	}
	if _, ok := hsac.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "HasSourceAt.justification"`)}
	}
	if _, ok := hsac.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "HasSourceAt.origin"`)}
	}
	if _, ok := hsac.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "HasSourceAt.collector"`)}
	}
	if _, ok := hsac.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required edge "HasSourceAt.source"`)}
	}
	return nil
}

func (hsac *HasSourceAtCreate) gremlinSave(ctx context.Context) (*HasSourceAt, error) {
	if err := hsac.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := hsac.gremlin().Query()
	if err := hsac.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &HasSourceAt{config: hsac.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	hsac.mutation.id = &rnode.ID
	hsac.mutation.done = true
	return rnode, nil
}

func (hsac *HasSourceAtCreate) gremlin() *dsl.Traversal {
	v := g.AddV(hassourceat.Label)
	if value, ok := hsac.mutation.KnownSince(); ok {
		v.Property(dsl.Single, hassourceat.FieldKnownSince, value)
	}
	if value, ok := hsac.mutation.Justification(); ok {
		v.Property(dsl.Single, hassourceat.FieldJustification, value)
	}
	if value, ok := hsac.mutation.Origin(); ok {
		v.Property(dsl.Single, hassourceat.FieldOrigin, value)
	}
	if value, ok := hsac.mutation.Collector(); ok {
		v.Property(dsl.Single, hassourceat.FieldCollector, value)
	}
	for _, id := range hsac.mutation.PackageVersionIDs() {
		v.AddE(hassourceat.PackageVersionLabel).To(g.V(id)).OutV()
	}
	for _, id := range hsac.mutation.AllVersionsIDs() {
		v.AddE(hassourceat.AllVersionsLabel).To(g.V(id)).OutV()
	}
	for _, id := range hsac.mutation.SourceIDs() {
		v.AddE(hassourceat.SourceLabel).To(g.V(id)).OutV()
	}
	return v.ValueMap(true)
}

// HasSourceAtCreateBulk is the builder for creating many HasSourceAt entities in bulk.
type HasSourceAtCreateBulk struct {
	config
	builders []*HasSourceAtCreate
}
