// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvuln"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// CertifyVulnUpdate is the builder for updating CertifyVuln entities.
type CertifyVulnUpdate struct {
	config
	hooks    []Hook
	mutation *CertifyVulnMutation
}

// Where appends a list predicates to the CertifyVulnUpdate builder.
func (cvu *CertifyVulnUpdate) Where(ps ...predicate.CertifyVuln) *CertifyVulnUpdate {
	cvu.mutation.Where(ps...)
	return cvu
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (cvu *CertifyVulnUpdate) SetVulnerabilityID(i int) *CertifyVulnUpdate {
	cvu.mutation.SetVulnerabilityID(i)
	return cvu
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (cvu *CertifyVulnUpdate) SetNillableVulnerabilityID(i *int) *CertifyVulnUpdate {
	if i != nil {
		cvu.SetVulnerabilityID(*i)
	}
	return cvu
}

// ClearVulnerabilityID clears the value of the "vulnerability_id" field.
func (cvu *CertifyVulnUpdate) ClearVulnerabilityID() *CertifyVulnUpdate {
	cvu.mutation.ClearVulnerabilityID()
	return cvu
}

// SetPackageID sets the "package_id" field.
func (cvu *CertifyVulnUpdate) SetPackageID(i int) *CertifyVulnUpdate {
	cvu.mutation.SetPackageID(i)
	return cvu
}

// SetTimeScanned sets the "time_scanned" field.
func (cvu *CertifyVulnUpdate) SetTimeScanned(t time.Time) *CertifyVulnUpdate {
	cvu.mutation.SetTimeScanned(t)
	return cvu
}

// SetDbURI sets the "db_uri" field.
func (cvu *CertifyVulnUpdate) SetDbURI(s string) *CertifyVulnUpdate {
	cvu.mutation.SetDbURI(s)
	return cvu
}

// SetDbVersion sets the "db_version" field.
func (cvu *CertifyVulnUpdate) SetDbVersion(s string) *CertifyVulnUpdate {
	cvu.mutation.SetDbVersion(s)
	return cvu
}

// SetScannerURI sets the "scanner_uri" field.
func (cvu *CertifyVulnUpdate) SetScannerURI(s string) *CertifyVulnUpdate {
	cvu.mutation.SetScannerURI(s)
	return cvu
}

// SetScannerVersion sets the "scanner_version" field.
func (cvu *CertifyVulnUpdate) SetScannerVersion(s string) *CertifyVulnUpdate {
	cvu.mutation.SetScannerVersion(s)
	return cvu
}

// SetOrigin sets the "origin" field.
func (cvu *CertifyVulnUpdate) SetOrigin(s string) *CertifyVulnUpdate {
	cvu.mutation.SetOrigin(s)
	return cvu
}

// SetCollector sets the "collector" field.
func (cvu *CertifyVulnUpdate) SetCollector(s string) *CertifyVulnUpdate {
	cvu.mutation.SetCollector(s)
	return cvu
}

// SetVulnerability sets the "vulnerability" edge to the SecurityAdvisory entity.
func (cvu *CertifyVulnUpdate) SetVulnerability(s *SecurityAdvisory) *CertifyVulnUpdate {
	return cvu.SetVulnerabilityID(s.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (cvu *CertifyVulnUpdate) SetPackage(p *PackageVersion) *CertifyVulnUpdate {
	return cvu.SetPackageID(p.ID)
}

// Mutation returns the CertifyVulnMutation object of the builder.
func (cvu *CertifyVulnUpdate) Mutation() *CertifyVulnMutation {
	return cvu.mutation
}

// ClearVulnerability clears the "vulnerability" edge to the SecurityAdvisory entity.
func (cvu *CertifyVulnUpdate) ClearVulnerability() *CertifyVulnUpdate {
	cvu.mutation.ClearVulnerability()
	return cvu
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (cvu *CertifyVulnUpdate) ClearPackage() *CertifyVulnUpdate {
	cvu.mutation.ClearPackage()
	return cvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cvu *CertifyVulnUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cvu.gremlinSave, cvu.mutation, cvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvu *CertifyVulnUpdate) SaveX(ctx context.Context) int {
	affected, err := cvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cvu *CertifyVulnUpdate) Exec(ctx context.Context) error {
	_, err := cvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvu *CertifyVulnUpdate) ExecX(ctx context.Context) {
	if err := cvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvu *CertifyVulnUpdate) check() error {
	if _, ok := cvu.mutation.PackageID(); cvu.mutation.PackageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CertifyVuln.package"`)
	}
	return nil
}

func (cvu *CertifyVulnUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := cvu.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := cvu.gremlin().Query()
	if err := cvu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	cvu.mutation.done = true
	return res.ReadInt()
}

func (cvu *CertifyVulnUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(certifyvuln.Label)
	for _, p := range cvu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := cvu.mutation.TimeScanned(); ok {
		v.Property(dsl.Single, certifyvuln.FieldTimeScanned, value)
	}
	if value, ok := cvu.mutation.DbURI(); ok {
		v.Property(dsl.Single, certifyvuln.FieldDbURI, value)
	}
	if value, ok := cvu.mutation.DbVersion(); ok {
		v.Property(dsl.Single, certifyvuln.FieldDbVersion, value)
	}
	if value, ok := cvu.mutation.ScannerURI(); ok {
		v.Property(dsl.Single, certifyvuln.FieldScannerURI, value)
	}
	if value, ok := cvu.mutation.ScannerVersion(); ok {
		v.Property(dsl.Single, certifyvuln.FieldScannerVersion, value)
	}
	if value, ok := cvu.mutation.Origin(); ok {
		v.Property(dsl.Single, certifyvuln.FieldOrigin, value)
	}
	if value, ok := cvu.mutation.Collector(); ok {
		v.Property(dsl.Single, certifyvuln.FieldCollector, value)
	}
	var properties []any
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if cvu.mutation.VulnerabilityCleared() {
		tr := rv.Clone().OutE(certifyvuln.VulnerabilityLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range cvu.mutation.VulnerabilityIDs() {
		v.AddE(certifyvuln.VulnerabilityLabel).To(g.V(id)).OutV()
	}
	if cvu.mutation.PackageCleared() {
		tr := rv.Clone().OutE(certifyvuln.PackageLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range cvu.mutation.PackageIDs() {
		v.AddE(certifyvuln.PackageLabel).To(g.V(id)).OutV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// CertifyVulnUpdateOne is the builder for updating a single CertifyVuln entity.
type CertifyVulnUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertifyVulnMutation
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (cvuo *CertifyVulnUpdateOne) SetVulnerabilityID(i int) *CertifyVulnUpdateOne {
	cvuo.mutation.SetVulnerabilityID(i)
	return cvuo
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (cvuo *CertifyVulnUpdateOne) SetNillableVulnerabilityID(i *int) *CertifyVulnUpdateOne {
	if i != nil {
		cvuo.SetVulnerabilityID(*i)
	}
	return cvuo
}

// ClearVulnerabilityID clears the value of the "vulnerability_id" field.
func (cvuo *CertifyVulnUpdateOne) ClearVulnerabilityID() *CertifyVulnUpdateOne {
	cvuo.mutation.ClearVulnerabilityID()
	return cvuo
}

// SetPackageID sets the "package_id" field.
func (cvuo *CertifyVulnUpdateOne) SetPackageID(i int) *CertifyVulnUpdateOne {
	cvuo.mutation.SetPackageID(i)
	return cvuo
}

// SetTimeScanned sets the "time_scanned" field.
func (cvuo *CertifyVulnUpdateOne) SetTimeScanned(t time.Time) *CertifyVulnUpdateOne {
	cvuo.mutation.SetTimeScanned(t)
	return cvuo
}

// SetDbURI sets the "db_uri" field.
func (cvuo *CertifyVulnUpdateOne) SetDbURI(s string) *CertifyVulnUpdateOne {
	cvuo.mutation.SetDbURI(s)
	return cvuo
}

// SetDbVersion sets the "db_version" field.
func (cvuo *CertifyVulnUpdateOne) SetDbVersion(s string) *CertifyVulnUpdateOne {
	cvuo.mutation.SetDbVersion(s)
	return cvuo
}

// SetScannerURI sets the "scanner_uri" field.
func (cvuo *CertifyVulnUpdateOne) SetScannerURI(s string) *CertifyVulnUpdateOne {
	cvuo.mutation.SetScannerURI(s)
	return cvuo
}

// SetScannerVersion sets the "scanner_version" field.
func (cvuo *CertifyVulnUpdateOne) SetScannerVersion(s string) *CertifyVulnUpdateOne {
	cvuo.mutation.SetScannerVersion(s)
	return cvuo
}

// SetOrigin sets the "origin" field.
func (cvuo *CertifyVulnUpdateOne) SetOrigin(s string) *CertifyVulnUpdateOne {
	cvuo.mutation.SetOrigin(s)
	return cvuo
}

// SetCollector sets the "collector" field.
func (cvuo *CertifyVulnUpdateOne) SetCollector(s string) *CertifyVulnUpdateOne {
	cvuo.mutation.SetCollector(s)
	return cvuo
}

// SetVulnerability sets the "vulnerability" edge to the SecurityAdvisory entity.
func (cvuo *CertifyVulnUpdateOne) SetVulnerability(s *SecurityAdvisory) *CertifyVulnUpdateOne {
	return cvuo.SetVulnerabilityID(s.ID)
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (cvuo *CertifyVulnUpdateOne) SetPackage(p *PackageVersion) *CertifyVulnUpdateOne {
	return cvuo.SetPackageID(p.ID)
}

// Mutation returns the CertifyVulnMutation object of the builder.
func (cvuo *CertifyVulnUpdateOne) Mutation() *CertifyVulnMutation {
	return cvuo.mutation
}

// ClearVulnerability clears the "vulnerability" edge to the SecurityAdvisory entity.
func (cvuo *CertifyVulnUpdateOne) ClearVulnerability() *CertifyVulnUpdateOne {
	cvuo.mutation.ClearVulnerability()
	return cvuo
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (cvuo *CertifyVulnUpdateOne) ClearPackage() *CertifyVulnUpdateOne {
	cvuo.mutation.ClearPackage()
	return cvuo
}

// Where appends a list predicates to the CertifyVulnUpdate builder.
func (cvuo *CertifyVulnUpdateOne) Where(ps ...predicate.CertifyVuln) *CertifyVulnUpdateOne {
	cvuo.mutation.Where(ps...)
	return cvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cvuo *CertifyVulnUpdateOne) Select(field string, fields ...string) *CertifyVulnUpdateOne {
	cvuo.fields = append([]string{field}, fields...)
	return cvuo
}

// Save executes the query and returns the updated CertifyVuln entity.
func (cvuo *CertifyVulnUpdateOne) Save(ctx context.Context) (*CertifyVuln, error) {
	return withHooks(ctx, cvuo.gremlinSave, cvuo.mutation, cvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvuo *CertifyVulnUpdateOne) SaveX(ctx context.Context) *CertifyVuln {
	node, err := cvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cvuo *CertifyVulnUpdateOne) Exec(ctx context.Context) error {
	_, err := cvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvuo *CertifyVulnUpdateOne) ExecX(ctx context.Context) {
	if err := cvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvuo *CertifyVulnUpdateOne) check() error {
	if _, ok := cvuo.mutation.PackageID(); cvuo.mutation.PackageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CertifyVuln.package"`)
	}
	return nil
}

func (cvuo *CertifyVulnUpdateOne) gremlinSave(ctx context.Context) (*CertifyVuln, error) {
	if err := cvuo.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := cvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CertifyVuln.id" for update`)}
	}
	query, bindings := cvuo.gremlin(id).Query()
	if err := cvuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	cvuo.mutation.done = true
	cv := &CertifyVuln{config: cvuo.config}
	if err := cv.FromResponse(res); err != nil {
		return nil, err
	}
	return cv, nil
}

func (cvuo *CertifyVulnUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := cvuo.mutation.TimeScanned(); ok {
		v.Property(dsl.Single, certifyvuln.FieldTimeScanned, value)
	}
	if value, ok := cvuo.mutation.DbURI(); ok {
		v.Property(dsl.Single, certifyvuln.FieldDbURI, value)
	}
	if value, ok := cvuo.mutation.DbVersion(); ok {
		v.Property(dsl.Single, certifyvuln.FieldDbVersion, value)
	}
	if value, ok := cvuo.mutation.ScannerURI(); ok {
		v.Property(dsl.Single, certifyvuln.FieldScannerURI, value)
	}
	if value, ok := cvuo.mutation.ScannerVersion(); ok {
		v.Property(dsl.Single, certifyvuln.FieldScannerVersion, value)
	}
	if value, ok := cvuo.mutation.Origin(); ok {
		v.Property(dsl.Single, certifyvuln.FieldOrigin, value)
	}
	if value, ok := cvuo.mutation.Collector(); ok {
		v.Property(dsl.Single, certifyvuln.FieldCollector, value)
	}
	var properties []any
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if cvuo.mutation.VulnerabilityCleared() {
		tr := rv.Clone().OutE(certifyvuln.VulnerabilityLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range cvuo.mutation.VulnerabilityIDs() {
		v.AddE(certifyvuln.VulnerabilityLabel).To(g.V(id)).OutV()
	}
	if cvuo.mutation.PackageCleared() {
		tr := rv.Clone().OutE(certifyvuln.PackageLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range cvuo.mutation.PackageIDs() {
		v.AddE(certifyvuln.PackageLabel).To(g.V(id)).OutV()
	}
	if len(cvuo.fields) > 0 {
		fields := make([]any, 0, len(cvuo.fields)+1)
		fields = append(fields, true)
		for _, f := range cvuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
