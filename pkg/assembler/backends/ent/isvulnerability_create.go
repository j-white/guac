// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/isvulnerability"
)

// IsVulnerabilityCreate is the builder for creating a IsVulnerability entity.
type IsVulnerabilityCreate struct {
	config
	mutation *IsVulnerabilityMutation
	hooks    []Hook
}

// SetOsvID sets the "osv_id" field.
func (ivc *IsVulnerabilityCreate) SetOsvID(i int) *IsVulnerabilityCreate {
	ivc.mutation.SetOsvID(i)
	return ivc
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (ivc *IsVulnerabilityCreate) SetVulnerabilityID(i int) *IsVulnerabilityCreate {
	ivc.mutation.SetVulnerabilityID(i)
	return ivc
}

// SetJustification sets the "justification" field.
func (ivc *IsVulnerabilityCreate) SetJustification(s string) *IsVulnerabilityCreate {
	ivc.mutation.SetJustification(s)
	return ivc
}

// SetOrigin sets the "origin" field.
func (ivc *IsVulnerabilityCreate) SetOrigin(s string) *IsVulnerabilityCreate {
	ivc.mutation.SetOrigin(s)
	return ivc
}

// SetCollector sets the "collector" field.
func (ivc *IsVulnerabilityCreate) SetCollector(s string) *IsVulnerabilityCreate {
	ivc.mutation.SetCollector(s)
	return ivc
}

// SetOsv sets the "osv" edge to the SecurityAdvisory entity.
func (ivc *IsVulnerabilityCreate) SetOsv(s *SecurityAdvisory) *IsVulnerabilityCreate {
	return ivc.SetOsvID(s.ID)
}

// SetVulnerability sets the "vulnerability" edge to the SecurityAdvisory entity.
func (ivc *IsVulnerabilityCreate) SetVulnerability(s *SecurityAdvisory) *IsVulnerabilityCreate {
	return ivc.SetVulnerabilityID(s.ID)
}

// Mutation returns the IsVulnerabilityMutation object of the builder.
func (ivc *IsVulnerabilityCreate) Mutation() *IsVulnerabilityMutation {
	return ivc.mutation
}

// Save creates the IsVulnerability in the database.
func (ivc *IsVulnerabilityCreate) Save(ctx context.Context) (*IsVulnerability, error) {
	return withHooks(ctx, ivc.gremlinSave, ivc.mutation, ivc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ivc *IsVulnerabilityCreate) SaveX(ctx context.Context) *IsVulnerability {
	v, err := ivc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ivc *IsVulnerabilityCreate) Exec(ctx context.Context) error {
	_, err := ivc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ivc *IsVulnerabilityCreate) ExecX(ctx context.Context) {
	if err := ivc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ivc *IsVulnerabilityCreate) check() error {
	if _, ok := ivc.mutation.OsvID(); !ok {
		return &ValidationError{Name: "osv_id", err: errors.New(`ent: missing required field "IsVulnerability.osv_id"`)}
	}
	if _, ok := ivc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability_id", err: errors.New(`ent: missing required field "IsVulnerability.vulnerability_id"`)}
	}
	if _, ok := ivc.mutation.Justification(); !ok {
		return &ValidationError{Name: "justification", err: errors.New(`ent: missing required field "IsVulnerability.justification"`)}
	}
	if _, ok := ivc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "IsVulnerability.origin"`)}
	}
	if _, ok := ivc.mutation.Collector(); !ok {
		return &ValidationError{Name: "collector", err: errors.New(`ent: missing required field "IsVulnerability.collector"`)}
	}
	if _, ok := ivc.mutation.OsvID(); !ok {
		return &ValidationError{Name: "osv", err: errors.New(`ent: missing required edge "IsVulnerability.osv"`)}
	}
	if _, ok := ivc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability", err: errors.New(`ent: missing required edge "IsVulnerability.vulnerability"`)}
	}
	return nil
}

func (ivc *IsVulnerabilityCreate) gremlinSave(ctx context.Context) (*IsVulnerability, error) {
	if err := ivc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := ivc.gremlin().Query()
	if err := ivc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &IsVulnerability{config: ivc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	ivc.mutation.id = &rnode.ID
	ivc.mutation.done = true
	return rnode, nil
}

func (ivc *IsVulnerabilityCreate) gremlin() *dsl.Traversal {
	v := g.AddV(isvulnerability.Label)
	if value, ok := ivc.mutation.Justification(); ok {
		v.Property(dsl.Single, isvulnerability.FieldJustification, value)
	}
	if value, ok := ivc.mutation.Origin(); ok {
		v.Property(dsl.Single, isvulnerability.FieldOrigin, value)
	}
	if value, ok := ivc.mutation.Collector(); ok {
		v.Property(dsl.Single, isvulnerability.FieldCollector, value)
	}
	for _, id := range ivc.mutation.OsvIDs() {
		v.AddE(isvulnerability.OsvLabel).To(g.V(id)).OutV()
	}
	for _, id := range ivc.mutation.VulnerabilityIDs() {
		v.AddE(isvulnerability.VulnerabilityLabel).To(g.V(id)).OutV()
	}
	return v.ValueMap(true)
}

// IsVulnerabilityCreateBulk is the builder for creating many IsVulnerability entities in bulk.
type IsVulnerabilityCreateBulk struct {
	config
	builders []*IsVulnerabilityCreate
}
