// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// HashEqualQuery is the builder for querying HashEqual entities.
type HashEqualQuery struct {
	config
	ctx           *QueryContext
	order         []hashequal.OrderOption
	inters        []Interceptor
	predicates    []predicate.HashEqual
	withArtifacts *ArtifactQuery
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Where adds a new predicate for the HashEqualQuery builder.
func (heq *HashEqualQuery) Where(ps ...predicate.HashEqual) *HashEqualQuery {
	heq.predicates = append(heq.predicates, ps...)
	return heq
}

// Limit the number of records to be returned by this query.
func (heq *HashEqualQuery) Limit(limit int) *HashEqualQuery {
	heq.ctx.Limit = &limit
	return heq
}

// Offset to start from.
func (heq *HashEqualQuery) Offset(offset int) *HashEqualQuery {
	heq.ctx.Offset = &offset
	return heq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (heq *HashEqualQuery) Unique(unique bool) *HashEqualQuery {
	heq.ctx.Unique = &unique
	return heq
}

// Order specifies how the records should be ordered.
func (heq *HashEqualQuery) Order(o ...hashequal.OrderOption) *HashEqualQuery {
	heq.order = append(heq.order, o...)
	return heq
}

// QueryArtifacts chains the current query on the "artifacts" edge.
func (heq *HashEqualQuery) QueryArtifacts() *ArtifactQuery {
	query := (&ArtifactClient{config: heq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := heq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := heq.gremlinQuery(ctx)
		fromU = gremlin.OutE(hashequal.ArtifactsLabel).InV()
		return fromU, nil
	}
	return query
}

// First returns the first HashEqual entity from the query.
// Returns a *NotFoundError when no HashEqual was found.
func (heq *HashEqualQuery) First(ctx context.Context) (*HashEqual, error) {
	nodes, err := heq.Limit(1).All(setContextOp(ctx, heq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hashequal.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (heq *HashEqualQuery) FirstX(ctx context.Context) *HashEqual {
	node, err := heq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HashEqual ID from the query.
// Returns a *NotFoundError when no HashEqual ID was found.
func (heq *HashEqualQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = heq.Limit(1).IDs(setContextOp(ctx, heq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hashequal.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (heq *HashEqualQuery) FirstIDX(ctx context.Context) int {
	id, err := heq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HashEqual entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HashEqual entity is found.
// Returns a *NotFoundError when no HashEqual entities are found.
func (heq *HashEqualQuery) Only(ctx context.Context) (*HashEqual, error) {
	nodes, err := heq.Limit(2).All(setContextOp(ctx, heq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hashequal.Label}
	default:
		return nil, &NotSingularError{hashequal.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (heq *HashEqualQuery) OnlyX(ctx context.Context) *HashEqual {
	node, err := heq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HashEqual ID in the query.
// Returns a *NotSingularError when more than one HashEqual ID is found.
// Returns a *NotFoundError when no entities are found.
func (heq *HashEqualQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = heq.Limit(2).IDs(setContextOp(ctx, heq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hashequal.Label}
	default:
		err = &NotSingularError{hashequal.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (heq *HashEqualQuery) OnlyIDX(ctx context.Context) int {
	id, err := heq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HashEquals.
func (heq *HashEqualQuery) All(ctx context.Context) ([]*HashEqual, error) {
	ctx = setContextOp(ctx, heq.ctx, "All")
	if err := heq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HashEqual, *HashEqualQuery]()
	return withInterceptors[[]*HashEqual](ctx, heq, qr, heq.inters)
}

// AllX is like All, but panics if an error occurs.
func (heq *HashEqualQuery) AllX(ctx context.Context) []*HashEqual {
	nodes, err := heq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HashEqual IDs.
func (heq *HashEqualQuery) IDs(ctx context.Context) (ids []int, err error) {
	if heq.ctx.Unique == nil && heq.path != nil {
		heq.Unique(true)
	}
	ctx = setContextOp(ctx, heq.ctx, "IDs")
	if err = heq.Select(hashequal.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (heq *HashEqualQuery) IDsX(ctx context.Context) []int {
	ids, err := heq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (heq *HashEqualQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, heq.ctx, "Count")
	if err := heq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, heq, querierCount[*HashEqualQuery](), heq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (heq *HashEqualQuery) CountX(ctx context.Context) int {
	count, err := heq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (heq *HashEqualQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, heq.ctx, "Exist")
	switch _, err := heq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (heq *HashEqualQuery) ExistX(ctx context.Context) bool {
	exist, err := heq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HashEqualQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (heq *HashEqualQuery) Clone() *HashEqualQuery {
	if heq == nil {
		return nil
	}
	return &HashEqualQuery{
		config:        heq.config,
		ctx:           heq.ctx.Clone(),
		order:         append([]hashequal.OrderOption{}, heq.order...),
		inters:        append([]Interceptor{}, heq.inters...),
		predicates:    append([]predicate.HashEqual{}, heq.predicates...),
		withArtifacts: heq.withArtifacts.Clone(),
		// clone intermediate query.
		gremlin: heq.gremlin.Clone(),
		path:    heq.path,
	}
}

// WithArtifacts tells the query-builder to eager-load the nodes that are connected to
// the "artifacts" edge. The optional arguments are used to configure the query builder of the edge.
func (heq *HashEqualQuery) WithArtifacts(opts ...func(*ArtifactQuery)) *HashEqualQuery {
	query := (&ArtifactClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	heq.withArtifacts = query
	return heq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Origin string `json:"origin,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HashEqual.Query().
//		GroupBy(hashequal.FieldOrigin).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (heq *HashEqualQuery) GroupBy(field string, fields ...string) *HashEqualGroupBy {
	heq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HashEqualGroupBy{build: heq}
	grbuild.flds = &heq.ctx.Fields
	grbuild.label = hashequal.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Origin string `json:"origin,omitempty"`
//	}
//
//	client.HashEqual.Query().
//		Select(hashequal.FieldOrigin).
//		Scan(ctx, &v)
func (heq *HashEqualQuery) Select(fields ...string) *HashEqualSelect {
	heq.ctx.Fields = append(heq.ctx.Fields, fields...)
	sbuild := &HashEqualSelect{HashEqualQuery: heq}
	sbuild.label = hashequal.Label
	sbuild.flds, sbuild.scan = &heq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HashEqualSelect configured with the given aggregations.
func (heq *HashEqualQuery) Aggregate(fns ...AggregateFunc) *HashEqualSelect {
	return heq.Select().Aggregate(fns...)
}

func (heq *HashEqualQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range heq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, heq); err != nil {
				return err
			}
		}
	}
	if heq.path != nil {
		prev, err := heq.path(ctx)
		if err != nil {
			return err
		}
		heq.gremlin = prev
	}
	return nil
}

func (heq *HashEqualQuery) gremlinAll(ctx context.Context, hooks ...queryHook) ([]*HashEqual, error) {
	res := &gremlin.Response{}
	traversal := heq.gremlinQuery(ctx)
	if len(heq.ctx.Fields) > 0 {
		fields := make([]any, len(heq.ctx.Fields))
		for i, f := range heq.ctx.Fields {
			fields[i] = f
		}
		traversal.ValueMap(fields...)
	} else {
		traversal.ValueMap(true)
	}
	query, bindings := traversal.Query()
	if err := heq.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	var hes HashEquals
	if err := hes.FromResponse(res); err != nil {
		return nil, err
	}
	for i := range hes {
		hes[i].config = heq.config
	}
	return hes, nil
}

func (heq *HashEqualQuery) gremlinCount(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := heq.gremlinQuery(ctx).Count().Query()
	if err := heq.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (heq *HashEqualQuery) gremlinQuery(context.Context) *dsl.Traversal {
	v := g.V().HasLabel(hashequal.Label)
	if heq.gremlin != nil {
		v = heq.gremlin.Clone()
	}
	for _, p := range heq.predicates {
		p(v)
	}
	if len(heq.order) > 0 {
		v.Order()
		for _, p := range heq.order {
			p(v)
		}
	}
	switch limit, offset := heq.ctx.Limit, heq.ctx.Offset; {
	case limit != nil && offset != nil:
		v.Range(*offset, *offset+*limit)
	case offset != nil:
		v.Range(*offset, math.MaxInt32)
	case limit != nil:
		v.Limit(*limit)
	}
	if unique := heq.ctx.Unique; unique == nil || *unique {
		v.Dedup()
	}
	return v
}

// HashEqualGroupBy is the group-by builder for HashEqual entities.
type HashEqualGroupBy struct {
	selector
	build *HashEqualQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hegb *HashEqualGroupBy) Aggregate(fns ...AggregateFunc) *HashEqualGroupBy {
	hegb.fns = append(hegb.fns, fns...)
	return hegb
}

// Scan applies the selector query and scans the result into the given value.
func (hegb *HashEqualGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hegb.build.ctx, "GroupBy")
	if err := hegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HashEqualQuery, *HashEqualGroupBy](ctx, hegb.build, hegb, hegb.build.inters, v)
}

func (hegb *HashEqualGroupBy) gremlinScan(ctx context.Context, root *HashEqualQuery, v any) error {
	var (
		trs   []any
		names []any
	)
	for _, fn := range hegb.fns {
		name, tr := fn("p", "")
		trs = append(trs, tr)
		names = append(names, name)
	}
	for _, f := range *hegb.flds {
		names = append(names, f)
		trs = append(trs, __.As("p").Unfold().Values(f).As(f))
	}
	query, bindings := root.gremlinQuery(ctx).Group().
		By(__.Values(*hegb.flds...).Fold()).
		By(__.Fold().Match(trs...).Select(names...)).
		Select(dsl.Values).
		Next().
		Query()
	res := &gremlin.Response{}
	if err := hegb.build.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(*hegb.flds)+len(hegb.fns) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

// HashEqualSelect is the builder for selecting fields of HashEqual entities.
type HashEqualSelect struct {
	*HashEqualQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hes *HashEqualSelect) Aggregate(fns ...AggregateFunc) *HashEqualSelect {
	hes.fns = append(hes.fns, fns...)
	return hes
}

// Scan applies the selector query and scans the result into the given value.
func (hes *HashEqualSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hes.ctx, "Select")
	if err := hes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HashEqualQuery, *HashEqualSelect](ctx, hes.HashEqualQuery, hes, hes.inters, v)
}

func (hes *HashEqualSelect) gremlinScan(ctx context.Context, root *HashEqualQuery, v any) error {
	var (
		res       = &gremlin.Response{}
		traversal = root.gremlinQuery(ctx)
	)
	if fields := hes.ctx.Fields; len(fields) == 1 {
		if fields[0] != hashequal.FieldID {
			traversal = traversal.Values(fields...)
		} else {
			traversal = traversal.ID()
		}
	} else {
		fields := make([]any, len(hes.ctx.Fields))
		for i, f := range hes.ctx.Fields {
			fields[i] = f
		}
		traversal = traversal.ValueMap(fields...)
	}
	query, bindings := traversal.Query()
	if err := hes.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(root.ctx.Fields) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}
