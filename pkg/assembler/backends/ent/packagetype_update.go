// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagetype"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PackageTypeUpdate is the builder for updating PackageType entities.
type PackageTypeUpdate struct {
	config
	hooks    []Hook
	mutation *PackageTypeMutation
}

// Where appends a list predicates to the PackageTypeUpdate builder.
func (ptu *PackageTypeUpdate) Where(ps ...predicate.PackageType) *PackageTypeUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetType sets the "type" field.
func (ptu *PackageTypeUpdate) SetType(s string) *PackageTypeUpdate {
	ptu.mutation.SetType(s)
	return ptu
}

// AddNamespaceIDs adds the "namespaces" edge to the PackageNamespace entity by IDs.
func (ptu *PackageTypeUpdate) AddNamespaceIDs(ids ...int) *PackageTypeUpdate {
	ptu.mutation.AddNamespaceIDs(ids...)
	return ptu
}

// AddNamespaces adds the "namespaces" edges to the PackageNamespace entity.
func (ptu *PackageTypeUpdate) AddNamespaces(p ...*PackageNamespace) *PackageTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddNamespaceIDs(ids...)
}

// Mutation returns the PackageTypeMutation object of the builder.
func (ptu *PackageTypeUpdate) Mutation() *PackageTypeMutation {
	return ptu.mutation
}

// ClearNamespaces clears all "namespaces" edges to the PackageNamespace entity.
func (ptu *PackageTypeUpdate) ClearNamespaces() *PackageTypeUpdate {
	ptu.mutation.ClearNamespaces()
	return ptu
}

// RemoveNamespaceIDs removes the "namespaces" edge to PackageNamespace entities by IDs.
func (ptu *PackageTypeUpdate) RemoveNamespaceIDs(ids ...int) *PackageTypeUpdate {
	ptu.mutation.RemoveNamespaceIDs(ids...)
	return ptu
}

// RemoveNamespaces removes "namespaces" edges to PackageNamespace entities.
func (ptu *PackageTypeUpdate) RemoveNamespaces(p ...*PackageNamespace) *PackageTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveNamespaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PackageTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.gremlinSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PackageTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PackageTypeUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PackageTypeUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *PackageTypeUpdate) check() error {
	if v, ok := ptu.mutation.GetType(); ok {
		if err := packagetype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PackageType.type": %w`, err)}
		}
	}
	return nil
}

func (ptu *PackageTypeUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := ptu.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := ptu.gremlin().Query()
	if err := ptu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	ptu.mutation.done = true
	return res.ReadInt()
}

func (ptu *PackageTypeUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V().HasLabel(packagetype.Label)
	for _, p := range ptu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := ptu.mutation.GetType(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(packagetype.Label, packagetype.FieldType, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(packagetype.Label, packagetype.FieldType, value)),
		})
		v.Property(dsl.Single, packagetype.FieldType, value)
	}
	for _, id := range ptu.mutation.RemovedNamespacesIDs() {
		tr := rv.Clone().OutE(packagetype.NamespacesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ptu.mutation.NamespacesIDs() {
		v.AddE(packagetype.NamespacesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(packagetype.NamespacesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packagetype.Label, packagetype.NamespacesLabel, id)),
		})
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// PackageTypeUpdateOne is the builder for updating a single PackageType entity.
type PackageTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackageTypeMutation
}

// SetType sets the "type" field.
func (ptuo *PackageTypeUpdateOne) SetType(s string) *PackageTypeUpdateOne {
	ptuo.mutation.SetType(s)
	return ptuo
}

// AddNamespaceIDs adds the "namespaces" edge to the PackageNamespace entity by IDs.
func (ptuo *PackageTypeUpdateOne) AddNamespaceIDs(ids ...int) *PackageTypeUpdateOne {
	ptuo.mutation.AddNamespaceIDs(ids...)
	return ptuo
}

// AddNamespaces adds the "namespaces" edges to the PackageNamespace entity.
func (ptuo *PackageTypeUpdateOne) AddNamespaces(p ...*PackageNamespace) *PackageTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddNamespaceIDs(ids...)
}

// Mutation returns the PackageTypeMutation object of the builder.
func (ptuo *PackageTypeUpdateOne) Mutation() *PackageTypeMutation {
	return ptuo.mutation
}

// ClearNamespaces clears all "namespaces" edges to the PackageNamespace entity.
func (ptuo *PackageTypeUpdateOne) ClearNamespaces() *PackageTypeUpdateOne {
	ptuo.mutation.ClearNamespaces()
	return ptuo
}

// RemoveNamespaceIDs removes the "namespaces" edge to PackageNamespace entities by IDs.
func (ptuo *PackageTypeUpdateOne) RemoveNamespaceIDs(ids ...int) *PackageTypeUpdateOne {
	ptuo.mutation.RemoveNamespaceIDs(ids...)
	return ptuo
}

// RemoveNamespaces removes "namespaces" edges to PackageNamespace entities.
func (ptuo *PackageTypeUpdateOne) RemoveNamespaces(p ...*PackageNamespace) *PackageTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveNamespaceIDs(ids...)
}

// Where appends a list predicates to the PackageTypeUpdate builder.
func (ptuo *PackageTypeUpdateOne) Where(ps ...predicate.PackageType) *PackageTypeUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PackageTypeUpdateOne) Select(field string, fields ...string) *PackageTypeUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PackageType entity.
func (ptuo *PackageTypeUpdateOne) Save(ctx context.Context) (*PackageType, error) {
	return withHooks(ctx, ptuo.gremlinSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PackageTypeUpdateOne) SaveX(ctx context.Context) *PackageType {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PackageTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PackageTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *PackageTypeUpdateOne) check() error {
	if v, ok := ptuo.mutation.GetType(); ok {
		if err := packagetype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PackageType.type": %w`, err)}
		}
	}
	return nil
}

func (ptuo *PackageTypeUpdateOne) gremlinSave(ctx context.Context) (*PackageType, error) {
	if err := ptuo.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PackageType.id" for update`)}
	}
	query, bindings := ptuo.gremlin(id).Query()
	if err := ptuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	ptuo.mutation.done = true
	pt := &PackageType{config: ptuo.config}
	if err := pt.FromResponse(res); err != nil {
		return nil, err
	}
	return pt, nil
}

func (ptuo *PackageTypeUpdateOne) gremlin(id int) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := ptuo.mutation.GetType(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(packagetype.Label, packagetype.FieldType, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(packagetype.Label, packagetype.FieldType, value)),
		})
		v.Property(dsl.Single, packagetype.FieldType, value)
	}
	for _, id := range ptuo.mutation.RemovedNamespacesIDs() {
		tr := rv.Clone().OutE(packagetype.NamespacesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ptuo.mutation.NamespacesIDs() {
		v.AddE(packagetype.NamespacesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(packagetype.NamespacesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packagetype.Label, packagetype.NamespacesLabel, id)),
		})
	}
	if len(ptuo.fields) > 0 {
		fields := make([]any, 0, len(ptuo.fields)+1)
		fields = append(fields, true)
		for _, f := range ptuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
