// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// BillOfMaterialsQuery is the builder for querying BillOfMaterials entities.
type BillOfMaterialsQuery struct {
	config
	ctx          *QueryContext
	order        []billofmaterials.OrderOption
	inters       []Interceptor
	predicates   []predicate.BillOfMaterials
	withPackage  *PackageVersionQuery
	withArtifact *ArtifactQuery
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Where adds a new predicate for the BillOfMaterialsQuery builder.
func (bomq *BillOfMaterialsQuery) Where(ps ...predicate.BillOfMaterials) *BillOfMaterialsQuery {
	bomq.predicates = append(bomq.predicates, ps...)
	return bomq
}

// Limit the number of records to be returned by this query.
func (bomq *BillOfMaterialsQuery) Limit(limit int) *BillOfMaterialsQuery {
	bomq.ctx.Limit = &limit
	return bomq
}

// Offset to start from.
func (bomq *BillOfMaterialsQuery) Offset(offset int) *BillOfMaterialsQuery {
	bomq.ctx.Offset = &offset
	return bomq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bomq *BillOfMaterialsQuery) Unique(unique bool) *BillOfMaterialsQuery {
	bomq.ctx.Unique = &unique
	return bomq
}

// Order specifies how the records should be ordered.
func (bomq *BillOfMaterialsQuery) Order(o ...billofmaterials.OrderOption) *BillOfMaterialsQuery {
	bomq.order = append(bomq.order, o...)
	return bomq
}

// QueryPackage chains the current query on the "package" edge.
func (bomq *BillOfMaterialsQuery) QueryPackage() *PackageVersionQuery {
	query := (&PackageVersionClient{config: bomq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := bomq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := bomq.gremlinQuery(ctx)
		fromU = gremlin.OutE(billofmaterials.PackageLabel).InV()
		return fromU, nil
	}
	return query
}

// QueryArtifact chains the current query on the "artifact" edge.
func (bomq *BillOfMaterialsQuery) QueryArtifact() *ArtifactQuery {
	query := (&ArtifactClient{config: bomq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := bomq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := bomq.gremlinQuery(ctx)
		fromU = gremlin.OutE(billofmaterials.ArtifactLabel).InV()
		return fromU, nil
	}
	return query
}

// First returns the first BillOfMaterials entity from the query.
// Returns a *NotFoundError when no BillOfMaterials was found.
func (bomq *BillOfMaterialsQuery) First(ctx context.Context) (*BillOfMaterials, error) {
	nodes, err := bomq.Limit(1).All(setContextOp(ctx, bomq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{billofmaterials.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bomq *BillOfMaterialsQuery) FirstX(ctx context.Context) *BillOfMaterials {
	node, err := bomq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BillOfMaterials ID from the query.
// Returns a *NotFoundError when no BillOfMaterials ID was found.
func (bomq *BillOfMaterialsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bomq.Limit(1).IDs(setContextOp(ctx, bomq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{billofmaterials.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bomq *BillOfMaterialsQuery) FirstIDX(ctx context.Context) int {
	id, err := bomq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BillOfMaterials entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BillOfMaterials entity is found.
// Returns a *NotFoundError when no BillOfMaterials entities are found.
func (bomq *BillOfMaterialsQuery) Only(ctx context.Context) (*BillOfMaterials, error) {
	nodes, err := bomq.Limit(2).All(setContextOp(ctx, bomq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{billofmaterials.Label}
	default:
		return nil, &NotSingularError{billofmaterials.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bomq *BillOfMaterialsQuery) OnlyX(ctx context.Context) *BillOfMaterials {
	node, err := bomq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BillOfMaterials ID in the query.
// Returns a *NotSingularError when more than one BillOfMaterials ID is found.
// Returns a *NotFoundError when no entities are found.
func (bomq *BillOfMaterialsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bomq.Limit(2).IDs(setContextOp(ctx, bomq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{billofmaterials.Label}
	default:
		err = &NotSingularError{billofmaterials.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bomq *BillOfMaterialsQuery) OnlyIDX(ctx context.Context) int {
	id, err := bomq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BillOfMaterialsSlice.
func (bomq *BillOfMaterialsQuery) All(ctx context.Context) ([]*BillOfMaterials, error) {
	ctx = setContextOp(ctx, bomq.ctx, "All")
	if err := bomq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BillOfMaterials, *BillOfMaterialsQuery]()
	return withInterceptors[[]*BillOfMaterials](ctx, bomq, qr, bomq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bomq *BillOfMaterialsQuery) AllX(ctx context.Context) []*BillOfMaterials {
	nodes, err := bomq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BillOfMaterials IDs.
func (bomq *BillOfMaterialsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if bomq.ctx.Unique == nil && bomq.path != nil {
		bomq.Unique(true)
	}
	ctx = setContextOp(ctx, bomq.ctx, "IDs")
	if err = bomq.Select(billofmaterials.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bomq *BillOfMaterialsQuery) IDsX(ctx context.Context) []int {
	ids, err := bomq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bomq *BillOfMaterialsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bomq.ctx, "Count")
	if err := bomq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bomq, querierCount[*BillOfMaterialsQuery](), bomq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bomq *BillOfMaterialsQuery) CountX(ctx context.Context) int {
	count, err := bomq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bomq *BillOfMaterialsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bomq.ctx, "Exist")
	switch _, err := bomq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bomq *BillOfMaterialsQuery) ExistX(ctx context.Context) bool {
	exist, err := bomq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BillOfMaterialsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bomq *BillOfMaterialsQuery) Clone() *BillOfMaterialsQuery {
	if bomq == nil {
		return nil
	}
	return &BillOfMaterialsQuery{
		config:       bomq.config,
		ctx:          bomq.ctx.Clone(),
		order:        append([]billofmaterials.OrderOption{}, bomq.order...),
		inters:       append([]Interceptor{}, bomq.inters...),
		predicates:   append([]predicate.BillOfMaterials{}, bomq.predicates...),
		withPackage:  bomq.withPackage.Clone(),
		withArtifact: bomq.withArtifact.Clone(),
		// clone intermediate query.
		gremlin: bomq.gremlin.Clone(),
		path:    bomq.path,
	}
}

// WithPackage tells the query-builder to eager-load the nodes that are connected to
// the "package" edge. The optional arguments are used to configure the query builder of the edge.
func (bomq *BillOfMaterialsQuery) WithPackage(opts ...func(*PackageVersionQuery)) *BillOfMaterialsQuery {
	query := (&PackageVersionClient{config: bomq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bomq.withPackage = query
	return bomq
}

// WithArtifact tells the query-builder to eager-load the nodes that are connected to
// the "artifact" edge. The optional arguments are used to configure the query builder of the edge.
func (bomq *BillOfMaterialsQuery) WithArtifact(opts ...func(*ArtifactQuery)) *BillOfMaterialsQuery {
	query := (&ArtifactClient{config: bomq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bomq.withArtifact = query
	return bomq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PackageID int `json:"package_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BillOfMaterials.Query().
//		GroupBy(billofmaterials.FieldPackageID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bomq *BillOfMaterialsQuery) GroupBy(field string, fields ...string) *BillOfMaterialsGroupBy {
	bomq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BillOfMaterialsGroupBy{build: bomq}
	grbuild.flds = &bomq.ctx.Fields
	grbuild.label = billofmaterials.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PackageID int `json:"package_id,omitempty"`
//	}
//
//	client.BillOfMaterials.Query().
//		Select(billofmaterials.FieldPackageID).
//		Scan(ctx, &v)
func (bomq *BillOfMaterialsQuery) Select(fields ...string) *BillOfMaterialsSelect {
	bomq.ctx.Fields = append(bomq.ctx.Fields, fields...)
	sbuild := &BillOfMaterialsSelect{BillOfMaterialsQuery: bomq}
	sbuild.label = billofmaterials.Label
	sbuild.flds, sbuild.scan = &bomq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BillOfMaterialsSelect configured with the given aggregations.
func (bomq *BillOfMaterialsQuery) Aggregate(fns ...AggregateFunc) *BillOfMaterialsSelect {
	return bomq.Select().Aggregate(fns...)
}

func (bomq *BillOfMaterialsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bomq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bomq); err != nil {
				return err
			}
		}
	}
	if bomq.path != nil {
		prev, err := bomq.path(ctx)
		if err != nil {
			return err
		}
		bomq.gremlin = prev
	}
	return nil
}

func (bomq *BillOfMaterialsQuery) gremlinAll(ctx context.Context, hooks ...queryHook) ([]*BillOfMaterials, error) {
	res := &gremlin.Response{}
	traversal := bomq.gremlinQuery(ctx)
	if len(bomq.ctx.Fields) > 0 {
		fields := make([]any, len(bomq.ctx.Fields))
		for i, f := range bomq.ctx.Fields {
			fields[i] = f
		}
		traversal.ValueMap(fields...)
	} else {
		traversal.ValueMap(true)
	}
	query, bindings := traversal.Query()
	if err := bomq.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	var boms BillOfMaterialsSlice
	if err := boms.FromResponse(res); err != nil {
		return nil, err
	}
	for i := range boms {
		boms[i].config = bomq.config
	}
	return boms, nil
}

func (bomq *BillOfMaterialsQuery) gremlinCount(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := bomq.gremlinQuery(ctx).Count().Query()
	if err := bomq.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (bomq *BillOfMaterialsQuery) gremlinQuery(context.Context) *dsl.Traversal {
	v := g.V().HasLabel(billofmaterials.Label)
	if bomq.gremlin != nil {
		v = bomq.gremlin.Clone()
	}
	for _, p := range bomq.predicates {
		p(v)
	}
	if len(bomq.order) > 0 {
		v.Order()
		for _, p := range bomq.order {
			p(v)
		}
	}
	switch limit, offset := bomq.ctx.Limit, bomq.ctx.Offset; {
	case limit != nil && offset != nil:
		v.Range(*offset, *offset+*limit)
	case offset != nil:
		v.Range(*offset, math.MaxInt32)
	case limit != nil:
		v.Limit(*limit)
	}
	if unique := bomq.ctx.Unique; unique == nil || *unique {
		v.Dedup()
	}
	return v
}

// BillOfMaterialsGroupBy is the group-by builder for BillOfMaterials entities.
type BillOfMaterialsGroupBy struct {
	selector
	build *BillOfMaterialsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bomgb *BillOfMaterialsGroupBy) Aggregate(fns ...AggregateFunc) *BillOfMaterialsGroupBy {
	bomgb.fns = append(bomgb.fns, fns...)
	return bomgb
}

// Scan applies the selector query and scans the result into the given value.
func (bomgb *BillOfMaterialsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bomgb.build.ctx, "GroupBy")
	if err := bomgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillOfMaterialsQuery, *BillOfMaterialsGroupBy](ctx, bomgb.build, bomgb, bomgb.build.inters, v)
}

func (bomgb *BillOfMaterialsGroupBy) gremlinScan(ctx context.Context, root *BillOfMaterialsQuery, v any) error {
	var (
		trs   []any
		names []any
	)
	for _, fn := range bomgb.fns {
		name, tr := fn("p", "")
		trs = append(trs, tr)
		names = append(names, name)
	}
	for _, f := range *bomgb.flds {
		names = append(names, f)
		trs = append(trs, __.As("p").Unfold().Values(f).As(f))
	}
	query, bindings := root.gremlinQuery(ctx).Group().
		By(__.Values(*bomgb.flds...).Fold()).
		By(__.Fold().Match(trs...).Select(names...)).
		Select(dsl.Values).
		Next().
		Query()
	res := &gremlin.Response{}
	if err := bomgb.build.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(*bomgb.flds)+len(bomgb.fns) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

// BillOfMaterialsSelect is the builder for selecting fields of BillOfMaterials entities.
type BillOfMaterialsSelect struct {
	*BillOfMaterialsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (boms *BillOfMaterialsSelect) Aggregate(fns ...AggregateFunc) *BillOfMaterialsSelect {
	boms.fns = append(boms.fns, fns...)
	return boms
}

// Scan applies the selector query and scans the result into the given value.
func (boms *BillOfMaterialsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, boms.ctx, "Select")
	if err := boms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillOfMaterialsQuery, *BillOfMaterialsSelect](ctx, boms.BillOfMaterialsQuery, boms, boms.inters, v)
}

func (boms *BillOfMaterialsSelect) gremlinScan(ctx context.Context, root *BillOfMaterialsQuery, v any) error {
	var (
		res       = &gremlin.Response{}
		traversal = root.gremlinQuery(ctx)
	)
	if fields := boms.ctx.Fields; len(fields) == 1 {
		if fields[0] != billofmaterials.FieldID {
			traversal = traversal.Values(fields...)
		} else {
			traversal = traversal.ID()
		}
	} else {
		fields := make([]any, len(boms.ctx.Fields))
		for i, f := range boms.ctx.Fields {
			fields[i] = f
		}
		traversal = traversal.ValueMap(fields...)
	}
	query, bindings := traversal.Query()
	if err := boms.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(root.ctx.Fields) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}
