// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pkgequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PkgEqualUpdate is the builder for updating PkgEqual entities.
type PkgEqualUpdate struct {
	config
	hooks    []Hook
	mutation *PkgEqualMutation
}

// Where appends a list predicates to the PkgEqualUpdate builder.
func (peu *PkgEqualUpdate) Where(ps ...predicate.PkgEqual) *PkgEqualUpdate {
	peu.mutation.Where(ps...)
	return peu
}

// SetOrigin sets the "origin" field.
func (peu *PkgEqualUpdate) SetOrigin(s string) *PkgEqualUpdate {
	peu.mutation.SetOrigin(s)
	return peu
}

// SetCollector sets the "collector" field.
func (peu *PkgEqualUpdate) SetCollector(s string) *PkgEqualUpdate {
	peu.mutation.SetCollector(s)
	return peu
}

// SetJustification sets the "justification" field.
func (peu *PkgEqualUpdate) SetJustification(s string) *PkgEqualUpdate {
	peu.mutation.SetJustification(s)
	return peu
}

// SetPackagesHash sets the "packages_hash" field.
func (peu *PkgEqualUpdate) SetPackagesHash(s string) *PkgEqualUpdate {
	peu.mutation.SetPackagesHash(s)
	return peu
}

// AddPackageIDs adds the "packages" edge to the PackageVersion entity by IDs.
func (peu *PkgEqualUpdate) AddPackageIDs(ids ...int) *PkgEqualUpdate {
	peu.mutation.AddPackageIDs(ids...)
	return peu
}

// AddPackages adds the "packages" edges to the PackageVersion entity.
func (peu *PkgEqualUpdate) AddPackages(p ...*PackageVersion) *PkgEqualUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return peu.AddPackageIDs(ids...)
}

// Mutation returns the PkgEqualMutation object of the builder.
func (peu *PkgEqualUpdate) Mutation() *PkgEqualMutation {
	return peu.mutation
}

// ClearPackages clears all "packages" edges to the PackageVersion entity.
func (peu *PkgEqualUpdate) ClearPackages() *PkgEqualUpdate {
	peu.mutation.ClearPackages()
	return peu
}

// RemovePackageIDs removes the "packages" edge to PackageVersion entities by IDs.
func (peu *PkgEqualUpdate) RemovePackageIDs(ids ...int) *PkgEqualUpdate {
	peu.mutation.RemovePackageIDs(ids...)
	return peu
}

// RemovePackages removes "packages" edges to PackageVersion entities.
func (peu *PkgEqualUpdate) RemovePackages(p ...*PackageVersion) *PkgEqualUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return peu.RemovePackageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (peu *PkgEqualUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, peu.gremlinSave, peu.mutation, peu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peu *PkgEqualUpdate) SaveX(ctx context.Context) int {
	affected, err := peu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (peu *PkgEqualUpdate) Exec(ctx context.Context) error {
	_, err := peu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peu *PkgEqualUpdate) ExecX(ctx context.Context) {
	if err := peu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (peu *PkgEqualUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := peu.gremlin().Query()
	if err := peu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	peu.mutation.done = true
	return res.ReadInt()
}

func (peu *PkgEqualUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(pkgequal.Label)
	for _, p := range peu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := peu.mutation.Origin(); ok {
		v.Property(dsl.Single, pkgequal.FieldOrigin, value)
	}
	if value, ok := peu.mutation.Collector(); ok {
		v.Property(dsl.Single, pkgequal.FieldCollector, value)
	}
	if value, ok := peu.mutation.Justification(); ok {
		v.Property(dsl.Single, pkgequal.FieldJustification, value)
	}
	if value, ok := peu.mutation.PackagesHash(); ok {
		v.Property(dsl.Single, pkgequal.FieldPackagesHash, value)
	}
	for _, id := range peu.mutation.RemovedPackagesIDs() {
		tr := rv.Clone().OutE(pkgequal.PackagesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range peu.mutation.PackagesIDs() {
		v.AddE(pkgequal.PackagesLabel).To(g.V(id)).OutV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// PkgEqualUpdateOne is the builder for updating a single PkgEqual entity.
type PkgEqualUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PkgEqualMutation
}

// SetOrigin sets the "origin" field.
func (peuo *PkgEqualUpdateOne) SetOrigin(s string) *PkgEqualUpdateOne {
	peuo.mutation.SetOrigin(s)
	return peuo
}

// SetCollector sets the "collector" field.
func (peuo *PkgEqualUpdateOne) SetCollector(s string) *PkgEqualUpdateOne {
	peuo.mutation.SetCollector(s)
	return peuo
}

// SetJustification sets the "justification" field.
func (peuo *PkgEqualUpdateOne) SetJustification(s string) *PkgEqualUpdateOne {
	peuo.mutation.SetJustification(s)
	return peuo
}

// SetPackagesHash sets the "packages_hash" field.
func (peuo *PkgEqualUpdateOne) SetPackagesHash(s string) *PkgEqualUpdateOne {
	peuo.mutation.SetPackagesHash(s)
	return peuo
}

// AddPackageIDs adds the "packages" edge to the PackageVersion entity by IDs.
func (peuo *PkgEqualUpdateOne) AddPackageIDs(ids ...int) *PkgEqualUpdateOne {
	peuo.mutation.AddPackageIDs(ids...)
	return peuo
}

// AddPackages adds the "packages" edges to the PackageVersion entity.
func (peuo *PkgEqualUpdateOne) AddPackages(p ...*PackageVersion) *PkgEqualUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return peuo.AddPackageIDs(ids...)
}

// Mutation returns the PkgEqualMutation object of the builder.
func (peuo *PkgEqualUpdateOne) Mutation() *PkgEqualMutation {
	return peuo.mutation
}

// ClearPackages clears all "packages" edges to the PackageVersion entity.
func (peuo *PkgEqualUpdateOne) ClearPackages() *PkgEqualUpdateOne {
	peuo.mutation.ClearPackages()
	return peuo
}

// RemovePackageIDs removes the "packages" edge to PackageVersion entities by IDs.
func (peuo *PkgEqualUpdateOne) RemovePackageIDs(ids ...int) *PkgEqualUpdateOne {
	peuo.mutation.RemovePackageIDs(ids...)
	return peuo
}

// RemovePackages removes "packages" edges to PackageVersion entities.
func (peuo *PkgEqualUpdateOne) RemovePackages(p ...*PackageVersion) *PkgEqualUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return peuo.RemovePackageIDs(ids...)
}

// Where appends a list predicates to the PkgEqualUpdate builder.
func (peuo *PkgEqualUpdateOne) Where(ps ...predicate.PkgEqual) *PkgEqualUpdateOne {
	peuo.mutation.Where(ps...)
	return peuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (peuo *PkgEqualUpdateOne) Select(field string, fields ...string) *PkgEqualUpdateOne {
	peuo.fields = append([]string{field}, fields...)
	return peuo
}

// Save executes the query and returns the updated PkgEqual entity.
func (peuo *PkgEqualUpdateOne) Save(ctx context.Context) (*PkgEqual, error) {
	return withHooks(ctx, peuo.gremlinSave, peuo.mutation, peuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peuo *PkgEqualUpdateOne) SaveX(ctx context.Context) *PkgEqual {
	node, err := peuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (peuo *PkgEqualUpdateOne) Exec(ctx context.Context) error {
	_, err := peuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peuo *PkgEqualUpdateOne) ExecX(ctx context.Context) {
	if err := peuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (peuo *PkgEqualUpdateOne) gremlinSave(ctx context.Context) (*PkgEqual, error) {
	res := &gremlin.Response{}
	id, ok := peuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PkgEqual.id" for update`)}
	}
	query, bindings := peuo.gremlin(id).Query()
	if err := peuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	peuo.mutation.done = true
	pe := &PkgEqual{config: peuo.config}
	if err := pe.FromResponse(res); err != nil {
		return nil, err
	}
	return pe, nil
}

func (peuo *PkgEqualUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := peuo.mutation.Origin(); ok {
		v.Property(dsl.Single, pkgequal.FieldOrigin, value)
	}
	if value, ok := peuo.mutation.Collector(); ok {
		v.Property(dsl.Single, pkgequal.FieldCollector, value)
	}
	if value, ok := peuo.mutation.Justification(); ok {
		v.Property(dsl.Single, pkgequal.FieldJustification, value)
	}
	if value, ok := peuo.mutation.PackagesHash(); ok {
		v.Property(dsl.Single, pkgequal.FieldPackagesHash, value)
	}
	for _, id := range peuo.mutation.RemovedPackagesIDs() {
		tr := rv.Clone().OutE(pkgequal.PackagesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range peuo.mutation.PackagesIDs() {
		v.AddE(pkgequal.PackagesLabel).To(g.V(id)).OutV()
	}
	if len(peuo.fields) > 0 {
		fields := make([]any, 0, len(peuo.fields)+1)
		fields = append(fields, true)
		for _, f := range peuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
