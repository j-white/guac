// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pkgequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// PackageVersionUpdate is the builder for updating PackageVersion entities.
type PackageVersionUpdate struct {
	config
	hooks    []Hook
	mutation *PackageVersionMutation
}

// Where appends a list predicates to the PackageVersionUpdate builder.
func (pvu *PackageVersionUpdate) Where(ps ...predicate.PackageVersion) *PackageVersionUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetNameID sets the "name_id" field.
func (pvu *PackageVersionUpdate) SetNameID(i int) *PackageVersionUpdate {
	pvu.mutation.SetNameID(i)
	return pvu
}

// SetVersion sets the "version" field.
func (pvu *PackageVersionUpdate) SetVersion(s string) *PackageVersionUpdate {
	pvu.mutation.SetVersion(s)
	return pvu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pvu *PackageVersionUpdate) SetNillableVersion(s *string) *PackageVersionUpdate {
	if s != nil {
		pvu.SetVersion(*s)
	}
	return pvu
}

// SetSubpath sets the "subpath" field.
func (pvu *PackageVersionUpdate) SetSubpath(s string) *PackageVersionUpdate {
	pvu.mutation.SetSubpath(s)
	return pvu
}

// SetNillableSubpath sets the "subpath" field if the given value is not nil.
func (pvu *PackageVersionUpdate) SetNillableSubpath(s *string) *PackageVersionUpdate {
	if s != nil {
		pvu.SetSubpath(*s)
	}
	return pvu
}

// SetQualifiers sets the "qualifiers" field.
func (pvu *PackageVersionUpdate) SetQualifiers(mq []model.PackageQualifier) *PackageVersionUpdate {
	pvu.mutation.SetQualifiers(mq)
	return pvu
}

// AppendQualifiers appends mq to the "qualifiers" field.
func (pvu *PackageVersionUpdate) AppendQualifiers(mq []model.PackageQualifier) *PackageVersionUpdate {
	pvu.mutation.AppendQualifiers(mq)
	return pvu
}

// ClearQualifiers clears the value of the "qualifiers" field.
func (pvu *PackageVersionUpdate) ClearQualifiers() *PackageVersionUpdate {
	pvu.mutation.ClearQualifiers()
	return pvu
}

// SetHash sets the "hash" field.
func (pvu *PackageVersionUpdate) SetHash(s string) *PackageVersionUpdate {
	pvu.mutation.SetHash(s)
	return pvu
}

// SetName sets the "name" edge to the PackageName entity.
func (pvu *PackageVersionUpdate) SetName(p *PackageName) *PackageVersionUpdate {
	return pvu.SetNameID(p.ID)
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (pvu *PackageVersionUpdate) AddOccurrenceIDs(ids ...int) *PackageVersionUpdate {
	pvu.mutation.AddOccurrenceIDs(ids...)
	return pvu
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (pvu *PackageVersionUpdate) AddOccurrences(o ...*Occurrence) *PackageVersionUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pvu.AddOccurrenceIDs(ids...)
}

// AddSbomIDs adds the "sbom" edge to the BillOfMaterials entity by IDs.
func (pvu *PackageVersionUpdate) AddSbomIDs(ids ...int) *PackageVersionUpdate {
	pvu.mutation.AddSbomIDs(ids...)
	return pvu
}

// AddSbom adds the "sbom" edges to the BillOfMaterials entity.
func (pvu *PackageVersionUpdate) AddSbom(b ...*BillOfMaterials) *PackageVersionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pvu.AddSbomIDs(ids...)
}

// AddEqualPackageIDs adds the "equal_packages" edge to the PkgEqual entity by IDs.
func (pvu *PackageVersionUpdate) AddEqualPackageIDs(ids ...int) *PackageVersionUpdate {
	pvu.mutation.AddEqualPackageIDs(ids...)
	return pvu
}

// AddEqualPackages adds the "equal_packages" edges to the PkgEqual entity.
func (pvu *PackageVersionUpdate) AddEqualPackages(p ...*PkgEqual) *PackageVersionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvu.AddEqualPackageIDs(ids...)
}

// Mutation returns the PackageVersionMutation object of the builder.
func (pvu *PackageVersionUpdate) Mutation() *PackageVersionMutation {
	return pvu.mutation
}

// ClearName clears the "name" edge to the PackageName entity.
func (pvu *PackageVersionUpdate) ClearName() *PackageVersionUpdate {
	pvu.mutation.ClearName()
	return pvu
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (pvu *PackageVersionUpdate) ClearOccurrences() *PackageVersionUpdate {
	pvu.mutation.ClearOccurrences()
	return pvu
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (pvu *PackageVersionUpdate) RemoveOccurrenceIDs(ids ...int) *PackageVersionUpdate {
	pvu.mutation.RemoveOccurrenceIDs(ids...)
	return pvu
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (pvu *PackageVersionUpdate) RemoveOccurrences(o ...*Occurrence) *PackageVersionUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pvu.RemoveOccurrenceIDs(ids...)
}

// ClearSbom clears all "sbom" edges to the BillOfMaterials entity.
func (pvu *PackageVersionUpdate) ClearSbom() *PackageVersionUpdate {
	pvu.mutation.ClearSbom()
	return pvu
}

// RemoveSbomIDs removes the "sbom" edge to BillOfMaterials entities by IDs.
func (pvu *PackageVersionUpdate) RemoveSbomIDs(ids ...int) *PackageVersionUpdate {
	pvu.mutation.RemoveSbomIDs(ids...)
	return pvu
}

// RemoveSbom removes "sbom" edges to BillOfMaterials entities.
func (pvu *PackageVersionUpdate) RemoveSbom(b ...*BillOfMaterials) *PackageVersionUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pvu.RemoveSbomIDs(ids...)
}

// ClearEqualPackages clears all "equal_packages" edges to the PkgEqual entity.
func (pvu *PackageVersionUpdate) ClearEqualPackages() *PackageVersionUpdate {
	pvu.mutation.ClearEqualPackages()
	return pvu
}

// RemoveEqualPackageIDs removes the "equal_packages" edge to PkgEqual entities by IDs.
func (pvu *PackageVersionUpdate) RemoveEqualPackageIDs(ids ...int) *PackageVersionUpdate {
	pvu.mutation.RemoveEqualPackageIDs(ids...)
	return pvu
}

// RemoveEqualPackages removes "equal_packages" edges to PkgEqual entities.
func (pvu *PackageVersionUpdate) RemoveEqualPackages(p ...*PkgEqual) *PackageVersionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvu.RemoveEqualPackageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *PackageVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pvu.gremlinSave, pvu.mutation, pvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *PackageVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *PackageVersionUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *PackageVersionUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvu *PackageVersionUpdate) check() error {
	if _, ok := pvu.mutation.NameID(); pvu.mutation.NameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PackageVersion.name"`)
	}
	return nil
}

func (pvu *PackageVersionUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := pvu.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := pvu.gremlin().Query()
	if err := pvu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	pvu.mutation.done = true
	return res.ReadInt()
}

func (pvu *PackageVersionUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V().HasLabel(packageversion.Label)
	for _, p := range pvu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := pvu.mutation.Version(); ok {
		v.Property(dsl.Single, packageversion.FieldVersion, value)
	}
	if value, ok := pvu.mutation.Subpath(); ok {
		v.Property(dsl.Single, packageversion.FieldSubpath, value)
	}
	if value, ok := pvu.mutation.Qualifiers(); ok {
		v.Property(dsl.Single, packageversion.FieldQualifiers, value)
	}
	if value, ok := pvu.mutation.Hash(); ok {
		v.Property(dsl.Single, packageversion.FieldHash, value)
	}
	var properties []any
	if pvu.mutation.QualifiersCleared() {
		properties = append(properties, packageversion.FieldQualifiers)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if pvu.mutation.NameCleared() {
		tr := rv.Clone().InE(packagename.VersionsLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pvu.mutation.NameIDs() {
		v.AddE(packagename.VersionsLabel).From(g.V(id)).InV()
	}
	for _, id := range pvu.mutation.RemovedOccurrencesIDs() {
		tr := rv.Clone().InE(occurrence.PackageLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pvu.mutation.OccurrencesIDs() {
		v.AddE(occurrence.PackageLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(occurrence.PackageLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packageversion.Label, occurrence.PackageLabel, id)),
		})
	}
	for _, id := range pvu.mutation.RemovedSbomIDs() {
		tr := rv.Clone().InE(billofmaterials.PackageLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pvu.mutation.SbomIDs() {
		v.AddE(billofmaterials.PackageLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(billofmaterials.PackageLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packageversion.Label, billofmaterials.PackageLabel, id)),
		})
	}
	for _, id := range pvu.mutation.RemovedEqualPackagesIDs() {
		tr := rv.Clone().InE(pkgequal.PackagesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pvu.mutation.EqualPackagesIDs() {
		v.AddE(pkgequal.PackagesLabel).From(g.V(id)).InV()
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// PackageVersionUpdateOne is the builder for updating a single PackageVersion entity.
type PackageVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackageVersionMutation
}

// SetNameID sets the "name_id" field.
func (pvuo *PackageVersionUpdateOne) SetNameID(i int) *PackageVersionUpdateOne {
	pvuo.mutation.SetNameID(i)
	return pvuo
}

// SetVersion sets the "version" field.
func (pvuo *PackageVersionUpdateOne) SetVersion(s string) *PackageVersionUpdateOne {
	pvuo.mutation.SetVersion(s)
	return pvuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pvuo *PackageVersionUpdateOne) SetNillableVersion(s *string) *PackageVersionUpdateOne {
	if s != nil {
		pvuo.SetVersion(*s)
	}
	return pvuo
}

// SetSubpath sets the "subpath" field.
func (pvuo *PackageVersionUpdateOne) SetSubpath(s string) *PackageVersionUpdateOne {
	pvuo.mutation.SetSubpath(s)
	return pvuo
}

// SetNillableSubpath sets the "subpath" field if the given value is not nil.
func (pvuo *PackageVersionUpdateOne) SetNillableSubpath(s *string) *PackageVersionUpdateOne {
	if s != nil {
		pvuo.SetSubpath(*s)
	}
	return pvuo
}

// SetQualifiers sets the "qualifiers" field.
func (pvuo *PackageVersionUpdateOne) SetQualifiers(mq []model.PackageQualifier) *PackageVersionUpdateOne {
	pvuo.mutation.SetQualifiers(mq)
	return pvuo
}

// AppendQualifiers appends mq to the "qualifiers" field.
func (pvuo *PackageVersionUpdateOne) AppendQualifiers(mq []model.PackageQualifier) *PackageVersionUpdateOne {
	pvuo.mutation.AppendQualifiers(mq)
	return pvuo
}

// ClearQualifiers clears the value of the "qualifiers" field.
func (pvuo *PackageVersionUpdateOne) ClearQualifiers() *PackageVersionUpdateOne {
	pvuo.mutation.ClearQualifiers()
	return pvuo
}

// SetHash sets the "hash" field.
func (pvuo *PackageVersionUpdateOne) SetHash(s string) *PackageVersionUpdateOne {
	pvuo.mutation.SetHash(s)
	return pvuo
}

// SetName sets the "name" edge to the PackageName entity.
func (pvuo *PackageVersionUpdateOne) SetName(p *PackageName) *PackageVersionUpdateOne {
	return pvuo.SetNameID(p.ID)
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (pvuo *PackageVersionUpdateOne) AddOccurrenceIDs(ids ...int) *PackageVersionUpdateOne {
	pvuo.mutation.AddOccurrenceIDs(ids...)
	return pvuo
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (pvuo *PackageVersionUpdateOne) AddOccurrences(o ...*Occurrence) *PackageVersionUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pvuo.AddOccurrenceIDs(ids...)
}

// AddSbomIDs adds the "sbom" edge to the BillOfMaterials entity by IDs.
func (pvuo *PackageVersionUpdateOne) AddSbomIDs(ids ...int) *PackageVersionUpdateOne {
	pvuo.mutation.AddSbomIDs(ids...)
	return pvuo
}

// AddSbom adds the "sbom" edges to the BillOfMaterials entity.
func (pvuo *PackageVersionUpdateOne) AddSbom(b ...*BillOfMaterials) *PackageVersionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pvuo.AddSbomIDs(ids...)
}

// AddEqualPackageIDs adds the "equal_packages" edge to the PkgEqual entity by IDs.
func (pvuo *PackageVersionUpdateOne) AddEqualPackageIDs(ids ...int) *PackageVersionUpdateOne {
	pvuo.mutation.AddEqualPackageIDs(ids...)
	return pvuo
}

// AddEqualPackages adds the "equal_packages" edges to the PkgEqual entity.
func (pvuo *PackageVersionUpdateOne) AddEqualPackages(p ...*PkgEqual) *PackageVersionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvuo.AddEqualPackageIDs(ids...)
}

// Mutation returns the PackageVersionMutation object of the builder.
func (pvuo *PackageVersionUpdateOne) Mutation() *PackageVersionMutation {
	return pvuo.mutation
}

// ClearName clears the "name" edge to the PackageName entity.
func (pvuo *PackageVersionUpdateOne) ClearName() *PackageVersionUpdateOne {
	pvuo.mutation.ClearName()
	return pvuo
}

// ClearOccurrences clears all "occurrences" edges to the Occurrence entity.
func (pvuo *PackageVersionUpdateOne) ClearOccurrences() *PackageVersionUpdateOne {
	pvuo.mutation.ClearOccurrences()
	return pvuo
}

// RemoveOccurrenceIDs removes the "occurrences" edge to Occurrence entities by IDs.
func (pvuo *PackageVersionUpdateOne) RemoveOccurrenceIDs(ids ...int) *PackageVersionUpdateOne {
	pvuo.mutation.RemoveOccurrenceIDs(ids...)
	return pvuo
}

// RemoveOccurrences removes "occurrences" edges to Occurrence entities.
func (pvuo *PackageVersionUpdateOne) RemoveOccurrences(o ...*Occurrence) *PackageVersionUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pvuo.RemoveOccurrenceIDs(ids...)
}

// ClearSbom clears all "sbom" edges to the BillOfMaterials entity.
func (pvuo *PackageVersionUpdateOne) ClearSbom() *PackageVersionUpdateOne {
	pvuo.mutation.ClearSbom()
	return pvuo
}

// RemoveSbomIDs removes the "sbom" edge to BillOfMaterials entities by IDs.
func (pvuo *PackageVersionUpdateOne) RemoveSbomIDs(ids ...int) *PackageVersionUpdateOne {
	pvuo.mutation.RemoveSbomIDs(ids...)
	return pvuo
}

// RemoveSbom removes "sbom" edges to BillOfMaterials entities.
func (pvuo *PackageVersionUpdateOne) RemoveSbom(b ...*BillOfMaterials) *PackageVersionUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pvuo.RemoveSbomIDs(ids...)
}

// ClearEqualPackages clears all "equal_packages" edges to the PkgEqual entity.
func (pvuo *PackageVersionUpdateOne) ClearEqualPackages() *PackageVersionUpdateOne {
	pvuo.mutation.ClearEqualPackages()
	return pvuo
}

// RemoveEqualPackageIDs removes the "equal_packages" edge to PkgEqual entities by IDs.
func (pvuo *PackageVersionUpdateOne) RemoveEqualPackageIDs(ids ...int) *PackageVersionUpdateOne {
	pvuo.mutation.RemoveEqualPackageIDs(ids...)
	return pvuo
}

// RemoveEqualPackages removes "equal_packages" edges to PkgEqual entities.
func (pvuo *PackageVersionUpdateOne) RemoveEqualPackages(p ...*PkgEqual) *PackageVersionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvuo.RemoveEqualPackageIDs(ids...)
}

// Where appends a list predicates to the PackageVersionUpdate builder.
func (pvuo *PackageVersionUpdateOne) Where(ps ...predicate.PackageVersion) *PackageVersionUpdateOne {
	pvuo.mutation.Where(ps...)
	return pvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *PackageVersionUpdateOne) Select(field string, fields ...string) *PackageVersionUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated PackageVersion entity.
func (pvuo *PackageVersionUpdateOne) Save(ctx context.Context) (*PackageVersion, error) {
	return withHooks(ctx, pvuo.gremlinSave, pvuo.mutation, pvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *PackageVersionUpdateOne) SaveX(ctx context.Context) *PackageVersion {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *PackageVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *PackageVersionUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvuo *PackageVersionUpdateOne) check() error {
	if _, ok := pvuo.mutation.NameID(); pvuo.mutation.NameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PackageVersion.name"`)
	}
	return nil
}

func (pvuo *PackageVersionUpdateOne) gremlinSave(ctx context.Context) (*PackageVersion, error) {
	if err := pvuo.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PackageVersion.id" for update`)}
	}
	query, bindings := pvuo.gremlin(id).Query()
	if err := pvuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	pvuo.mutation.done = true
	pv := &PackageVersion{config: pvuo.config}
	if err := pv.FromResponse(res); err != nil {
		return nil, err
	}
	return pv, nil
}

func (pvuo *PackageVersionUpdateOne) gremlin(id int) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := pvuo.mutation.Version(); ok {
		v.Property(dsl.Single, packageversion.FieldVersion, value)
	}
	if value, ok := pvuo.mutation.Subpath(); ok {
		v.Property(dsl.Single, packageversion.FieldSubpath, value)
	}
	if value, ok := pvuo.mutation.Qualifiers(); ok {
		v.Property(dsl.Single, packageversion.FieldQualifiers, value)
	}
	if value, ok := pvuo.mutation.Hash(); ok {
		v.Property(dsl.Single, packageversion.FieldHash, value)
	}
	var properties []any
	if pvuo.mutation.QualifiersCleared() {
		properties = append(properties, packageversion.FieldQualifiers)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if pvuo.mutation.NameCleared() {
		tr := rv.Clone().InE(packagename.VersionsLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pvuo.mutation.NameIDs() {
		v.AddE(packagename.VersionsLabel).From(g.V(id)).InV()
	}
	for _, id := range pvuo.mutation.RemovedOccurrencesIDs() {
		tr := rv.Clone().InE(occurrence.PackageLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pvuo.mutation.OccurrencesIDs() {
		v.AddE(occurrence.PackageLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(occurrence.PackageLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packageversion.Label, occurrence.PackageLabel, id)),
		})
	}
	for _, id := range pvuo.mutation.RemovedSbomIDs() {
		tr := rv.Clone().InE(billofmaterials.PackageLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pvuo.mutation.SbomIDs() {
		v.AddE(billofmaterials.PackageLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(billofmaterials.PackageLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packageversion.Label, billofmaterials.PackageLabel, id)),
		})
	}
	for _, id := range pvuo.mutation.RemovedEqualPackagesIDs() {
		tr := rv.Clone().InE(pkgequal.PackagesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pvuo.mutation.EqualPackagesIDs() {
		v.AddE(pkgequal.PackagesLabel).From(g.V(id)).InV()
	}
	if len(pvuo.fields) > 0 {
		fields := make([]any, 0, len(pvuo.fields)+1)
		fields = append(fields, true)
		for _, f := range pvuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
