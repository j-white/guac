// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
)

// PackageNameCreate is the builder for creating a PackageName entity.
type PackageNameCreate struct {
	config
	mutation *PackageNameMutation
	hooks    []Hook
}

// SetNamespaceID sets the "namespace_id" field.
func (pnc *PackageNameCreate) SetNamespaceID(i int) *PackageNameCreate {
	pnc.mutation.SetNamespaceID(i)
	return pnc
}

// SetName sets the "name" field.
func (pnc *PackageNameCreate) SetName(s string) *PackageNameCreate {
	pnc.mutation.SetName(s)
	return pnc
}

// SetNamespace sets the "namespace" edge to the PackageNamespace entity.
func (pnc *PackageNameCreate) SetNamespace(p *PackageNamespace) *PackageNameCreate {
	return pnc.SetNamespaceID(p.ID)
}

// AddVersionIDs adds the "versions" edge to the PackageVersion entity by IDs.
func (pnc *PackageNameCreate) AddVersionIDs(ids ...int) *PackageNameCreate {
	pnc.mutation.AddVersionIDs(ids...)
	return pnc
}

// AddVersions adds the "versions" edges to the PackageVersion entity.
func (pnc *PackageNameCreate) AddVersions(p ...*PackageVersion) *PackageNameCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pnc.AddVersionIDs(ids...)
}

// Mutation returns the PackageNameMutation object of the builder.
func (pnc *PackageNameCreate) Mutation() *PackageNameMutation {
	return pnc.mutation
}

// Save creates the PackageName in the database.
func (pnc *PackageNameCreate) Save(ctx context.Context) (*PackageName, error) {
	return withHooks(ctx, pnc.gremlinSave, pnc.mutation, pnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pnc *PackageNameCreate) SaveX(ctx context.Context) *PackageName {
	v, err := pnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pnc *PackageNameCreate) Exec(ctx context.Context) error {
	_, err := pnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnc *PackageNameCreate) ExecX(ctx context.Context) {
	if err := pnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pnc *PackageNameCreate) check() error {
	if _, ok := pnc.mutation.NamespaceID(); !ok {
		return &ValidationError{Name: "namespace_id", err: errors.New(`ent: missing required field "PackageName.namespace_id"`)}
	}
	if _, ok := pnc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PackageName.name"`)}
	}
	if v, ok := pnc.mutation.Name(); ok {
		if err := packagename.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PackageName.name": %w`, err)}
		}
	}
	if _, ok := pnc.mutation.NamespaceID(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required edge "PackageName.namespace"`)}
	}
	return nil
}

func (pnc *PackageNameCreate) gremlinSave(ctx context.Context) (*PackageName, error) {
	if err := pnc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := pnc.gremlin().Query()
	if err := pnc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &PackageName{config: pnc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	pnc.mutation.id = &rnode.ID
	pnc.mutation.done = true
	return rnode, nil
}

func (pnc *PackageNameCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.AddV(packagename.Label)
	if value, ok := pnc.mutation.Name(); ok {
		v.Property(dsl.Single, packagename.FieldName, value)
	}
	for _, id := range pnc.mutation.NamespaceIDs() {
		v.AddE(packagenamespace.NamesLabel).From(g.V(id)).InV()
	}
	for _, id := range pnc.mutation.VersionsIDs() {
		v.AddE(packagename.VersionsLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(packagename.VersionsLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packagename.Label, packagename.VersionsLabel, id)),
		})
	}
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	tr := constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	for _, cr := range constraints[1:] {
		tr = cr.pred.Coalesce(cr.test, tr)
	}
	return tr
}

// PackageNameCreateBulk is the builder for creating many PackageName entities in bulk.
type PackageNameCreateBulk struct {
	config
	builders []*PackageNameCreate
}
