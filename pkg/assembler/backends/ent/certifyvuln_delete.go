// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvuln"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// CertifyVulnDelete is the builder for deleting a CertifyVuln entity.
type CertifyVulnDelete struct {
	config
	hooks    []Hook
	mutation *CertifyVulnMutation
}

// Where appends a list predicates to the CertifyVulnDelete builder.
func (cvd *CertifyVulnDelete) Where(ps ...predicate.CertifyVuln) *CertifyVulnDelete {
	cvd.mutation.Where(ps...)
	return cvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cvd *CertifyVulnDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cvd.gremlinExec, cvd.mutation, cvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cvd *CertifyVulnDelete) ExecX(ctx context.Context) int {
	n, err := cvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cvd *CertifyVulnDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := cvd.gremlin().Query()
	if err := cvd.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	cvd.mutation.done = true
	return res.ReadInt()
}

func (cvd *CertifyVulnDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(certifyvuln.Label)
	for _, p := range cvd.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// CertifyVulnDeleteOne is the builder for deleting a single CertifyVuln entity.
type CertifyVulnDeleteOne struct {
	cvd *CertifyVulnDelete
}

// Where appends a list predicates to the CertifyVulnDelete builder.
func (cvdo *CertifyVulnDeleteOne) Where(ps ...predicate.CertifyVuln) *CertifyVulnDeleteOne {
	cvdo.cvd.mutation.Where(ps...)
	return cvdo
}

// Exec executes the deletion query.
func (cvdo *CertifyVulnDeleteOne) Exec(ctx context.Context) error {
	n, err := cvdo.cvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{certifyvuln.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cvdo *CertifyVulnDeleteOne) ExecX(ctx context.Context) {
	if err := cvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
