// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pkgequal"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// PackageVersionCreate is the builder for creating a PackageVersion entity.
type PackageVersionCreate struct {
	config
	mutation *PackageVersionMutation
	hooks    []Hook
}

// SetNameID sets the "name_id" field.
func (pvc *PackageVersionCreate) SetNameID(i int) *PackageVersionCreate {
	pvc.mutation.SetNameID(i)
	return pvc
}

// SetVersion sets the "version" field.
func (pvc *PackageVersionCreate) SetVersion(s string) *PackageVersionCreate {
	pvc.mutation.SetVersion(s)
	return pvc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pvc *PackageVersionCreate) SetNillableVersion(s *string) *PackageVersionCreate {
	if s != nil {
		pvc.SetVersion(*s)
	}
	return pvc
}

// SetSubpath sets the "subpath" field.
func (pvc *PackageVersionCreate) SetSubpath(s string) *PackageVersionCreate {
	pvc.mutation.SetSubpath(s)
	return pvc
}

// SetNillableSubpath sets the "subpath" field if the given value is not nil.
func (pvc *PackageVersionCreate) SetNillableSubpath(s *string) *PackageVersionCreate {
	if s != nil {
		pvc.SetSubpath(*s)
	}
	return pvc
}

// SetQualifiers sets the "qualifiers" field.
func (pvc *PackageVersionCreate) SetQualifiers(mq []model.PackageQualifier) *PackageVersionCreate {
	pvc.mutation.SetQualifiers(mq)
	return pvc
}

// SetHash sets the "hash" field.
func (pvc *PackageVersionCreate) SetHash(s string) *PackageVersionCreate {
	pvc.mutation.SetHash(s)
	return pvc
}

// SetName sets the "name" edge to the PackageName entity.
func (pvc *PackageVersionCreate) SetName(p *PackageName) *PackageVersionCreate {
	return pvc.SetNameID(p.ID)
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (pvc *PackageVersionCreate) AddOccurrenceIDs(ids ...int) *PackageVersionCreate {
	pvc.mutation.AddOccurrenceIDs(ids...)
	return pvc
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (pvc *PackageVersionCreate) AddOccurrences(o ...*Occurrence) *PackageVersionCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pvc.AddOccurrenceIDs(ids...)
}

// AddSbomIDs adds the "sbom" edge to the BillOfMaterials entity by IDs.
func (pvc *PackageVersionCreate) AddSbomIDs(ids ...int) *PackageVersionCreate {
	pvc.mutation.AddSbomIDs(ids...)
	return pvc
}

// AddSbom adds the "sbom" edges to the BillOfMaterials entity.
func (pvc *PackageVersionCreate) AddSbom(b ...*BillOfMaterials) *PackageVersionCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pvc.AddSbomIDs(ids...)
}

// AddEqualPackageIDs adds the "equal_packages" edge to the PkgEqual entity by IDs.
func (pvc *PackageVersionCreate) AddEqualPackageIDs(ids ...int) *PackageVersionCreate {
	pvc.mutation.AddEqualPackageIDs(ids...)
	return pvc
}

// AddEqualPackages adds the "equal_packages" edges to the PkgEqual entity.
func (pvc *PackageVersionCreate) AddEqualPackages(p ...*PkgEqual) *PackageVersionCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvc.AddEqualPackageIDs(ids...)
}

// Mutation returns the PackageVersionMutation object of the builder.
func (pvc *PackageVersionCreate) Mutation() *PackageVersionMutation {
	return pvc.mutation
}

// Save creates the PackageVersion in the database.
func (pvc *PackageVersionCreate) Save(ctx context.Context) (*PackageVersion, error) {
	pvc.defaults()
	return withHooks(ctx, pvc.gremlinSave, pvc.mutation, pvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *PackageVersionCreate) SaveX(ctx context.Context) *PackageVersion {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *PackageVersionCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *PackageVersionCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvc *PackageVersionCreate) defaults() {
	if _, ok := pvc.mutation.Version(); !ok {
		v := packageversion.DefaultVersion
		pvc.mutation.SetVersion(v)
	}
	if _, ok := pvc.mutation.Subpath(); !ok {
		v := packageversion.DefaultSubpath
		pvc.mutation.SetSubpath(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvc *PackageVersionCreate) check() error {
	if _, ok := pvc.mutation.NameID(); !ok {
		return &ValidationError{Name: "name_id", err: errors.New(`ent: missing required field "PackageVersion.name_id"`)}
	}
	if _, ok := pvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "PackageVersion.version"`)}
	}
	if _, ok := pvc.mutation.Subpath(); !ok {
		return &ValidationError{Name: "subpath", err: errors.New(`ent: missing required field "PackageVersion.subpath"`)}
	}
	if _, ok := pvc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "PackageVersion.hash"`)}
	}
	if _, ok := pvc.mutation.NameID(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required edge "PackageVersion.name"`)}
	}
	return nil
}

func (pvc *PackageVersionCreate) gremlinSave(ctx context.Context) (*PackageVersion, error) {
	if err := pvc.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := pvc.gremlin().Query()
	if err := pvc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &PackageVersion{config: pvc.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	pvc.mutation.id = &rnode.ID
	pvc.mutation.done = true
	return rnode, nil
}

func (pvc *PackageVersionCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.AddV(packageversion.Label)
	if value, ok := pvc.mutation.Version(); ok {
		v.Property(dsl.Single, packageversion.FieldVersion, value)
	}
	if value, ok := pvc.mutation.Subpath(); ok {
		v.Property(dsl.Single, packageversion.FieldSubpath, value)
	}
	if value, ok := pvc.mutation.Qualifiers(); ok {
		v.Property(dsl.Single, packageversion.FieldQualifiers, value)
	}
	if value, ok := pvc.mutation.Hash(); ok {
		v.Property(dsl.Single, packageversion.FieldHash, value)
	}
	for _, id := range pvc.mutation.NameIDs() {
		v.AddE(packagename.VersionsLabel).From(g.V(id)).InV()
	}
	for _, id := range pvc.mutation.OccurrencesIDs() {
		v.AddE(occurrence.PackageLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(occurrence.PackageLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packageversion.Label, occurrence.PackageLabel, id)),
		})
	}
	for _, id := range pvc.mutation.SbomIDs() {
		v.AddE(billofmaterials.PackageLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(billofmaterials.PackageLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(packageversion.Label, billofmaterials.PackageLabel, id)),
		})
	}
	for _, id := range pvc.mutation.EqualPackagesIDs() {
		v.AddE(pkgequal.PackagesLabel).From(g.V(id)).InV()
	}
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	tr := constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	for _, cr := range constraints[1:] {
		tr = cr.pred.Coalesce(cr.test, tr)
	}
	return tr
}

// PackageVersionCreateBulk is the builder for creating many PackageVersion entities in bulk.
type PackageVersionCreateBulk struct {
	config
	builders []*PackageVersionCreate
}
