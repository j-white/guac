// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
)

// Artifact is the model entity for the Artifact schema.
type Artifact struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Algorithm holds the value of the "algorithm" field.
	Algorithm string `json:"algorithm,omitempty"`
	// Digest holds the value of the "digest" field.
	Digest string `json:"digest,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArtifactQuery when eager-loading is set.
	Edges ArtifactEdges `json:"edges"`
}

// ArtifactEdges holds the relations/edges for other nodes in the graph.
type ArtifactEdges struct {
	// Occurrences holds the value of the occurrences edge.
	Occurrences []*Occurrence `json:"occurrences,omitempty"`
	// Sbom holds the value of the sbom edge.
	Sbom []*BillOfMaterials `json:"sbom,omitempty"`
	// Attestations holds the value of the attestations edge.
	Attestations []*SLSAAttestation `json:"attestations,omitempty"`
	// Same holds the value of the same edge.
	Same []*HashEqual `json:"same,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// OccurrencesOrErr returns the Occurrences value or an error if the edge
// was not loaded in eager-loading.
func (e ArtifactEdges) OccurrencesOrErr() ([]*Occurrence, error) {
	if e.loadedTypes[0] {
		return e.Occurrences, nil
	}
	return nil, &NotLoadedError{edge: "occurrences"}
}

// SbomOrErr returns the Sbom value or an error if the edge
// was not loaded in eager-loading.
func (e ArtifactEdges) SbomOrErr() ([]*BillOfMaterials, error) {
	if e.loadedTypes[1] {
		return e.Sbom, nil
	}
	return nil, &NotLoadedError{edge: "sbom"}
}

// AttestationsOrErr returns the Attestations value or an error if the edge
// was not loaded in eager-loading.
func (e ArtifactEdges) AttestationsOrErr() ([]*SLSAAttestation, error) {
	if e.loadedTypes[2] {
		return e.Attestations, nil
	}
	return nil, &NotLoadedError{edge: "attestations"}
}

// SameOrErr returns the Same value or an error if the edge
// was not loaded in eager-loading.
func (e ArtifactEdges) SameOrErr() ([]*HashEqual, error) {
	if e.loadedTypes[3] {
		return e.Same, nil
	}
	return nil, &NotLoadedError{edge: "same"}
}

// FromResponse scans the gremlin response data into Artifact.
func (a *Artifact) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scana struct {
		ID        int    `json:"id,omitempty"`
		Algorithm string `json:"algorithm,omitempty"`
		Digest    string `json:"digest,omitempty"`
	}
	if err := vmap.Decode(&scana); err != nil {
		return err
	}
	a.ID = scana.ID
	a.Algorithm = scana.Algorithm
	a.Digest = scana.Digest
	return nil
}

// QueryOccurrences queries the "occurrences" edge of the Artifact entity.
func (a *Artifact) QueryOccurrences() *OccurrenceQuery {
	return NewArtifactClient(a.config).QueryOccurrences(a)
}

// QuerySbom queries the "sbom" edge of the Artifact entity.
func (a *Artifact) QuerySbom() *BillOfMaterialsQuery {
	return NewArtifactClient(a.config).QuerySbom(a)
}

// QueryAttestations queries the "attestations" edge of the Artifact entity.
func (a *Artifact) QueryAttestations() *SLSAAttestationQuery {
	return NewArtifactClient(a.config).QueryAttestations(a)
}

// QuerySame queries the "same" edge of the Artifact entity.
func (a *Artifact) QuerySame() *HashEqualQuery {
	return NewArtifactClient(a.config).QuerySame(a)
}

// Update returns a builder for updating this Artifact.
// Note that you need to call Artifact.Unwrap() before calling this method if this Artifact
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Artifact) Update() *ArtifactUpdateOne {
	return NewArtifactClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Artifact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Artifact) Unwrap() *Artifact {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Artifact is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Artifact) String() string {
	var builder strings.Builder
	builder.WriteString("Artifact(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("algorithm=")
	builder.WriteString(a.Algorithm)
	builder.WriteString(", ")
	builder.WriteString("digest=")
	builder.WriteString(a.Digest)
	builder.WriteByte(')')
	return builder.String()
}

// Artifacts is a parsable slice of Artifact.
type Artifacts []*Artifact

// FromResponse scans the gremlin response data into Artifacts.
func (a *Artifacts) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scana []struct {
		ID        int    `json:"id,omitempty"`
		Algorithm string `json:"algorithm,omitempty"`
		Digest    string `json:"digest,omitempty"`
	}
	if err := vmap.Decode(&scana); err != nil {
		return err
	}
	for _, v := range scana {
		node := &Artifact{ID: v.ID}
		node.Algorithm = v.Algorithm
		node.Digest = v.Digest
		*a = append(*a, node)
	}
	return nil
}
