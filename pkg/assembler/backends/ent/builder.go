// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
)

// Builder is the model entity for the Builder schema.
type Builder struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// The URI of the builder, used as a unique identifier in the graph query
	URI string `json:"uri,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BuilderQuery when eager-loading is set.
	Edges BuilderEdges `json:"edges"`
}

// BuilderEdges holds the relations/edges for other nodes in the graph.
type BuilderEdges struct {
	// SlsaAttestations holds the value of the slsa_attestations edge.
	SlsaAttestations []*SLSAAttestation `json:"slsa_attestations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SlsaAttestationsOrErr returns the SlsaAttestations value or an error if the edge
// was not loaded in eager-loading.
func (e BuilderEdges) SlsaAttestationsOrErr() ([]*SLSAAttestation, error) {
	if e.loadedTypes[0] {
		return e.SlsaAttestations, nil
	}
	return nil, &NotLoadedError{edge: "slsa_attestations"}
}

// FromResponse scans the gremlin response data into Builder.
func (b *Builder) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanb struct {
		ID  int    `json:"id,omitempty"`
		URI string `json:"uri,omitempty"`
	}
	if err := vmap.Decode(&scanb); err != nil {
		return err
	}
	b.ID = scanb.ID
	b.URI = scanb.URI
	return nil
}

// QuerySlsaAttestations queries the "slsa_attestations" edge of the Builder entity.
func (b *Builder) QuerySlsaAttestations() *SLSAAttestationQuery {
	return NewBuilderClient(b.config).QuerySlsaAttestations(b)
}

// Update returns a builder for updating this Builder.
// Note that you need to call Builder.Unwrap() before calling this method if this Builder
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Builder) Update() *BuilderUpdateOne {
	return NewBuilderClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Builder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Builder) Unwrap() *Builder {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Builder is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Builder) String() string {
	var builder strings.Builder
	builder.WriteString("Builder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("uri=")
	builder.WriteString(b.URI)
	builder.WriteByte(')')
	return builder.String()
}

// Builders is a parsable slice of Builder.
type Builders []*Builder

// FromResponse scans the gremlin response data into Builders.
func (b *Builders) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanb []struct {
		ID  int    `json:"id,omitempty"`
		URI string `json:"uri,omitempty"`
	}
	if err := vmap.Decode(&scanb); err != nil {
		return err
	}
	for _, v := range scanb {
		node := &Builder{ID: v.ID}
		node.URI = v.URI
		*b = append(*b, node)
	}
	return nil
}
