// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/scorecard"
)

// ScorecardQuery is the builder for querying Scorecard entities.
type ScorecardQuery struct {
	config
	ctx                *QueryContext
	order              []scorecard.OrderOption
	inters             []Interceptor
	predicates         []predicate.Scorecard
	withCertifications *CertifyScorecardQuery
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Where adds a new predicate for the ScorecardQuery builder.
func (sq *ScorecardQuery) Where(ps ...predicate.Scorecard) *ScorecardQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *ScorecardQuery) Limit(limit int) *ScorecardQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *ScorecardQuery) Offset(offset int) *ScorecardQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *ScorecardQuery) Unique(unique bool) *ScorecardQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *ScorecardQuery) Order(o ...scorecard.OrderOption) *ScorecardQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryCertifications chains the current query on the "certifications" edge.
func (sq *ScorecardQuery) QueryCertifications() *CertifyScorecardQuery {
	query := (&CertifyScorecardClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := sq.gremlinQuery(ctx)
		fromU = gremlin.OutE(scorecard.CertificationsLabel).InV()
		return fromU, nil
	}
	return query
}

// First returns the first Scorecard entity from the query.
// Returns a *NotFoundError when no Scorecard was found.
func (sq *ScorecardQuery) First(ctx context.Context) (*Scorecard, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{scorecard.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *ScorecardQuery) FirstX(ctx context.Context) *Scorecard {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Scorecard ID from the query.
// Returns a *NotFoundError when no Scorecard ID was found.
func (sq *ScorecardQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{scorecard.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *ScorecardQuery) FirstIDX(ctx context.Context) int {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Scorecard entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Scorecard entity is found.
// Returns a *NotFoundError when no Scorecard entities are found.
func (sq *ScorecardQuery) Only(ctx context.Context) (*Scorecard, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{scorecard.Label}
	default:
		return nil, &NotSingularError{scorecard.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *ScorecardQuery) OnlyX(ctx context.Context) *Scorecard {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Scorecard ID in the query.
// Returns a *NotSingularError when more than one Scorecard ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *ScorecardQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{scorecard.Label}
	default:
		err = &NotSingularError{scorecard.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *ScorecardQuery) OnlyIDX(ctx context.Context) int {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Scorecards.
func (sq *ScorecardQuery) All(ctx context.Context) ([]*Scorecard, error) {
	ctx = setContextOp(ctx, sq.ctx, "All")
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Scorecard, *ScorecardQuery]()
	return withInterceptors[[]*Scorecard](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *ScorecardQuery) AllX(ctx context.Context) []*Scorecard {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Scorecard IDs.
func (sq *ScorecardQuery) IDs(ctx context.Context) (ids []int, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, "IDs")
	if err = sq.Select(scorecard.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *ScorecardQuery) IDsX(ctx context.Context) []int {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *ScorecardQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, "Count")
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*ScorecardQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *ScorecardQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *ScorecardQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, "Exist")
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *ScorecardQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ScorecardQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *ScorecardQuery) Clone() *ScorecardQuery {
	if sq == nil {
		return nil
	}
	return &ScorecardQuery{
		config:             sq.config,
		ctx:                sq.ctx.Clone(),
		order:              append([]scorecard.OrderOption{}, sq.order...),
		inters:             append([]Interceptor{}, sq.inters...),
		predicates:         append([]predicate.Scorecard{}, sq.predicates...),
		withCertifications: sq.withCertifications.Clone(),
		// clone intermediate query.
		gremlin: sq.gremlin.Clone(),
		path:    sq.path,
	}
}

// WithCertifications tells the query-builder to eager-load the nodes that are connected to
// the "certifications" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ScorecardQuery) WithCertifications(opts ...func(*CertifyScorecardQuery)) *ScorecardQuery {
	query := (&CertifyScorecardClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withCertifications = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Checks []*model.ScorecardCheck `json:"checks,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Scorecard.Query().
//		GroupBy(scorecard.FieldChecks).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *ScorecardQuery) GroupBy(field string, fields ...string) *ScorecardGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ScorecardGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = scorecard.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Checks []*model.ScorecardCheck `json:"checks,omitempty"`
//	}
//
//	client.Scorecard.Query().
//		Select(scorecard.FieldChecks).
//		Scan(ctx, &v)
func (sq *ScorecardQuery) Select(fields ...string) *ScorecardSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &ScorecardSelect{ScorecardQuery: sq}
	sbuild.label = scorecard.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ScorecardSelect configured with the given aggregations.
func (sq *ScorecardQuery) Aggregate(fns ...AggregateFunc) *ScorecardSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *ScorecardQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.gremlin = prev
	}
	return nil
}

func (sq *ScorecardQuery) gremlinAll(ctx context.Context, hooks ...queryHook) ([]*Scorecard, error) {
	res := &gremlin.Response{}
	traversal := sq.gremlinQuery(ctx)
	if len(sq.ctx.Fields) > 0 {
		fields := make([]any, len(sq.ctx.Fields))
		for i, f := range sq.ctx.Fields {
			fields[i] = f
		}
		traversal.ValueMap(fields...)
	} else {
		traversal.ValueMap(true)
	}
	query, bindings := traversal.Query()
	if err := sq.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	var sSlice Scorecards
	if err := sSlice.FromResponse(res); err != nil {
		return nil, err
	}
	for i := range sSlice {
		sSlice[i].config = sq.config
	}
	return sSlice, nil
}

func (sq *ScorecardQuery) gremlinCount(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := sq.gremlinQuery(ctx).Count().Query()
	if err := sq.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (sq *ScorecardQuery) gremlinQuery(context.Context) *dsl.Traversal {
	v := g.V().HasLabel(scorecard.Label)
	if sq.gremlin != nil {
		v = sq.gremlin.Clone()
	}
	for _, p := range sq.predicates {
		p(v)
	}
	if len(sq.order) > 0 {
		v.Order()
		for _, p := range sq.order {
			p(v)
		}
	}
	switch limit, offset := sq.ctx.Limit, sq.ctx.Offset; {
	case limit != nil && offset != nil:
		v.Range(*offset, *offset+*limit)
	case offset != nil:
		v.Range(*offset, math.MaxInt32)
	case limit != nil:
		v.Limit(*limit)
	}
	if unique := sq.ctx.Unique; unique == nil || *unique {
		v.Dedup()
	}
	return v
}

// ScorecardGroupBy is the group-by builder for Scorecard entities.
type ScorecardGroupBy struct {
	selector
	build *ScorecardQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *ScorecardGroupBy) Aggregate(fns ...AggregateFunc) *ScorecardGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *ScorecardGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, "GroupBy")
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScorecardQuery, *ScorecardGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *ScorecardGroupBy) gremlinScan(ctx context.Context, root *ScorecardQuery, v any) error {
	var (
		trs   []any
		names []any
	)
	for _, fn := range sgb.fns {
		name, tr := fn("p", "")
		trs = append(trs, tr)
		names = append(names, name)
	}
	for _, f := range *sgb.flds {
		names = append(names, f)
		trs = append(trs, __.As("p").Unfold().Values(f).As(f))
	}
	query, bindings := root.gremlinQuery(ctx).Group().
		By(__.Values(*sgb.flds...).Fold()).
		By(__.Fold().Match(trs...).Select(names...)).
		Select(dsl.Values).
		Next().
		Query()
	res := &gremlin.Response{}
	if err := sgb.build.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(*sgb.flds)+len(sgb.fns) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

// ScorecardSelect is the builder for selecting fields of Scorecard entities.
type ScorecardSelect struct {
	*ScorecardQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *ScorecardSelect) Aggregate(fns ...AggregateFunc) *ScorecardSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *ScorecardSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, "Select")
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScorecardQuery, *ScorecardSelect](ctx, ss.ScorecardQuery, ss, ss.inters, v)
}

func (ss *ScorecardSelect) gremlinScan(ctx context.Context, root *ScorecardQuery, v any) error {
	var (
		res       = &gremlin.Response{}
		traversal = root.gremlinQuery(ctx)
	)
	if fields := ss.ctx.Fields; len(fields) == 1 {
		if fields[0] != scorecard.FieldID {
			traversal = traversal.Values(fields...)
		} else {
			traversal = traversal.ID()
		}
	} else {
		fields := make([]any, len(ss.ctx.Fields))
		for i, f := range ss.ctx.Fields {
			fields[i] = f
		}
		traversal = traversal.ValueMap(fields...)
	}
	query, bindings := traversal.Query()
	if err := ss.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(root.ctx.Fields) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}
