// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/slsaattestation"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// SLSAAttestationUpdate is the builder for updating SLSAAttestation entities.
type SLSAAttestationUpdate struct {
	config
	hooks    []Hook
	mutation *SLSAAttestationMutation
}

// Where appends a list predicates to the SLSAAttestationUpdate builder.
func (sau *SLSAAttestationUpdate) Where(ps ...predicate.SLSAAttestation) *SLSAAttestationUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetBuildType sets the "build_type" field.
func (sau *SLSAAttestationUpdate) SetBuildType(s string) *SLSAAttestationUpdate {
	sau.mutation.SetBuildType(s)
	return sau
}

// SetBuiltByID sets the "built_by_id" field.
func (sau *SLSAAttestationUpdate) SetBuiltByID(i int) *SLSAAttestationUpdate {
	sau.mutation.SetBuiltByID(i)
	return sau
}

// SetSubjectID sets the "subject_id" field.
func (sau *SLSAAttestationUpdate) SetSubjectID(i int) *SLSAAttestationUpdate {
	sau.mutation.SetSubjectID(i)
	return sau
}

// SetSlsaPredicate sets the "slsa_predicate" field.
func (sau *SLSAAttestationUpdate) SetSlsaPredicate(mp []*model.SLSAPredicate) *SLSAAttestationUpdate {
	sau.mutation.SetSlsaPredicate(mp)
	return sau
}

// AppendSlsaPredicate appends mp to the "slsa_predicate" field.
func (sau *SLSAAttestationUpdate) AppendSlsaPredicate(mp []*model.SLSAPredicate) *SLSAAttestationUpdate {
	sau.mutation.AppendSlsaPredicate(mp)
	return sau
}

// ClearSlsaPredicate clears the value of the "slsa_predicate" field.
func (sau *SLSAAttestationUpdate) ClearSlsaPredicate() *SLSAAttestationUpdate {
	sau.mutation.ClearSlsaPredicate()
	return sau
}

// SetSlsaVersion sets the "slsa_version" field.
func (sau *SLSAAttestationUpdate) SetSlsaVersion(s string) *SLSAAttestationUpdate {
	sau.mutation.SetSlsaVersion(s)
	return sau
}

// SetStartedOn sets the "started_on" field.
func (sau *SLSAAttestationUpdate) SetStartedOn(t time.Time) *SLSAAttestationUpdate {
	sau.mutation.SetStartedOn(t)
	return sau
}

// SetNillableStartedOn sets the "started_on" field if the given value is not nil.
func (sau *SLSAAttestationUpdate) SetNillableStartedOn(t *time.Time) *SLSAAttestationUpdate {
	if t != nil {
		sau.SetStartedOn(*t)
	}
	return sau
}

// ClearStartedOn clears the value of the "started_on" field.
func (sau *SLSAAttestationUpdate) ClearStartedOn() *SLSAAttestationUpdate {
	sau.mutation.ClearStartedOn()
	return sau
}

// SetFinishedOn sets the "finished_on" field.
func (sau *SLSAAttestationUpdate) SetFinishedOn(t time.Time) *SLSAAttestationUpdate {
	sau.mutation.SetFinishedOn(t)
	return sau
}

// SetNillableFinishedOn sets the "finished_on" field if the given value is not nil.
func (sau *SLSAAttestationUpdate) SetNillableFinishedOn(t *time.Time) *SLSAAttestationUpdate {
	if t != nil {
		sau.SetFinishedOn(*t)
	}
	return sau
}

// ClearFinishedOn clears the value of the "finished_on" field.
func (sau *SLSAAttestationUpdate) ClearFinishedOn() *SLSAAttestationUpdate {
	sau.mutation.ClearFinishedOn()
	return sau
}

// SetOrigin sets the "origin" field.
func (sau *SLSAAttestationUpdate) SetOrigin(s string) *SLSAAttestationUpdate {
	sau.mutation.SetOrigin(s)
	return sau
}

// SetCollector sets the "collector" field.
func (sau *SLSAAttestationUpdate) SetCollector(s string) *SLSAAttestationUpdate {
	sau.mutation.SetCollector(s)
	return sau
}

// SetBuiltFromHash sets the "built_from_hash" field.
func (sau *SLSAAttestationUpdate) SetBuiltFromHash(s string) *SLSAAttestationUpdate {
	sau.mutation.SetBuiltFromHash(s)
	return sau
}

// AddBuiltFromIDs adds the "built_from" edge to the Artifact entity by IDs.
func (sau *SLSAAttestationUpdate) AddBuiltFromIDs(ids ...int) *SLSAAttestationUpdate {
	sau.mutation.AddBuiltFromIDs(ids...)
	return sau
}

// AddBuiltFrom adds the "built_from" edges to the Artifact entity.
func (sau *SLSAAttestationUpdate) AddBuiltFrom(a ...*Artifact) *SLSAAttestationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sau.AddBuiltFromIDs(ids...)
}

// SetBuiltBy sets the "built_by" edge to the Builder entity.
func (sau *SLSAAttestationUpdate) SetBuiltBy(b *Builder) *SLSAAttestationUpdate {
	return sau.SetBuiltByID(b.ID)
}

// SetSubject sets the "subject" edge to the Artifact entity.
func (sau *SLSAAttestationUpdate) SetSubject(a *Artifact) *SLSAAttestationUpdate {
	return sau.SetSubjectID(a.ID)
}

// Mutation returns the SLSAAttestationMutation object of the builder.
func (sau *SLSAAttestationUpdate) Mutation() *SLSAAttestationMutation {
	return sau.mutation
}

// ClearBuiltFrom clears all "built_from" edges to the Artifact entity.
func (sau *SLSAAttestationUpdate) ClearBuiltFrom() *SLSAAttestationUpdate {
	sau.mutation.ClearBuiltFrom()
	return sau
}

// RemoveBuiltFromIDs removes the "built_from" edge to Artifact entities by IDs.
func (sau *SLSAAttestationUpdate) RemoveBuiltFromIDs(ids ...int) *SLSAAttestationUpdate {
	sau.mutation.RemoveBuiltFromIDs(ids...)
	return sau
}

// RemoveBuiltFrom removes "built_from" edges to Artifact entities.
func (sau *SLSAAttestationUpdate) RemoveBuiltFrom(a ...*Artifact) *SLSAAttestationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sau.RemoveBuiltFromIDs(ids...)
}

// ClearBuiltBy clears the "built_by" edge to the Builder entity.
func (sau *SLSAAttestationUpdate) ClearBuiltBy() *SLSAAttestationUpdate {
	sau.mutation.ClearBuiltBy()
	return sau
}

// ClearSubject clears the "subject" edge to the Artifact entity.
func (sau *SLSAAttestationUpdate) ClearSubject() *SLSAAttestationUpdate {
	sau.mutation.ClearSubject()
	return sau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SLSAAttestationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sau.gremlinSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SLSAAttestationUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SLSAAttestationUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SLSAAttestationUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sau *SLSAAttestationUpdate) check() error {
	if _, ok := sau.mutation.BuiltByID(); sau.mutation.BuiltByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SLSAAttestation.built_by"`)
	}
	if _, ok := sau.mutation.SubjectID(); sau.mutation.SubjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SLSAAttestation.subject"`)
	}
	return nil
}

func (sau *SLSAAttestationUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := sau.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := sau.gremlin().Query()
	if err := sau.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	sau.mutation.done = true
	return res.ReadInt()
}

func (sau *SLSAAttestationUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(slsaattestation.Label)
	for _, p := range sau.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := sau.mutation.BuildType(); ok {
		v.Property(dsl.Single, slsaattestation.FieldBuildType, value)
	}
	if value, ok := sau.mutation.SlsaPredicate(); ok {
		v.Property(dsl.Single, slsaattestation.FieldSlsaPredicate, value)
	}
	if value, ok := sau.mutation.SlsaVersion(); ok {
		v.Property(dsl.Single, slsaattestation.FieldSlsaVersion, value)
	}
	if value, ok := sau.mutation.StartedOn(); ok {
		v.Property(dsl.Single, slsaattestation.FieldStartedOn, value)
	}
	if value, ok := sau.mutation.FinishedOn(); ok {
		v.Property(dsl.Single, slsaattestation.FieldFinishedOn, value)
	}
	if value, ok := sau.mutation.Origin(); ok {
		v.Property(dsl.Single, slsaattestation.FieldOrigin, value)
	}
	if value, ok := sau.mutation.Collector(); ok {
		v.Property(dsl.Single, slsaattestation.FieldCollector, value)
	}
	if value, ok := sau.mutation.BuiltFromHash(); ok {
		v.Property(dsl.Single, slsaattestation.FieldBuiltFromHash, value)
	}
	var properties []any
	if sau.mutation.SlsaPredicateCleared() {
		properties = append(properties, slsaattestation.FieldSlsaPredicate)
	}
	if sau.mutation.StartedOnCleared() {
		properties = append(properties, slsaattestation.FieldStartedOn)
	}
	if sau.mutation.FinishedOnCleared() {
		properties = append(properties, slsaattestation.FieldFinishedOn)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	for _, id := range sau.mutation.RemovedBuiltFromIDs() {
		tr := rv.Clone().OutE(slsaattestation.BuiltFromLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range sau.mutation.BuiltFromIDs() {
		v.AddE(slsaattestation.BuiltFromLabel).To(g.V(id)).OutV()
	}
	if sau.mutation.BuiltByCleared() {
		tr := rv.Clone().OutE(slsaattestation.BuiltByLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range sau.mutation.BuiltByIDs() {
		v.AddE(slsaattestation.BuiltByLabel).To(g.V(id)).OutV()
	}
	if sau.mutation.SubjectCleared() {
		tr := rv.Clone().OutE(slsaattestation.SubjectLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range sau.mutation.SubjectIDs() {
		v.AddE(slsaattestation.SubjectLabel).To(g.V(id)).OutV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// SLSAAttestationUpdateOne is the builder for updating a single SLSAAttestation entity.
type SLSAAttestationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SLSAAttestationMutation
}

// SetBuildType sets the "build_type" field.
func (sauo *SLSAAttestationUpdateOne) SetBuildType(s string) *SLSAAttestationUpdateOne {
	sauo.mutation.SetBuildType(s)
	return sauo
}

// SetBuiltByID sets the "built_by_id" field.
func (sauo *SLSAAttestationUpdateOne) SetBuiltByID(i int) *SLSAAttestationUpdateOne {
	sauo.mutation.SetBuiltByID(i)
	return sauo
}

// SetSubjectID sets the "subject_id" field.
func (sauo *SLSAAttestationUpdateOne) SetSubjectID(i int) *SLSAAttestationUpdateOne {
	sauo.mutation.SetSubjectID(i)
	return sauo
}

// SetSlsaPredicate sets the "slsa_predicate" field.
func (sauo *SLSAAttestationUpdateOne) SetSlsaPredicate(mp []*model.SLSAPredicate) *SLSAAttestationUpdateOne {
	sauo.mutation.SetSlsaPredicate(mp)
	return sauo
}

// AppendSlsaPredicate appends mp to the "slsa_predicate" field.
func (sauo *SLSAAttestationUpdateOne) AppendSlsaPredicate(mp []*model.SLSAPredicate) *SLSAAttestationUpdateOne {
	sauo.mutation.AppendSlsaPredicate(mp)
	return sauo
}

// ClearSlsaPredicate clears the value of the "slsa_predicate" field.
func (sauo *SLSAAttestationUpdateOne) ClearSlsaPredicate() *SLSAAttestationUpdateOne {
	sauo.mutation.ClearSlsaPredicate()
	return sauo
}

// SetSlsaVersion sets the "slsa_version" field.
func (sauo *SLSAAttestationUpdateOne) SetSlsaVersion(s string) *SLSAAttestationUpdateOne {
	sauo.mutation.SetSlsaVersion(s)
	return sauo
}

// SetStartedOn sets the "started_on" field.
func (sauo *SLSAAttestationUpdateOne) SetStartedOn(t time.Time) *SLSAAttestationUpdateOne {
	sauo.mutation.SetStartedOn(t)
	return sauo
}

// SetNillableStartedOn sets the "started_on" field if the given value is not nil.
func (sauo *SLSAAttestationUpdateOne) SetNillableStartedOn(t *time.Time) *SLSAAttestationUpdateOne {
	if t != nil {
		sauo.SetStartedOn(*t)
	}
	return sauo
}

// ClearStartedOn clears the value of the "started_on" field.
func (sauo *SLSAAttestationUpdateOne) ClearStartedOn() *SLSAAttestationUpdateOne {
	sauo.mutation.ClearStartedOn()
	return sauo
}

// SetFinishedOn sets the "finished_on" field.
func (sauo *SLSAAttestationUpdateOne) SetFinishedOn(t time.Time) *SLSAAttestationUpdateOne {
	sauo.mutation.SetFinishedOn(t)
	return sauo
}

// SetNillableFinishedOn sets the "finished_on" field if the given value is not nil.
func (sauo *SLSAAttestationUpdateOne) SetNillableFinishedOn(t *time.Time) *SLSAAttestationUpdateOne {
	if t != nil {
		sauo.SetFinishedOn(*t)
	}
	return sauo
}

// ClearFinishedOn clears the value of the "finished_on" field.
func (sauo *SLSAAttestationUpdateOne) ClearFinishedOn() *SLSAAttestationUpdateOne {
	sauo.mutation.ClearFinishedOn()
	return sauo
}

// SetOrigin sets the "origin" field.
func (sauo *SLSAAttestationUpdateOne) SetOrigin(s string) *SLSAAttestationUpdateOne {
	sauo.mutation.SetOrigin(s)
	return sauo
}

// SetCollector sets the "collector" field.
func (sauo *SLSAAttestationUpdateOne) SetCollector(s string) *SLSAAttestationUpdateOne {
	sauo.mutation.SetCollector(s)
	return sauo
}

// SetBuiltFromHash sets the "built_from_hash" field.
func (sauo *SLSAAttestationUpdateOne) SetBuiltFromHash(s string) *SLSAAttestationUpdateOne {
	sauo.mutation.SetBuiltFromHash(s)
	return sauo
}

// AddBuiltFromIDs adds the "built_from" edge to the Artifact entity by IDs.
func (sauo *SLSAAttestationUpdateOne) AddBuiltFromIDs(ids ...int) *SLSAAttestationUpdateOne {
	sauo.mutation.AddBuiltFromIDs(ids...)
	return sauo
}

// AddBuiltFrom adds the "built_from" edges to the Artifact entity.
func (sauo *SLSAAttestationUpdateOne) AddBuiltFrom(a ...*Artifact) *SLSAAttestationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sauo.AddBuiltFromIDs(ids...)
}

// SetBuiltBy sets the "built_by" edge to the Builder entity.
func (sauo *SLSAAttestationUpdateOne) SetBuiltBy(b *Builder) *SLSAAttestationUpdateOne {
	return sauo.SetBuiltByID(b.ID)
}

// SetSubject sets the "subject" edge to the Artifact entity.
func (sauo *SLSAAttestationUpdateOne) SetSubject(a *Artifact) *SLSAAttestationUpdateOne {
	return sauo.SetSubjectID(a.ID)
}

// Mutation returns the SLSAAttestationMutation object of the builder.
func (sauo *SLSAAttestationUpdateOne) Mutation() *SLSAAttestationMutation {
	return sauo.mutation
}

// ClearBuiltFrom clears all "built_from" edges to the Artifact entity.
func (sauo *SLSAAttestationUpdateOne) ClearBuiltFrom() *SLSAAttestationUpdateOne {
	sauo.mutation.ClearBuiltFrom()
	return sauo
}

// RemoveBuiltFromIDs removes the "built_from" edge to Artifact entities by IDs.
func (sauo *SLSAAttestationUpdateOne) RemoveBuiltFromIDs(ids ...int) *SLSAAttestationUpdateOne {
	sauo.mutation.RemoveBuiltFromIDs(ids...)
	return sauo
}

// RemoveBuiltFrom removes "built_from" edges to Artifact entities.
func (sauo *SLSAAttestationUpdateOne) RemoveBuiltFrom(a ...*Artifact) *SLSAAttestationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sauo.RemoveBuiltFromIDs(ids...)
}

// ClearBuiltBy clears the "built_by" edge to the Builder entity.
func (sauo *SLSAAttestationUpdateOne) ClearBuiltBy() *SLSAAttestationUpdateOne {
	sauo.mutation.ClearBuiltBy()
	return sauo
}

// ClearSubject clears the "subject" edge to the Artifact entity.
func (sauo *SLSAAttestationUpdateOne) ClearSubject() *SLSAAttestationUpdateOne {
	sauo.mutation.ClearSubject()
	return sauo
}

// Where appends a list predicates to the SLSAAttestationUpdate builder.
func (sauo *SLSAAttestationUpdateOne) Where(ps ...predicate.SLSAAttestation) *SLSAAttestationUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *SLSAAttestationUpdateOne) Select(field string, fields ...string) *SLSAAttestationUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated SLSAAttestation entity.
func (sauo *SLSAAttestationUpdateOne) Save(ctx context.Context) (*SLSAAttestation, error) {
	return withHooks(ctx, sauo.gremlinSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SLSAAttestationUpdateOne) SaveX(ctx context.Context) *SLSAAttestation {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SLSAAttestationUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SLSAAttestationUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sauo *SLSAAttestationUpdateOne) check() error {
	if _, ok := sauo.mutation.BuiltByID(); sauo.mutation.BuiltByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SLSAAttestation.built_by"`)
	}
	if _, ok := sauo.mutation.SubjectID(); sauo.mutation.SubjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SLSAAttestation.subject"`)
	}
	return nil
}

func (sauo *SLSAAttestationUpdateOne) gremlinSave(ctx context.Context) (*SLSAAttestation, error) {
	if err := sauo.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SLSAAttestation.id" for update`)}
	}
	query, bindings := sauo.gremlin(id).Query()
	if err := sauo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	sauo.mutation.done = true
	sa := &SLSAAttestation{config: sauo.config}
	if err := sa.FromResponse(res); err != nil {
		return nil, err
	}
	return sa, nil
}

func (sauo *SLSAAttestationUpdateOne) gremlin(id int) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := sauo.mutation.BuildType(); ok {
		v.Property(dsl.Single, slsaattestation.FieldBuildType, value)
	}
	if value, ok := sauo.mutation.SlsaPredicate(); ok {
		v.Property(dsl.Single, slsaattestation.FieldSlsaPredicate, value)
	}
	if value, ok := sauo.mutation.SlsaVersion(); ok {
		v.Property(dsl.Single, slsaattestation.FieldSlsaVersion, value)
	}
	if value, ok := sauo.mutation.StartedOn(); ok {
		v.Property(dsl.Single, slsaattestation.FieldStartedOn, value)
	}
	if value, ok := sauo.mutation.FinishedOn(); ok {
		v.Property(dsl.Single, slsaattestation.FieldFinishedOn, value)
	}
	if value, ok := sauo.mutation.Origin(); ok {
		v.Property(dsl.Single, slsaattestation.FieldOrigin, value)
	}
	if value, ok := sauo.mutation.Collector(); ok {
		v.Property(dsl.Single, slsaattestation.FieldCollector, value)
	}
	if value, ok := sauo.mutation.BuiltFromHash(); ok {
		v.Property(dsl.Single, slsaattestation.FieldBuiltFromHash, value)
	}
	var properties []any
	if sauo.mutation.SlsaPredicateCleared() {
		properties = append(properties, slsaattestation.FieldSlsaPredicate)
	}
	if sauo.mutation.StartedOnCleared() {
		properties = append(properties, slsaattestation.FieldStartedOn)
	}
	if sauo.mutation.FinishedOnCleared() {
		properties = append(properties, slsaattestation.FieldFinishedOn)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	for _, id := range sauo.mutation.RemovedBuiltFromIDs() {
		tr := rv.Clone().OutE(slsaattestation.BuiltFromLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range sauo.mutation.BuiltFromIDs() {
		v.AddE(slsaattestation.BuiltFromLabel).To(g.V(id)).OutV()
	}
	if sauo.mutation.BuiltByCleared() {
		tr := rv.Clone().OutE(slsaattestation.BuiltByLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range sauo.mutation.BuiltByIDs() {
		v.AddE(slsaattestation.BuiltByLabel).To(g.V(id)).OutV()
	}
	if sauo.mutation.SubjectCleared() {
		tr := rv.Clone().OutE(slsaattestation.SubjectLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range sauo.mutation.SubjectIDs() {
		v.AddE(slsaattestation.SubjectLabel).To(g.V(id)).OutV()
	}
	if len(sauo.fields) > 0 {
		fields := make([]any, 0, len(sauo.fields)+1)
		fields = append(fields, true)
		for _, f := range sauo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
