// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagenamespace"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PackageNamespaceDelete is the builder for deleting a PackageNamespace entity.
type PackageNamespaceDelete struct {
	config
	hooks    []Hook
	mutation *PackageNamespaceMutation
}

// Where appends a list predicates to the PackageNamespaceDelete builder.
func (pnd *PackageNamespaceDelete) Where(ps ...predicate.PackageNamespace) *PackageNamespaceDelete {
	pnd.mutation.Where(ps...)
	return pnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pnd *PackageNamespaceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pnd.gremlinExec, pnd.mutation, pnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pnd *PackageNamespaceDelete) ExecX(ctx context.Context) int {
	n, err := pnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pnd *PackageNamespaceDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := pnd.gremlin().Query()
	if err := pnd.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	pnd.mutation.done = true
	return res.ReadInt()
}

func (pnd *PackageNamespaceDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(packagenamespace.Label)
	for _, p := range pnd.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// PackageNamespaceDeleteOne is the builder for deleting a single PackageNamespace entity.
type PackageNamespaceDeleteOne struct {
	pnd *PackageNamespaceDelete
}

// Where appends a list predicates to the PackageNamespaceDelete builder.
func (pndo *PackageNamespaceDeleteOne) Where(ps ...predicate.PackageNamespace) *PackageNamespaceDeleteOne {
	pndo.pnd.mutation.Where(ps...)
	return pndo
}

// Exec executes the deletion query.
func (pndo *PackageNamespaceDeleteOne) Exec(ctx context.Context) error {
	n, err := pndo.pnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{packagenamespace.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pndo *PackageNamespaceDeleteOne) ExecX(ctx context.Context) {
	if err := pndo.Exec(ctx); err != nil {
		panic(err)
	}
}
