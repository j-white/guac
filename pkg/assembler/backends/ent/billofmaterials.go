// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
)

// BillOfMaterials is the model entity for the BillOfMaterials schema.
type BillOfMaterials struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID *int `json:"package_id,omitempty"`
	// ArtifactID holds the value of the "artifact_id" field.
	ArtifactID *int `json:"artifact_id,omitempty"`
	// SBOM's URI
	URI string `json:"uri,omitempty"`
	// Digest algorithm
	Algorithm string `json:"algorithm,omitempty"`
	// Digest holds the value of the "digest" field.
	Digest string `json:"digest,omitempty"`
	// DownloadLocation holds the value of the "download_location" field.
	DownloadLocation string `json:"download_location,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// GUAC collector for the document
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillOfMaterialsQuery when eager-loading is set.
	Edges BillOfMaterialsEdges `json:"edges"`
}

// BillOfMaterialsEdges holds the relations/edges for other nodes in the graph.
type BillOfMaterialsEdges struct {
	// Package holds the value of the package edge.
	Package *PackageVersion `json:"package,omitempty"`
	// Artifact holds the value of the artifact edge.
	Artifact *Artifact `json:"artifact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PackageOrErr returns the Package value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillOfMaterialsEdges) PackageOrErr() (*PackageVersion, error) {
	if e.loadedTypes[0] {
		if e.Package == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: packageversion.Label}
		}
		return e.Package, nil
	}
	return nil, &NotLoadedError{edge: "package"}
}

// ArtifactOrErr returns the Artifact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillOfMaterialsEdges) ArtifactOrErr() (*Artifact, error) {
	if e.loadedTypes[1] {
		if e.Artifact == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: artifact.Label}
		}
		return e.Artifact, nil
	}
	return nil, &NotLoadedError{edge: "artifact"}
}

// FromResponse scans the gremlin response data into BillOfMaterials.
func (bom *BillOfMaterials) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanbom struct {
		ID               int    `json:"id,omitempty"`
		PackageID        *int   `json:"package_id,omitempty"`
		ArtifactID       *int   `json:"artifact_id,omitempty"`
		URI              string `json:"uri,omitempty"`
		Algorithm        string `json:"algorithm,omitempty"`
		Digest           string `json:"digest,omitempty"`
		DownloadLocation string `json:"download_location,omitempty"`
		Origin           string `json:"origin,omitempty"`
		Collector        string `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scanbom); err != nil {
		return err
	}
	bom.ID = scanbom.ID
	bom.PackageID = scanbom.PackageID
	bom.ArtifactID = scanbom.ArtifactID
	bom.URI = scanbom.URI
	bom.Algorithm = scanbom.Algorithm
	bom.Digest = scanbom.Digest
	bom.DownloadLocation = scanbom.DownloadLocation
	bom.Origin = scanbom.Origin
	bom.Collector = scanbom.Collector
	return nil
}

// QueryPackage queries the "package" edge of the BillOfMaterials entity.
func (bom *BillOfMaterials) QueryPackage() *PackageVersionQuery {
	return NewBillOfMaterialsClient(bom.config).QueryPackage(bom)
}

// QueryArtifact queries the "artifact" edge of the BillOfMaterials entity.
func (bom *BillOfMaterials) QueryArtifact() *ArtifactQuery {
	return NewBillOfMaterialsClient(bom.config).QueryArtifact(bom)
}

// Update returns a builder for updating this BillOfMaterials.
// Note that you need to call BillOfMaterials.Unwrap() before calling this method if this BillOfMaterials
// was returned from a transaction, and the transaction was committed or rolled back.
func (bom *BillOfMaterials) Update() *BillOfMaterialsUpdateOne {
	return NewBillOfMaterialsClient(bom.config).UpdateOne(bom)
}

// Unwrap unwraps the BillOfMaterials entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bom *BillOfMaterials) Unwrap() *BillOfMaterials {
	_tx, ok := bom.config.driver.(*txDriver)
	if !ok {
		panic("ent: BillOfMaterials is not a transactional entity")
	}
	bom.config.driver = _tx.drv
	return bom
}

// String implements the fmt.Stringer.
func (bom *BillOfMaterials) String() string {
	var builder strings.Builder
	builder.WriteString("BillOfMaterials(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bom.ID))
	if v := bom.PackageID; v != nil {
		builder.WriteString("package_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bom.ArtifactID; v != nil {
		builder.WriteString("artifact_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("uri=")
	builder.WriteString(bom.URI)
	builder.WriteString(", ")
	builder.WriteString("algorithm=")
	builder.WriteString(bom.Algorithm)
	builder.WriteString(", ")
	builder.WriteString("digest=")
	builder.WriteString(bom.Digest)
	builder.WriteString(", ")
	builder.WriteString("download_location=")
	builder.WriteString(bom.DownloadLocation)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(bom.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(bom.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// BillOfMaterialsSlice is a parsable slice of BillOfMaterials.
type BillOfMaterialsSlice []*BillOfMaterials

// FromResponse scans the gremlin response data into BillOfMaterialsSlice.
func (bom *BillOfMaterialsSlice) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanbom []struct {
		ID               int    `json:"id,omitempty"`
		PackageID        *int   `json:"package_id,omitempty"`
		ArtifactID       *int   `json:"artifact_id,omitempty"`
		URI              string `json:"uri,omitempty"`
		Algorithm        string `json:"algorithm,omitempty"`
		Digest           string `json:"digest,omitempty"`
		DownloadLocation string `json:"download_location,omitempty"`
		Origin           string `json:"origin,omitempty"`
		Collector        string `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scanbom); err != nil {
		return err
	}
	for _, v := range scanbom {
		node := &BillOfMaterials{ID: v.ID}
		node.PackageID = v.PackageID
		node.ArtifactID = v.ArtifactID
		node.URI = v.URI
		node.Algorithm = v.Algorithm
		node.Digest = v.Digest
		node.DownloadLocation = v.DownloadLocation
		node.Origin = v.Origin
		node.Collector = v.Collector
		*bom = append(*bom, node)
	}
	return nil
}
