// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
)

// HashEqual is the model entity for the HashEqual schema.
type HashEqual struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Justification holds the value of the "justification" field.
	Justification string `json:"justification,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HashEqualQuery when eager-loading is set.
	Edges HashEqualEdges `json:"edges"`
}

// HashEqualEdges holds the relations/edges for other nodes in the graph.
type HashEqualEdges struct {
	// Artifacts holds the value of the artifacts edge.
	Artifacts []*Artifact `json:"artifacts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ArtifactsOrErr returns the Artifacts value or an error if the edge
// was not loaded in eager-loading.
func (e HashEqualEdges) ArtifactsOrErr() ([]*Artifact, error) {
	if e.loadedTypes[0] {
		return e.Artifacts, nil
	}
	return nil, &NotLoadedError{edge: "artifacts"}
}

// FromResponse scans the gremlin response data into HashEqual.
func (he *HashEqual) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanhe struct {
		ID            int    `json:"id,omitempty"`
		Origin        string `json:"origin,omitempty"`
		Collector     string `json:"collector,omitempty"`
		Justification string `json:"justification,omitempty"`
	}
	if err := vmap.Decode(&scanhe); err != nil {
		return err
	}
	he.ID = scanhe.ID
	he.Origin = scanhe.Origin
	he.Collector = scanhe.Collector
	he.Justification = scanhe.Justification
	return nil
}

// QueryArtifacts queries the "artifacts" edge of the HashEqual entity.
func (he *HashEqual) QueryArtifacts() *ArtifactQuery {
	return NewHashEqualClient(he.config).QueryArtifacts(he)
}

// Update returns a builder for updating this HashEqual.
// Note that you need to call HashEqual.Unwrap() before calling this method if this HashEqual
// was returned from a transaction, and the transaction was committed or rolled back.
func (he *HashEqual) Update() *HashEqualUpdateOne {
	return NewHashEqualClient(he.config).UpdateOne(he)
}

// Unwrap unwraps the HashEqual entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (he *HashEqual) Unwrap() *HashEqual {
	_tx, ok := he.config.driver.(*txDriver)
	if !ok {
		panic("ent: HashEqual is not a transactional entity")
	}
	he.config.driver = _tx.drv
	return he
}

// String implements the fmt.Stringer.
func (he *HashEqual) String() string {
	var builder strings.Builder
	builder.WriteString("HashEqual(")
	builder.WriteString(fmt.Sprintf("id=%v, ", he.ID))
	builder.WriteString("origin=")
	builder.WriteString(he.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(he.Collector)
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(he.Justification)
	builder.WriteByte(')')
	return builder.String()
}

// HashEquals is a parsable slice of HashEqual.
type HashEquals []*HashEqual

// FromResponse scans the gremlin response data into HashEquals.
func (he *HashEquals) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanhe []struct {
		ID            int    `json:"id,omitempty"`
		Origin        string `json:"origin,omitempty"`
		Collector     string `json:"collector,omitempty"`
		Justification string `json:"justification,omitempty"`
	}
	if err := vmap.Decode(&scanhe); err != nil {
		return err
	}
	for _, v := range scanhe {
		node := &HashEqual{ID: v.ID}
		node.Origin = v.Origin
		node.Collector = v.Collector
		node.Justification = v.Justification
		*he = append(*he, node)
	}
	return nil
}
