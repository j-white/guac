// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// OccurrenceQuery is the builder for querying Occurrence entities.
type OccurrenceQuery struct {
	config
	ctx          *QueryContext
	order        []occurrence.OrderOption
	inters       []Interceptor
	predicates   []predicate.Occurrence
	withArtifact *ArtifactQuery
	withPackage  *PackageVersionQuery
	withSource   *SourceNameQuery
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Where adds a new predicate for the OccurrenceQuery builder.
func (oq *OccurrenceQuery) Where(ps ...predicate.Occurrence) *OccurrenceQuery {
	oq.predicates = append(oq.predicates, ps...)
	return oq
}

// Limit the number of records to be returned by this query.
func (oq *OccurrenceQuery) Limit(limit int) *OccurrenceQuery {
	oq.ctx.Limit = &limit
	return oq
}

// Offset to start from.
func (oq *OccurrenceQuery) Offset(offset int) *OccurrenceQuery {
	oq.ctx.Offset = &offset
	return oq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oq *OccurrenceQuery) Unique(unique bool) *OccurrenceQuery {
	oq.ctx.Unique = &unique
	return oq
}

// Order specifies how the records should be ordered.
func (oq *OccurrenceQuery) Order(o ...occurrence.OrderOption) *OccurrenceQuery {
	oq.order = append(oq.order, o...)
	return oq
}

// QueryArtifact chains the current query on the "artifact" edge.
func (oq *OccurrenceQuery) QueryArtifact() *ArtifactQuery {
	query := (&ArtifactClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := oq.gremlinQuery(ctx)
		fromU = gremlin.OutE(occurrence.ArtifactLabel).InV()
		return fromU, nil
	}
	return query
}

// QueryPackage chains the current query on the "package" edge.
func (oq *OccurrenceQuery) QueryPackage() *PackageVersionQuery {
	query := (&PackageVersionClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := oq.gremlinQuery(ctx)
		fromU = gremlin.OutE(occurrence.PackageLabel).InV()
		return fromU, nil
	}
	return query
}

// QuerySource chains the current query on the "source" edge.
func (oq *OccurrenceQuery) QuerySource() *SourceNameQuery {
	query := (&SourceNameClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := oq.gremlinQuery(ctx)
		fromU = gremlin.OutE(occurrence.SourceLabel).InV()
		return fromU, nil
	}
	return query
}

// First returns the first Occurrence entity from the query.
// Returns a *NotFoundError when no Occurrence was found.
func (oq *OccurrenceQuery) First(ctx context.Context) (*Occurrence, error) {
	nodes, err := oq.Limit(1).All(setContextOp(ctx, oq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{occurrence.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oq *OccurrenceQuery) FirstX(ctx context.Context) *Occurrence {
	node, err := oq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Occurrence ID from the query.
// Returns a *NotFoundError when no Occurrence ID was found.
func (oq *OccurrenceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oq.Limit(1).IDs(setContextOp(ctx, oq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{occurrence.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oq *OccurrenceQuery) FirstIDX(ctx context.Context) int {
	id, err := oq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Occurrence entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Occurrence entity is found.
// Returns a *NotFoundError when no Occurrence entities are found.
func (oq *OccurrenceQuery) Only(ctx context.Context) (*Occurrence, error) {
	nodes, err := oq.Limit(2).All(setContextOp(ctx, oq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{occurrence.Label}
	default:
		return nil, &NotSingularError{occurrence.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oq *OccurrenceQuery) OnlyX(ctx context.Context) *Occurrence {
	node, err := oq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Occurrence ID in the query.
// Returns a *NotSingularError when more than one Occurrence ID is found.
// Returns a *NotFoundError when no entities are found.
func (oq *OccurrenceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oq.Limit(2).IDs(setContextOp(ctx, oq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{occurrence.Label}
	default:
		err = &NotSingularError{occurrence.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oq *OccurrenceQuery) OnlyIDX(ctx context.Context) int {
	id, err := oq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Occurrences.
func (oq *OccurrenceQuery) All(ctx context.Context) ([]*Occurrence, error) {
	ctx = setContextOp(ctx, oq.ctx, "All")
	if err := oq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Occurrence, *OccurrenceQuery]()
	return withInterceptors[[]*Occurrence](ctx, oq, qr, oq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oq *OccurrenceQuery) AllX(ctx context.Context) []*Occurrence {
	nodes, err := oq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Occurrence IDs.
func (oq *OccurrenceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if oq.ctx.Unique == nil && oq.path != nil {
		oq.Unique(true)
	}
	ctx = setContextOp(ctx, oq.ctx, "IDs")
	if err = oq.Select(occurrence.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oq *OccurrenceQuery) IDsX(ctx context.Context) []int {
	ids, err := oq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oq *OccurrenceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oq.ctx, "Count")
	if err := oq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oq, querierCount[*OccurrenceQuery](), oq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oq *OccurrenceQuery) CountX(ctx context.Context) int {
	count, err := oq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oq *OccurrenceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oq.ctx, "Exist")
	switch _, err := oq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oq *OccurrenceQuery) ExistX(ctx context.Context) bool {
	exist, err := oq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OccurrenceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oq *OccurrenceQuery) Clone() *OccurrenceQuery {
	if oq == nil {
		return nil
	}
	return &OccurrenceQuery{
		config:       oq.config,
		ctx:          oq.ctx.Clone(),
		order:        append([]occurrence.OrderOption{}, oq.order...),
		inters:       append([]Interceptor{}, oq.inters...),
		predicates:   append([]predicate.Occurrence{}, oq.predicates...),
		withArtifact: oq.withArtifact.Clone(),
		withPackage:  oq.withPackage.Clone(),
		withSource:   oq.withSource.Clone(),
		// clone intermediate query.
		gremlin: oq.gremlin.Clone(),
		path:    oq.path,
	}
}

// WithArtifact tells the query-builder to eager-load the nodes that are connected to
// the "artifact" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OccurrenceQuery) WithArtifact(opts ...func(*ArtifactQuery)) *OccurrenceQuery {
	query := (&ArtifactClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withArtifact = query
	return oq
}

// WithPackage tells the query-builder to eager-load the nodes that are connected to
// the "package" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OccurrenceQuery) WithPackage(opts ...func(*PackageVersionQuery)) *OccurrenceQuery {
	query := (&PackageVersionClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withPackage = query
	return oq
}

// WithSource tells the query-builder to eager-load the nodes that are connected to
// the "source" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OccurrenceQuery) WithSource(opts ...func(*SourceNameQuery)) *OccurrenceQuery {
	query := (&SourceNameClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withSource = query
	return oq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ArtifactID int `json:"artifact_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Occurrence.Query().
//		GroupBy(occurrence.FieldArtifactID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oq *OccurrenceQuery) GroupBy(field string, fields ...string) *OccurrenceGroupBy {
	oq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OccurrenceGroupBy{build: oq}
	grbuild.flds = &oq.ctx.Fields
	grbuild.label = occurrence.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ArtifactID int `json:"artifact_id,omitempty"`
//	}
//
//	client.Occurrence.Query().
//		Select(occurrence.FieldArtifactID).
//		Scan(ctx, &v)
func (oq *OccurrenceQuery) Select(fields ...string) *OccurrenceSelect {
	oq.ctx.Fields = append(oq.ctx.Fields, fields...)
	sbuild := &OccurrenceSelect{OccurrenceQuery: oq}
	sbuild.label = occurrence.Label
	sbuild.flds, sbuild.scan = &oq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OccurrenceSelect configured with the given aggregations.
func (oq *OccurrenceQuery) Aggregate(fns ...AggregateFunc) *OccurrenceSelect {
	return oq.Select().Aggregate(fns...)
}

func (oq *OccurrenceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oq); err != nil {
				return err
			}
		}
	}
	if oq.path != nil {
		prev, err := oq.path(ctx)
		if err != nil {
			return err
		}
		oq.gremlin = prev
	}
	return nil
}

func (oq *OccurrenceQuery) gremlinAll(ctx context.Context, hooks ...queryHook) ([]*Occurrence, error) {
	res := &gremlin.Response{}
	traversal := oq.gremlinQuery(ctx)
	if len(oq.ctx.Fields) > 0 {
		fields := make([]any, len(oq.ctx.Fields))
		for i, f := range oq.ctx.Fields {
			fields[i] = f
		}
		traversal.ValueMap(fields...)
	} else {
		traversal.ValueMap(true)
	}
	query, bindings := traversal.Query()
	if err := oq.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	var os Occurrences
	if err := os.FromResponse(res); err != nil {
		return nil, err
	}
	for i := range os {
		os[i].config = oq.config
	}
	return os, nil
}

func (oq *OccurrenceQuery) gremlinCount(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := oq.gremlinQuery(ctx).Count().Query()
	if err := oq.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (oq *OccurrenceQuery) gremlinQuery(context.Context) *dsl.Traversal {
	v := g.V().HasLabel(occurrence.Label)
	if oq.gremlin != nil {
		v = oq.gremlin.Clone()
	}
	for _, p := range oq.predicates {
		p(v)
	}
	if len(oq.order) > 0 {
		v.Order()
		for _, p := range oq.order {
			p(v)
		}
	}
	switch limit, offset := oq.ctx.Limit, oq.ctx.Offset; {
	case limit != nil && offset != nil:
		v.Range(*offset, *offset+*limit)
	case offset != nil:
		v.Range(*offset, math.MaxInt32)
	case limit != nil:
		v.Limit(*limit)
	}
	if unique := oq.ctx.Unique; unique == nil || *unique {
		v.Dedup()
	}
	return v
}

// OccurrenceGroupBy is the group-by builder for Occurrence entities.
type OccurrenceGroupBy struct {
	selector
	build *OccurrenceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ogb *OccurrenceGroupBy) Aggregate(fns ...AggregateFunc) *OccurrenceGroupBy {
	ogb.fns = append(ogb.fns, fns...)
	return ogb
}

// Scan applies the selector query and scans the result into the given value.
func (ogb *OccurrenceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ogb.build.ctx, "GroupBy")
	if err := ogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OccurrenceQuery, *OccurrenceGroupBy](ctx, ogb.build, ogb, ogb.build.inters, v)
}

func (ogb *OccurrenceGroupBy) gremlinScan(ctx context.Context, root *OccurrenceQuery, v any) error {
	var (
		trs   []any
		names []any
	)
	for _, fn := range ogb.fns {
		name, tr := fn("p", "")
		trs = append(trs, tr)
		names = append(names, name)
	}
	for _, f := range *ogb.flds {
		names = append(names, f)
		trs = append(trs, __.As("p").Unfold().Values(f).As(f))
	}
	query, bindings := root.gremlinQuery(ctx).Group().
		By(__.Values(*ogb.flds...).Fold()).
		By(__.Fold().Match(trs...).Select(names...)).
		Select(dsl.Values).
		Next().
		Query()
	res := &gremlin.Response{}
	if err := ogb.build.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(*ogb.flds)+len(ogb.fns) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

// OccurrenceSelect is the builder for selecting fields of Occurrence entities.
type OccurrenceSelect struct {
	*OccurrenceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (os *OccurrenceSelect) Aggregate(fns ...AggregateFunc) *OccurrenceSelect {
	os.fns = append(os.fns, fns...)
	return os
}

// Scan applies the selector query and scans the result into the given value.
func (os *OccurrenceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, os.ctx, "Select")
	if err := os.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OccurrenceQuery, *OccurrenceSelect](ctx, os.OccurrenceQuery, os, os.inters, v)
}

func (os *OccurrenceSelect) gremlinScan(ctx context.Context, root *OccurrenceQuery, v any) error {
	var (
		res       = &gremlin.Response{}
		traversal = root.gremlinQuery(ctx)
	)
	if fields := os.ctx.Fields; len(fields) == 1 {
		if fields[0] != occurrence.FieldID {
			traversal = traversal.Values(fields...)
		} else {
			traversal = traversal.ID()
		}
	} else {
		fields := make([]any, len(os.ctx.Fields))
		for i, f := range os.ctx.Fields {
			fields[i] = f
		}
		traversal = traversal.ValueMap(fields...)
	}
	query, bindings := traversal.Query()
	if err := os.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(root.ctx.Fields) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}
