// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// Scorecard is the model entity for the Scorecard schema.
type Scorecard struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Checks holds the value of the "checks" field.
	Checks []*model.ScorecardCheck `json:"checks,omitempty"`
	// Overall Scorecard score for the source
	AggregateScore float64 `json:"aggregate_score,omitempty"`
	// TimeScanned holds the value of the "time_scanned" field.
	TimeScanned time.Time `json:"time_scanned,omitempty"`
	// ScorecardVersion holds the value of the "scorecard_version" field.
	ScorecardVersion string `json:"scorecard_version,omitempty"`
	// ScorecardCommit holds the value of the "scorecard_commit" field.
	ScorecardCommit string `json:"scorecard_commit,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin string `json:"origin,omitempty"`
	// Collector holds the value of the "collector" field.
	Collector string `json:"collector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScorecardQuery when eager-loading is set.
	Edges ScorecardEdges `json:"edges"`
}

// ScorecardEdges holds the relations/edges for other nodes in the graph.
type ScorecardEdges struct {
	// Certifications holds the value of the certifications edge.
	Certifications []*CertifyScorecard `json:"certifications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CertificationsOrErr returns the Certifications value or an error if the edge
// was not loaded in eager-loading.
func (e ScorecardEdges) CertificationsOrErr() ([]*CertifyScorecard, error) {
	if e.loadedTypes[0] {
		return e.Certifications, nil
	}
	return nil, &NotLoadedError{edge: "certifications"}
}

// FromResponse scans the gremlin response data into Scorecard.
func (s *Scorecard) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scans struct {
		ID               int                     `json:"id,omitempty"`
		Checks           []*model.ScorecardCheck `json:"checks,omitempty"`
		AggregateScore   float64                 `json:"aggregate_score,omitempty"`
		TimeScanned      int64                   `json:"time_scanned,omitempty"`
		ScorecardVersion string                  `json:"scorecard_version,omitempty"`
		ScorecardCommit  string                  `json:"scorecard_commit,omitempty"`
		Origin           string                  `json:"origin,omitempty"`
		Collector        string                  `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scans); err != nil {
		return err
	}
	s.ID = scans.ID
	s.Checks = scans.Checks
	s.AggregateScore = scans.AggregateScore
	s.TimeScanned = time.Unix(0, scans.TimeScanned)
	s.ScorecardVersion = scans.ScorecardVersion
	s.ScorecardCommit = scans.ScorecardCommit
	s.Origin = scans.Origin
	s.Collector = scans.Collector
	return nil
}

// QueryCertifications queries the "certifications" edge of the Scorecard entity.
func (s *Scorecard) QueryCertifications() *CertifyScorecardQuery {
	return NewScorecardClient(s.config).QueryCertifications(s)
}

// Update returns a builder for updating this Scorecard.
// Note that you need to call Scorecard.Unwrap() before calling this method if this Scorecard
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scorecard) Update() *ScorecardUpdateOne {
	return NewScorecardClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Scorecard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Scorecard) Unwrap() *Scorecard {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scorecard is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scorecard) String() string {
	var builder strings.Builder
	builder.WriteString("Scorecard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("checks=")
	builder.WriteString(fmt.Sprintf("%v", s.Checks))
	builder.WriteString(", ")
	builder.WriteString("aggregate_score=")
	builder.WriteString(fmt.Sprintf("%v", s.AggregateScore))
	builder.WriteString(", ")
	builder.WriteString("time_scanned=")
	builder.WriteString(s.TimeScanned.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("scorecard_version=")
	builder.WriteString(s.ScorecardVersion)
	builder.WriteString(", ")
	builder.WriteString("scorecard_commit=")
	builder.WriteString(s.ScorecardCommit)
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(s.Origin)
	builder.WriteString(", ")
	builder.WriteString("collector=")
	builder.WriteString(s.Collector)
	builder.WriteByte(')')
	return builder.String()
}

// Scorecards is a parsable slice of Scorecard.
type Scorecards []*Scorecard

// FromResponse scans the gremlin response data into Scorecards.
func (s *Scorecards) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scans []struct {
		ID               int                     `json:"id,omitempty"`
		Checks           []*model.ScorecardCheck `json:"checks,omitempty"`
		AggregateScore   float64                 `json:"aggregate_score,omitempty"`
		TimeScanned      int64                   `json:"time_scanned,omitempty"`
		ScorecardVersion string                  `json:"scorecard_version,omitempty"`
		ScorecardCommit  string                  `json:"scorecard_commit,omitempty"`
		Origin           string                  `json:"origin,omitempty"`
		Collector        string                  `json:"collector,omitempty"`
	}
	if err := vmap.Decode(&scans); err != nil {
		return err
	}
	for _, v := range scans {
		node := &Scorecard{ID: v.ID}
		node.Checks = v.Checks
		node.AggregateScore = v.AggregateScore
		node.TimeScanned = time.Unix(0, v.TimeScanned)
		node.ScorecardVersion = v.ScorecardVersion
		node.ScorecardCommit = v.ScorecardCommit
		node.Origin = v.Origin
		node.Collector = v.Collector
		*s = append(*s, node)
	}
	return nil
}
