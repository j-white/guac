// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/slsaattestation"
)

// ArtifactCreate is the builder for creating a Artifact entity.
type ArtifactCreate struct {
	config
	mutation *ArtifactMutation
	hooks    []Hook
}

// SetAlgorithm sets the "algorithm" field.
func (ac *ArtifactCreate) SetAlgorithm(s string) *ArtifactCreate {
	ac.mutation.SetAlgorithm(s)
	return ac
}

// SetDigest sets the "digest" field.
func (ac *ArtifactCreate) SetDigest(s string) *ArtifactCreate {
	ac.mutation.SetDigest(s)
	return ac
}

// AddOccurrenceIDs adds the "occurrences" edge to the Occurrence entity by IDs.
func (ac *ArtifactCreate) AddOccurrenceIDs(ids ...int) *ArtifactCreate {
	ac.mutation.AddOccurrenceIDs(ids...)
	return ac
}

// AddOccurrences adds the "occurrences" edges to the Occurrence entity.
func (ac *ArtifactCreate) AddOccurrences(o ...*Occurrence) *ArtifactCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddOccurrenceIDs(ids...)
}

// AddSbomIDs adds the "sbom" edge to the BillOfMaterials entity by IDs.
func (ac *ArtifactCreate) AddSbomIDs(ids ...int) *ArtifactCreate {
	ac.mutation.AddSbomIDs(ids...)
	return ac
}

// AddSbom adds the "sbom" edges to the BillOfMaterials entity.
func (ac *ArtifactCreate) AddSbom(b ...*BillOfMaterials) *ArtifactCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ac.AddSbomIDs(ids...)
}

// AddAttestationIDs adds the "attestations" edge to the SLSAAttestation entity by IDs.
func (ac *ArtifactCreate) AddAttestationIDs(ids ...int) *ArtifactCreate {
	ac.mutation.AddAttestationIDs(ids...)
	return ac
}

// AddAttestations adds the "attestations" edges to the SLSAAttestation entity.
func (ac *ArtifactCreate) AddAttestations(s ...*SLSAAttestation) *ArtifactCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddAttestationIDs(ids...)
}

// AddSameIDs adds the "same" edge to the HashEqual entity by IDs.
func (ac *ArtifactCreate) AddSameIDs(ids ...int) *ArtifactCreate {
	ac.mutation.AddSameIDs(ids...)
	return ac
}

// AddSame adds the "same" edges to the HashEqual entity.
func (ac *ArtifactCreate) AddSame(h ...*HashEqual) *ArtifactCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ac.AddSameIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (ac *ArtifactCreate) Mutation() *ArtifactMutation {
	return ac.mutation
}

// Save creates the Artifact in the database.
func (ac *ArtifactCreate) Save(ctx context.Context) (*Artifact, error) {
	return withHooks(ctx, ac.gremlinSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ArtifactCreate) SaveX(ctx context.Context) *Artifact {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ArtifactCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ArtifactCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ArtifactCreate) check() error {
	if _, ok := ac.mutation.Algorithm(); !ok {
		return &ValidationError{Name: "algorithm", err: errors.New(`ent: missing required field "Artifact.algorithm"`)}
	}
	if _, ok := ac.mutation.Digest(); !ok {
		return &ValidationError{Name: "digest", err: errors.New(`ent: missing required field "Artifact.digest"`)}
	}
	return nil
}

func (ac *ArtifactCreate) gremlinSave(ctx context.Context) (*Artifact, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := ac.gremlin().Query()
	if err := ac.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &Artifact{config: ac.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	ac.mutation.id = &rnode.ID
	ac.mutation.done = true
	return rnode, nil
}

func (ac *ArtifactCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.AddV(artifact.Label)
	if value, ok := ac.mutation.Algorithm(); ok {
		v.Property(dsl.Single, artifact.FieldAlgorithm, value)
	}
	if value, ok := ac.mutation.Digest(); ok {
		v.Property(dsl.Single, artifact.FieldDigest, value)
	}
	for _, id := range ac.mutation.OccurrencesIDs() {
		v.AddE(occurrence.ArtifactLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(occurrence.ArtifactLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(artifact.Label, occurrence.ArtifactLabel, id)),
		})
	}
	for _, id := range ac.mutation.SbomIDs() {
		v.AddE(billofmaterials.ArtifactLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(billofmaterials.ArtifactLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(artifact.Label, billofmaterials.ArtifactLabel, id)),
		})
	}
	for _, id := range ac.mutation.AttestationsIDs() {
		v.AddE(slsaattestation.BuiltFromLabel).From(g.V(id)).InV()
	}
	for _, id := range ac.mutation.SameIDs() {
		v.AddE(hashequal.ArtifactsLabel).From(g.V(id)).InV()
	}
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	tr := constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	for _, cr := range constraints[1:] {
		tr = cr.pred.Coalesce(cr.test, tr)
	}
	return tr
}

// ArtifactCreateBulk is the builder for creating many Artifact entities in bulk.
type ArtifactCreateBulk struct {
	config
	builders []*ArtifactCreate
}
