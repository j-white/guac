// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// OccurrenceDelete is the builder for deleting a Occurrence entity.
type OccurrenceDelete struct {
	config
	hooks    []Hook
	mutation *OccurrenceMutation
}

// Where appends a list predicates to the OccurrenceDelete builder.
func (od *OccurrenceDelete) Where(ps ...predicate.Occurrence) *OccurrenceDelete {
	od.mutation.Where(ps...)
	return od
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (od *OccurrenceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, od.gremlinExec, od.mutation, od.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (od *OccurrenceDelete) ExecX(ctx context.Context) int {
	n, err := od.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (od *OccurrenceDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := od.gremlin().Query()
	if err := od.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	od.mutation.done = true
	return res.ReadInt()
}

func (od *OccurrenceDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(occurrence.Label)
	for _, p := range od.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// OccurrenceDeleteOne is the builder for deleting a single Occurrence entity.
type OccurrenceDeleteOne struct {
	od *OccurrenceDelete
}

// Where appends a list predicates to the OccurrenceDelete builder.
func (odo *OccurrenceDeleteOne) Where(ps ...predicate.Occurrence) *OccurrenceDeleteOne {
	odo.od.mutation.Where(ps...)
	return odo
}

// Exec executes the deletion query.
func (odo *OccurrenceDeleteOne) Exec(ctx context.Context) error {
	n, err := odo.od.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{occurrence.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (odo *OccurrenceDeleteOne) ExecX(ctx context.Context) {
	if err := odo.Exec(ctx); err != nil {
		panic(err)
	}
}
