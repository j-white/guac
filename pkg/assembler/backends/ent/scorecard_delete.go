// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/scorecard"
)

// ScorecardDelete is the builder for deleting a Scorecard entity.
type ScorecardDelete struct {
	config
	hooks    []Hook
	mutation *ScorecardMutation
}

// Where appends a list predicates to the ScorecardDelete builder.
func (sd *ScorecardDelete) Where(ps ...predicate.Scorecard) *ScorecardDelete {
	sd.mutation.Where(ps...)
	return sd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sd *ScorecardDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sd.gremlinExec, sd.mutation, sd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sd *ScorecardDelete) ExecX(ctx context.Context) int {
	n, err := sd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sd *ScorecardDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := sd.gremlin().Query()
	if err := sd.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	sd.mutation.done = true
	return res.ReadInt()
}

func (sd *ScorecardDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(scorecard.Label)
	for _, p := range sd.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// ScorecardDeleteOne is the builder for deleting a single Scorecard entity.
type ScorecardDeleteOne struct {
	sd *ScorecardDelete
}

// Where appends a list predicates to the ScorecardDelete builder.
func (sdo *ScorecardDeleteOne) Where(ps ...predicate.Scorecard) *ScorecardDeleteOne {
	sdo.sd.mutation.Where(ps...)
	return sdo
}

// Exec executes the deletion query.
func (sdo *ScorecardDeleteOne) Exec(ctx context.Context) error {
	n, err := sdo.sd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{scorecard.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sdo *ScorecardDeleteOne) ExecX(ctx context.Context) {
	if err := sdo.Exec(ctx); err != nil {
		panic(err)
	}
}
